webpackJsonp([1], [function(e, t, i) {
    i(711),
    e.exports = i(1026)
}
, , function(e, t) {
    e.exports = {
        SEGMENT: "segment",
        NODE: "node",
        VENUE: "venue",
        SPEED_CAMERA: "camera",
        JUNCTION: "junction",
        BIG_JUNCTION: "bigJunction",
        USER: "user",
        STREET: "street",
        CITY: "city",
        COUNTRY: "country",
        MAP_PROBLEM: "mapProblem",
        TURN_PROBLEM: "turnProblem",
        UPDATE_REQUEST: "mapUpdateRequest",
        NC: "nodeConnection",
        JUNCTION_NC: "junctionConnection",
        RESTRICTION: "restriction",
        MERGED_NODE: "mergedNode",
        STATE: "state",
        PROBLEM_DETAILS: "problemDetail",
        UPDATE_REQUEST_SESSION: "updateRequestSession",
        ARCHIVE_SESSION: "archive",
        ARCHIVE_SESSION_DATA: "archiveSession",
        HOUSE_NUMBER: "houseNumber",
        ROAD_CLOSURE: "roadClosure",
        USER_AREA: "userArea",
        MTE: "majorTrafficEvent",
        RESTRICTED_AREA: "restrictedArea"
    }
}
, function(e, t, i) {
    var n, s = i(5), r = i(303);
    n = OpenLayers.Class(s, {
        subActions: null ,
        initialize: function(e) {
            s.prototype.initialize.apply(this, [e]),
            this.subActions = []
        },
        destroy: function() {
            for (var e = 0, t = this.subActions.length; e < t; e++)
                this.subActions[e].destroy();
            this.subActions = null ,
            s.prototype.destroy.apply(this)
        },
        isLeaf: function() {
            return !1
        },
        doSubAction: function(e) {
            e.setModel(this.model);
            var t = e.doAction();
            return t !== !1 ? this.subActions.push(e) : e.destroy(),
            t
        },
        doAction: function() {
            for (var e, t = !1, i = 0, n = this.subActions.length; i < n; i++)
                e = this.subActions[i].doAction() !== !1,
                t = t || e
        },
        undoAction: function() {
            for (var e = this.subActions.length - 1; e >= 0; e--)
                this.subActions[e].undoAction()
        },
        redoAction: function() {
            for (var e = 0, t = this.subActions.length; e < t; e++)
                this.subActions[e].redoAction()
        },
        accept: function(e) {
            var t = e.getTraversalOrder(this)
              , i = e.beforeEnter(this)
              , n = !1;
            t !== r.Order.POST && (e.visit(this),
            n = !0),
            i !== !1 && this.subActions.forEach(function(t) {
                t.accept(e)
            }),
            n || e.visit(this),
            e.afterLeave(this)
        },
        getBounds: function() {
            var e, t, i, n;
            if (this.subActions.isEmpty())
                return null ;
            for (n = this.subActions.first().getBounds(),
            e = n ? n.clone() : new OpenLayers.Bounds,
            t = 1; t < this.subActions.length; t++)
                i = this.subActions[t],
                n = i.getBounds(),
                n && n.getWidth() > 0 && n.getHeight() > 0 && e.extend(n);
            return e
        },
        serialize: function(e, t) {
            return null
        },
        CLASS_NAME: "Waze.Action.CompositeAction"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(6), r = i(81);
    n = OpenLayers.Class({
        id: null ,
        state: null ,
        persistent: !1,
        initialize: function(e, t) {
            t && t.parse && e && this.parse(e),
            OpenLayers.Util.extend(this, e)
        },
        getID: function() {
            return this.id || this.ID
        },
        setID: function(e) {
            this.id = e
        },
        isNew: function() {
            var e = this.getID();
            return e < 0 || null === e || _.isUndefined(e)
        },
        isDeleted: function() {
            return !(!this.state || this.state !== OpenLayers.State.DELETE)
        },
        isUpdated: function() {
            return this.state === OpenLayers.State.UPDATE
        },
        isUnchanged: function() {
            return !this.state
        },
        getVersion: function() {
            return this.version || 1
        },
        clone: function() {
            return new n(this)
        },
        setSelected: function(e) {
            this.selected = e
        },
        isSelected: function() {
            return !!this.selected
        },
        setSnapped: function(e) {
            this.snapped = e
        },
        isSnapped: function() {
            return !!this.snapped
        },
        setPersistent: function(e) {
            this.persistent = e
        },
        isPersistent: function() {
            return this.persistent
        },
        getPermissions: function() {
            return s.isDefined(this.permissions) ? this.permissions : 0
        },
        isAllowed: function(e) {
            return e && 0 !== (this.getPermissions() & e)
        },
        isInUse: function(e) {
            e = e || {};
            var t = s.isDefined(this.state) && null !== this.state
              , i = e.keepUnsaved && t
              , n = e.keepSelected && (this.isSelected() || this.isSnapped())
              , r = e.keepPersistent && this.isPersistent();
            return i || n || r
        },
        isDeletable: function() {
            return this.PERMISSIONS.DELETE && this.isAllowed(this.PERMISSIONS.DELETE)
        },
        arePropertiesEditable: function() {
            return this.PERMISSIONS.EDIT_PROPERTIES && this.isAllowed(this.PERMISSIONS.EDIT_PROPERTIES)
        },
        isGeometryEditable: function() {
            return this.PERMISSIONS.EDIT_GEOMETRY && this.isAllowed(this.PERMISSIONS.EDIT_GEOMETRY)
        },
        merge: function(e) {
            this.parse(e),
            _.extend(this, e),
            this.originalValues && (this.originalValues = void 0)
        },
        getOriginalValue: function(e) {
            return this.originalValues && !_.isUndefined(this.originalValues[e]) ? this.originalValues[e] : this[e]
        },
        getAttributes: function() {
            return this
        },
        CLASS_NAME: "Waze.Model.Object"
    }),
    _.extend(n.prototype, r),
    n.ALL_PERMISSIONS = 2147483647,
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(6);
    n = OpenLayers.Class({
        model: null ,
        GEOMETRY_FIELDS: ["geometry"],
        initialize: function(e) {
            OpenLayers.Util.extend(this, e)
        },
        destroy: function() {
            this.model = null
        },
        isLeaf: function() {
            return !0
        },
        accept: function(e) {
            e.visit(this)
        },
        setModel: function(e) {
            this.model = e
        },
        undoSupported: function() {
            return s.isDefined(this.undoAction)
        },
        doAction: function() {},
        redoAction: function() {},
        undoAction: function() {},
        getBounds: function() {
            return null
        },
        eachGeometryField: function(e, t) {
            this.GEOMETRY_FIELDS.forEach(function(i) {
                t.call(this, i, e[i], e)
            }, this)
        },
        CLASS_NAME: "Waze.Action"
    }),
    n.TYPE = {
        ADD: "ADD",
        DELETE: "DELETE",
        UPDATE: "UPDATE",
        REPLACE: "REPLACE"
    },
    e.exports = n
}
, function(e, t) {
    var i = {};
    i.isUndefined = function(e) {
        return void 0 === e
    }
    ,
    i.isDefined = function(e) {
        return void 0 !== e
    }
    ,
    i.defined = function(e) {
        return "undefined" != typeof e && null !== e
    }
    ,
    i.localStorage = {
        get: function(e) {
            try {
                var t = window.localStorage.getItem(e);
                return t ? JSON.parse(t) : null
            } catch (e) {
                return null
            }
        },
        set: function(e, t) {
            try {
                return t = JSON.stringify(t),
                window.localStorage.setItem(e, t),
                !0
            } catch (e) {
                return !1
            }
        }
    },
    i.copyAttributes = function(e, t, n) {
        for (var s = 0, r = n.length; s < r; s++)
            i.isDefined(t[n[s]]) && (e[n[s]] = t[n[s]])
    }
    ,
    i.protect = function(e, t, i) {
        try {
            t.call(i)
        } catch (t) {
            throw $.post(Waze.Config.paths.logger, {
                action: e,
                type: t.name,
                message: t.message,
                trace: t.stack
            }),
            t
        }
    }
    ,
    i.is = function(e, t) {
        var i = Object.prototype.toString.call(t).slice(8, -1);
        return void 0 !== t && null !== t && i === e
    }
    ,
    i.isPowerOfTwo = function(e) {
        return 0 === (e & e - 1)
    }
    ,
    i.metricToImperial = {
        km: "mi"
    },
    e.exports = i
}
, function(e, t, i) {
    var n, s, r = {}.hasOwnProperty;
    n = i(5),
    s = OL.Class(n, {
        initialize: function(e, t, i) {
            this.object = e,
            this.newAttributes = t,
            n.prototype.initialize.apply(this, [i]),
            this.oldAttributes = {},
            this.object.writableAttributes ? this.newAttributes = _.pick(this.newAttributes, this.object.writableAttributes) : this.newAttributes = _.clone(this.newAttributes),
            this.changed = !1,
            this.stateChanged = !1,
            this.object.attributes ? this.attributes = this.object.attributes : this.attributes = this.object
        },
        doAction: function() {
            var e, t, i;
            this.repository = this.model.getRepository(this.object.type),
            i = this.newAttributes;
            for (e in i)
                r.call(i, e) && (t = i[e],
                this.attributes[e] !== t && (this._keepOriginal(e),
                this.oldAttributes[e] = this.attributes[e],
                this.attributes[e] = t,
                this.changed = !0));
            return !!this.changed && (this.object.state || (this.object.state = OL.State.UPDATE,
            this.stateChanged = !0),
            this.repository.changed(this.object),
            !0)
        },
        _keepOriginal: function(e) {
            var t, i;
            if (null != (i = this.object.keepOriginal) ? i[e] : void 0)
                return (t = this.object).originalValues || (t.originalValues = {}),
                _.isUndefined(this.object.originalValues[e]) ? this.object.originalValues[e] = this.attributes[e] : void 0
        },
        undoAction: function() {
            var e, t, i;
            i = this.oldAttributes;
            for (e in i)
                r.call(i, e) && (t = i[e],
                this.attributes[e] = t);
            return this.stateChanged && (this.object.state = null ),
            this.repository.changed(this.object)
        },
        redoAction: function() {
            var e, t, i;
            this.stateChanged && (this.object.state = OL.State.UPDATE),
            i = this.newAttributes;
            for (e in i)
                r.call(i, e) && (t = i[e],
                this.attributes[e] = t);
            return this.repository.changed(this.object)
        },
        serialize: function() {
            var e, t;
            return e = this.newAttributes,
            e.id = this.object.getID(),
            t = {
                _objectType: this.object.type,
                action: n.TYPE.UPDATE,
                attributes: e
            }
        },
        CLASS_NAME: "Waze.Action.UpdateObject"
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s = i(6);
    n = {},
    n.EARTH_RADIUS_KM = 6371,
    n.EARTH_CIRC_KM = 40075,
    n.getHeading = function(e, t) {
        var i = Math.atan2(t.y - e.y, t.x - e.x).toDeg();
        return i = (360 + i) % 360,
        Math.round(i / 45) % 8
    }
    ,
    n.destinationOnPlane = function(e, t, i) {
        t = t.toRad();
        var s, r, o = 1e3 * n.EARTH_RADIUS_KM;
        return s = Math.cos(t) * i / (o * Math.cos(e.lat.toRad())),
        r = Math.sin(t) * i / o,
        new OL.LonLat(s.toDeg() + e.lon,r.toDeg() + e.lat)
    }
    ,
    n.distanceOnPlane = function(e, t) {
        var i, s = ((e.lat + t.lat) / 2).toRad(), r = (e.lon - t.lon).toRad(), o = (e.lat - t.lat).toRad();
        return i = 1e3 * n.EARTH_RADIUS_KM * Math.sqrt(o * o + Math.pow(Math.cos(s) * r, 2))
    }
    ,
    n.getPointAlongLine = function(e, t, i) {
        var r, o, a, l, u, c = e, d = t, h = 0;
        for (s.defined(i) ? (r = i,
        h = n.getPointEdge(c, i)) : r = c[h]; h < c.length - 1; ) {
            if (o = c[h + 1],
            l = r.distanceTo(o),
            !(d - l > 0)) {
                a = d / l,
                r = new OpenLayers.Geometry.Point((1 - a) * r.x + a * o.x,(1 - a) * r.y + a * o.y),
                u = Math.atan2(r.y - o.y, r.x - o.x);
                break
            }
            r = o,
            d -= l,
            h++
        }
        return {
            point: r,
            angle: u
        }
    }
    ,
    n.getDistanceToPointOnLine = function(e, t) {
        for (var i = e.distanceTo(t, {
            details: !0
        }).line, n = new OL.Geometry.Point(i.x1,i.y1), s = new OL.Geometry.Point(i.x2,i.y2), r = 0, o = e.components, a = o.length, l = 0; r < a - 1; r++) {
            if (o[r].equals(s) && o[r + 1].equals(n) || o[r].equals(n) && o[r + 1].equals(s))
                return l += o[r].distanceTo(t);
            l += o[r].distanceTo(o[r + 1])
        }
        return l
    }
    ,
    n.splitLineStringWithPolygon = function(e, t) {
        var i = t.distanceTo(e, {
            details: !0
        })
          , n = new OL.Geometry.Point(i.x0,i.y0);
        if (i.distance > 0)
            return null ;
        i = e.distanceTo(n, {
            details: !0
        });
        for (var s = i.line, r = new OL.Geometry.Point(s.x1,s.y1), o = new OL.Geometry.Point(s.x2,s.y2), a = e.components.slice(), l = a.length, u = 0; u < l - 1 && !(a[u].equals(o) && a[u + 1].equals(r) || a[u].equals(r) && a[u + 1].equals(o)); u++)
            ;
        var c = [n.clone()].concat(a.splice(u + 1));
        return a.push(n.clone()),
        [new OL.Geometry.LineString(a), new OL.Geometry.LineString(c)]
    }
    ,
    n.getPointEdge = function(e, t, i) {
        var n, r = 0, o = e.length - 1, a = !1, l = Number.POSITIVE_INFINITY, u = 0;
        s.defined(i) || (i = 0);
        do
            n = OpenLayers.Geometry.distanceToSegment(t, {
                x1: e[r].x,
                y1: e[r].y,
                x2: e[r + 1].x,
                y2: e[r + 1].y
            }).distance,
            n < l && (l = n,
            u = r),
            n <= i && (a = !0),
            r++;
        while (!a && r < o);return a || (r = u),
        r - 1
    }
    ,
    n.toGeoJSON = function(e) {
        return OL.Format.GeoJSON.prototype.extract.geometry.apply(OL.Format.GeoJSON.prototype, [e])
    }
    ,
    n.parse = function(e) {
        var t = OL.Format.GeoJSON.prototype.parseGeometry(e);
        return n.project(t),
        t
    }
    ,
    n.project = function(e) {
        return e.transform(W.Config.map.projection.remote, W.Config.map.projection.local),
        e
    }
    ,
    n.unproject = function(e) {
        return e.transform(W.Config.map.projection.local, W.Config.map.projection.remote),
        e
    }
    ,
    OL.Geometry.LineString.prototype.distanceTo = function(e, t) {
        var i, n, s, r, o = !(t && t.edge === !1), a = o && t && t.details, l = {}, u = Number.POSITIVE_INFINITY;
        if (e instanceof OpenLayers.Geometry.Point) {
            var c, d = this.getSortedSegments(), h = e.x, p = e.y;
            for (s = 0,
            r = d.length; s < r; ++s)
                if (c = d[s],
                i = OpenLayers.Geometry.distanceToSegment(e, c),
                i.distance < u) {
                    if (u = i.distance,
                    l = i,
                    n = c,
                    0 === u)
                        break
                } else if (c.x2 > h && (p > c.y1 && p < c.y2 || p < c.y1 && p > c.y2))
                    break;
            l = a ? {
                distance: l.distance,
                x0: l.x,
                y0: l.y,
                x1: h,
                y1: p,
                line: n
            } : l.distance
        } else if (e instanceof OpenLayers.Geometry.LineString) {
            var g, m, f, v, y, b = this.getSortedSegments(), _ = e.getSortedSegments(), w = _.length, S = {
                point: !0
            };
            e: for (s = 0,
            r = b.length; s < r; ++s) {
                g = b[s],
                v = g.x1,
                y = g.y1;
                for (var E = 0; E < w; ++E) {
                    if (m = _[E],
                    f = OpenLayers.Geometry.segmentsIntersect(g, m, S)) {
                        u = 0,
                        l = {
                            distance: 0,
                            x0: f.x,
                            y0: f.y,
                            x1: f.x,
                            y1: f.y
                        };
                        break e
                    }
                    i = OpenLayers.Geometry.distanceToSegment({
                        x: v,
                        y: y
                    }, m),
                    i.distance < u && (u = i.distance,
                    l = {
                        distance: u,
                        x0: v,
                        y0: y,
                        x1: i.x,
                        y1: i.y
                    })
                }
            }
            if (a || (l = l.distance),
            0 !== u && g) {
                i = e.distanceTo(new OpenLayers.Geometry.Point(g.x2,g.y2), t);
                var C = a ? i.distance : i;
                C < u && (l = a ? {
                    distance: u,
                    x0: i.x1,
                    y0: i.y1,
                    x1: i.x0,
                    y1: i.y0
                } : C)
            }
        } else
            l = e.distanceTo(this, t),
            a && (l = {
                distance: l.distance,
                x0: l.x1,
                y0: l.y1,
                x1: l.x0,
                y1: l.y0
            });
        return l
    }
    ,
    OL.Geometry.Collection.prototype.distanceTo = function(e, t) {
        for (var i, n, s, r = !(t && t.edge === !1), o = r && t && t.details, a = Number.POSITIVE_INFINITY, l = 0, u = this.components.length; l < u && (i = this.components[l].distanceTo(e, t),
        s = o ? i.distance : i,
        !(s < a && (a = s,
        n = i,
        n.model = this.components[l].model,
        0 === a))); ++l)
            ;
        return n
    }
    ,
    OL.Geometry.Point.prototype.toLonLat = function() {
        return new OL.LonLat(this.x,this.y)
    }
    ,
    OL.LonLat.prototype.toPoint = function() {
        return new OL.Geometry.Point(this.lon,this.lat)
    }
    ,
    OL.Geometry.LinearRing.prototype.getCentroid = function() {
        if (this.components) {
            var e = this.components.length;
            if (e > 0 && e <= 2)
                return this.components[0].clone();
            if (e > 2) {
                var t, i, n, s = 0, r = 0, o = this.components[0].x, a = this.components[0].y, l = -1 * this.getArea();
                if (0 !== l) {
                    for (t = 0; t < e - 1; t++) {
                        var u = this.components[t]
                          , c = this.components[t + 1];
                        s += (u.x + c.x - 2 * o) * ((u.x - o) * (c.y - a) - (c.x - o) * (u.y - a)),
                        r += (u.y + c.y - 2 * a) * ((u.x - o) * (c.y - a) - (c.x - o) * (u.y - a))
                    }
                    i = o + s / (6 * l),
                    n = a + r / (6 * l)
                } else {
                    for (t = 0; t < e - 1; t++)
                        s += this.components[t].x,
                        r += this.components[t].y;
                    i = s / (e - 1),
                    n = r / (e - 1)
                }
                return new OpenLayers.Geometry.Point(i,n)
            }
            return null
        }
    }
    ,
    n.geometryToGeoJSON = function(e) {
        return OpenLayers.Format.GeoJSON.prototype.extract.geometry.apply(OpenLayers.Format.GeoJSON.prototype, [e])
    }
    ,
    n.pointToSquarePolygon = function(e, t) {
        var i = n.unproject(e.clone())
          , s = OL.Util.destinationVincenty({
            lon: i.x,
            lat: i.y
        }, 45, Math.sqrt(2 * Math.pow(t / 2, 2)))
          , r = i.x - s.lon
          , o = i.y - s.lat
          , a = new OL.Geometry.LinearRing([new OL.Geometry.Point(i.x - r,i.y - o), new OL.Geometry.Point(i.x + r,i.y - o), new OL.Geometry.Point(i.x + r,i.y + o), new OL.Geometry.Point(i.x - r,i.y + o)])
          , l = new OL.Geometry.Polygon([a]);
        return n.project(l)
    }
    ,
    n.polygonToPoint = function(e) {
        var t = e.getBounds().getCenterLonLat();
        return new OL.Geometry.Point(t.lon,t.lat)
    }
    ,
    e.exports = n
}
, function(e, t, i) {
    "use strict";
    var n = i(28)
      , s = i(532)
      , r = (i(6),
    i(44))
      , o = {};
    o.safe_t = function(e, t) {
        var i, n = {};
        return Object.forEach(t, function(e, t) {
            n[e] = "%{" + e + "}"
        }),
        i = o.escape(I18n.t(e, n)),
        Object.forEach(t, function(e, t) {
            t.htmlSafe || (t = o.escape(t)),
            i = i.replace(new RegExp("%\\{" + e + "\\}"), t)
        }),
        i
    }
    ,
    o.safeString = function(e) {
        var t = new String(e);
        return t.htmlSafe = !0,
        t
    }
    ,
    o.contentTag = function(e, t) {
        return t = o.escape(t),
        this.safeString("<" + e + ">" + t + "</" + e + ">")
    }
    ,
    o.copyShortcut = function() {
        return $.browser.mac ? "⌘+C" : "Ctrl+C"
    }
    ,
    o.link = function(e, t, i) {
        e = o.escape(e);
        var n = "";
        return i = i || {},
        Object.forEach(i, function(e, t) {
            n += " " + o.escape(e) + '="' + o.escape(t) + '"'
        }),
        n += ' href="' + window.encodeURI(t) + '"',
        this.safeString("<a" + n + ">" + e + "</a>")
    }
    ,
    o.formInput = function(e, t, i, n, s, r) {
        t = o.escape(t),
        i = o.escape(i),
        e = o.escape(e);
        var a = "<input type='" + e + "' name='" + i + "' value='" + n + "' id='" + i + "-" + n + "'";
        return n === s && (a += " checked "),
        r === !1 && (a += " disabled "),
        a += "/><label for='" + i + "-" + n + "'>" + t + "</label>"
    }
    ,
    o.radio = function(e, t, i, n, s) {
        return o.formInput("radio", e, t, i, n, s)
    }
    ,
    o.checkbox = function(e, t, i, n, s) {
        return o.formInput("checkbox", e, t, i, n, s)
    }
    ,
    o.option = function(e, t, i, n, s) {
        var r = "<option value='" + o.escape(t) + "'";
        return i instanceof Array || t !== i && (n || parseInt(t, 10) !== parseInt(i, 10)) || (r += " selected"),
        s && (r += " disabled"),
        r += ">" + o.escape(e) + "</option>"
    }
    ,
    o.categoryOption = function(e, t) {
        return o.option(I18n.t("venues.categories." + t), t, e[t] ? t : null , !0)
    }
    ,
    o.roadTypeOption = function(e, t) {
        return o.option(I18n.t("segment.road_types." + t), t, e.attributes.roadType)
    }
    ,
    o.directionOption = function(e, t) {
        return o.option(I18n.t("segment.direction." + t), t, e.attributes.direction)
    }
    ,
    o.formatDate = function(e) {
        return e ? new Date(e).toDateString() : ""
    }
    ,
    o.durationString = function(e, t) {
        var i = (t - e) / 1e3;
        return W.brara.ViewHelpers.getTimeFromSeconds.call(this, i)
    }
    ,
    o.timeDistanceInWordsFromNow = function() {
        return W.brara.ViewHelpers.timeDistanceInWordsFromNow.apply(this, arguments)
    }
    ,
    o.dateOnlyString = function(e) {
        return e ? I18n.l("date.formats.long", e) : ""
    }
    ,
    o.dateString = function(e) {
        function t(e, i) {
            return e.toString().length < i ? t("0" + e, i) : e
        }
        var i, n = (new Date,
        new Date(e));
        return e ? (i = o.dateOnlyString.apply(this, arguments),
        i += ", " + t(n.getHours(), 2) + ":" + t(n.getMinutes(), 2)) : ""
    }
    ,
    o.lengthString = function(e, t) {
        t = _.defaults(t || {}, {
            units: r.UNIT.METER,
            translationKey: "measurements.length"
        });
        var i = r.UNIT.KILOMETER
          , n = r.getLocalizedDisplayValue(e, t.units, i);
        n < 1 && (i = r.UNIT.METER,
        n = r.getLocalizedDisplayValue(e, t.units, i)),
        n = n.toFixed(2) / 1;
        var s = r.localizeUnit(i);
        return I18n.t(t.translationKey + "." + s, {
            count: n
        })
    }
    ,
    o.speedString = function(e) {
        var t = r.localizeUnit(r.UNIT.KILOMETER)
          , i = "";
        return _.isUndefined(e) || (i = r.getLocalizedValue(e, r.UNIT.KILOMETER),
        i = i.toFixed(2)),
        I18n.t("measurements.speed." + t, {
            speed: i
        })
    }
    ,
    o.areaString = function(e) {
        var t = Math.sqrt(e)
          , i = r.getLocalizedDisplayValue(t, r.UNIT.METER, r.UNIT.KILOMETER)
          , n = r.localizeUnit(r.UNIT.KILOMETER);
        return i = (i * i).toFixed(2),
        I18n.t("measurements.area." + n + "_squared", {
            area: i
        })
    }
    ,
    o.formatUserName = function(e) {
        var t, i = W.model.users.get(e);
        return i ? (t = i.temporary ? I18n.t("user.temporary") : i.userName,
        t + "(" + (i.isStaffUser() ? "staff" : i.normalizedLevel) + ")") : e
    }
    ,
    o.userProfileLink = function(e) {
        var t = W.model.users.get(e);
        return !t || t.temporary ? null : W.Config.user_profile.url + window.encodeURIComponent(t.userName)
    }
    ,
    o.userProfile = function(e) {
        var t = this.userProfileLink(e)
          , i = this.formatUserName(e);
        return null !== t && W.Config.user_profile.enable ? this.link(i, t, {
            target: "_blank"
        }) : o.escape(i)
    }
    ,
    o.formatRank = function(e) {
        return e === n.prototype.StaffRank ? I18n.t("edit.segment.lock_levels.staff") : n.normalizeLevel(e)
    }
    ,
    o.segmentRankOption = function(e, t, i) {
        var n, s = !1;
        return null === t ? (n = I18n.t("edit.segment.lock_levels.automatic", {
            rank: o.formatRank(e.attributes.rank)
        }),
        i || (s = !0)) : n = o.formatRank(t),
        o.option(n, t, e.attributes.lockRank, !1, s)
    }
    ,
    o.getDisplayUnitValue = function(e, t, i) {
        return e = r.getLocalizedValue(e, t),
        i && (e = Math.round(e)),
        e
    }
    ,
    o.shortcutMaskToKeys = function(e) {
        var t, i = "";
        return ["alt", "ctrl", "shift"].forEach(function(n) {
            t = n + "Key",
            e[t] && (i += "<kbd class='" + o.escape(t) + "'><span>" + o.escape(t) + "</span></kbd> + ")
        }),
        i
    }
    ,
    o.getShortcutKey = function(e) {
        var t = Waze.accelerators.SpecialKeys[e.keyCode];
        return t || (t = String.fromCharCode(e.keyCode)),
        t
    }
    ,
    o.hidableMessage = function(e) {
        var t = new s(e);
        return t.shouldShow() ? t.render() : ""
    }
    ,
    o.formatDays = function(e) {
        var t, i = o._groupDays(e);
        return t = i.map(function(e) {
            return e.length > 1 ? I18n.t("date.abbr_day_names")[e[0]] + "-" + I18n.t("date.abbr_day_names")[e.last()] : I18n.t("date.abbr_day_names")[e[0]]
        }),
        t.join(",")
    }
    ,
    o.formatMonthRange = function(e, t) {
        if (!e && !t)
            return "";
        if (t < e)
            return "";
        if (e && !t)
            return I18n.strftime(e, I18n.t("formats.date.month_range.end_missing"));
        if (t && !e)
            return I18n.strftime(t, I18n.t("formats.date.month_range.start_missing"));
        var i = e.getFullYear() === t.getFullYear()
          , n = i && e.getMonth() === t.getMonth()
          , s = I18n.strftime(e, "%b")
          , r = I18n.strftime(e, "%Y")
          , o = I18n.strftime(t, "%b")
          , a = I18n.strftime(t, "%Y")
          , l = void 0;
        return l = i ? n ? "formats.date.month_range.single_year_single_month" : "formats.date.month_range.single_year_multi_month" : "formats.date.month_range.multi_year",
        I18n.t(l, {
            startMonth: s,
            startYear: r,
            endMonth: o,
            endYear: a
        })
    }
    ,
    o.formatOpeningHour = function(e) {
        var t = o.formatDays(e.get("days"));
        return t += e.isAllDay() ? " " + I18n.t("edit.landmark.opening_hours.time_span.all_day") : " " + e.get("fromHour") + "-" + e.get("toHour")
    }
    ,
    o._groupDays = function(e) {
        var t, i = [], n = [], s = e.sort();
        return "monday" === I18n.t("date.first_day") && 0 === s[0] && (s.shift(),
        s.push(0)),
        t = s[0],
        s.forEach(function(e, r) {
            Math.abs(e - t) % 6 <= 1 ? n.push(e) : (i.push(n),
            n = [e]),
            r === s.length - 1 && i.push(n),
            t = e
        }),
        i
    }
    ,
    o.formatAddress = function(e) {
        if (e.get("isEmpty"))
            return I18n.t("edit.landmark.no_address");
        var t = []
          , i = e.get("street");
        null !== i && (i.isEmpty ? t.push(I18n.t("edit.address.no_street")) : t.push(i.name));
        var n = e.get("city");
        n.isEmpty() ? t.push(I18n.t("edit.address.no_city")) : t.push(n.attributes.name);
        var s = e.get("state");
        s.model.hasStates() && !s.isEmpty ? t.push(s.name) : t.push(e.get("country").name);
        var r = t.join(", ")
          , o = e.get("houseNumber");
        return null !== o && (r = o + " " + r),
        r
    }
    ,
    o.formatVenueCategories = function(e) {
        return e = e.map(function(e) {
            return I18n.t("venues.categories." + e)
        }),
        e.sort().join(", ")
    }
    ,
    o.formatVenueName = function(e) {
        return e || I18n.t("edit.landmark.unnamed")
    }
    ,
    o.formatVenueUpdateRequestId = function(e) {
        var t = String(e)
          , i = t.split("/");
        return i[i.length - 1]
    }
    ,
    o.getSaveErrorTitle = function(e) {
        var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "save.error_types.default.title"
          , i = I18n.t("save.error_types")
          , n = i[e];
        return n && n.title || I18n.t(t)
    }
    ,
    o.formatYesNo = function(e) {
        return e === !0 ? I18n.t("formats.boolean.is_true") : I18n.t("formats.boolean.is_false")
    }
    ,
    o.escape = function(e) {
        return ("" + e).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/\//g, "&#47;")
    }
    ,
    o.cleanValue = function(e) {
        switch (e) {
        case null :
        case void 0:
            return "";
        case !0:
        case !1:
            return "" + e;
        default:
            return e
        }
    }
    ,
    e.exports = o
}
, function(e, t) {
    e.exports = {
        ADDED: "objectsadded",
        CHANGED: "objectschanged",
        REMOVED: "objectsremoved",
        SYNCED: "objectssynced",
        UPDATED: "objectsupdated"
    }
}
, function(e, t) {
    var i = OpenLayers.Class({
        className: null ,
        $div: null ,
        events: null ,
        initialize: function(e, t) {
            this.className = e,
            this.moveWithTransform = !!t,
            this.$div = $("<div />").addClass(e),
            this.div = this.$div.get(0),
            this.imageDiv = this.$div.get(0)
        },
        destroy: function() {
            this.erase(),
            this.$div = null
        },
        clone: function() {
            return new i(this.className)
        },
        draw: function(e) {
            return this.moveWithTransform ? (this.$div.css({
                transform: "translate(" + e.x + "px, " + e.y + "px)"
            }),
            this.$div.css({
                position: "absolute"
            })) : this.$div.css({
                position: "absolute",
                left: e.x,
                top: e.y
            }),
            this.$div.get(0)
        },
        moveTo: function(e) {
            null !== e && (this.px = e),
            null === this.px ? this.display(!1) : this.moveWithTransform ? this.$div.css({
                transform: "translate(" + this.px.x + "px, " + this.px.y + "px)"
            }) : this.$div.css({
                left: this.px.x,
                top: this.px.y
            })
        },
        erase: function() {
            this.$div.remove()
        },
        display: function(e) {
            this.$div.toggle(e)
        },
        isDrawn: function() {
            return !!this.$div.parent().length
        },
        bringToFront: function() {
            if (this.isDrawn()) {
                var e = this.$div.parent();
                this.$div.detach().appendTo(e)
            }
        },
        forceReflow: function() {
            return this.$div.get(0).offsetWidth
        },
        CLASS_NAME: "Waze.DivIcon"
    });
    e.exports = i
}
, function(e, t, i) {
    var n = i(13)
      , s = OpenLayers.Class({
        uniqueID: null ,
        events: null ,
        $el: null ,
        elSelector: null ,
        tagName: "div",
        ui: null ,
        className: null ,
        attr: null ,
        template: null ,
        olEvents: null ,
        initialize: function(e) {
            OpenLayers.Util.extend(this, e),
            null === this.$el && null === this.elSelector ? this.$el = $("<" + this.tagName + "/>") : null !== this.elSelector && (this.$el = $(this.elSelector)),
            null !== this.className && this.$el.addClass(this.className),
            this.olEvents = new OpenLayers.Events(this),
            this.uniqueID = "presenter-" + s.baseID--,
            Object.forEach(this.events || {}, function(e, t) {
                var i, n, s = e.indexOf(" ");
                s !== -1 ? (i = e.slice(0, s),
                n = e.slice(s + 1)) : (i = e,
                n = ""),
                i += "." + this.uniqueID,
                this.$el.on(i, n, $.proxy(this, t))
            }, this)
        },
        render: function() {
            var e = this.$el.html(n.getHTML("templates/" + this.template, this.serialize()));
            return this._findUiElements(),
            this.onRender(),
            $.Deferred().resolve(e).promise()
        },
        onRender: function() {},
        _findUiElements: function() {
            var e = this;
            null !== this.ui && (this._uiBindings || (this._uiBindings = this.ui),
            this.ui = {},
            Object.forEach(this._uiBindings, function(t, i) {
                e.ui[t] = e.$el.find(i)
            }))
        },
        _eventStopPropagation: function(e) {
            e.stopPropagation()
        },
        serialize: function() {
            return {}
        },
        hide: function() {
            this.$el.hide()
        },
        show: function() {
            this.$el.show()
        },
        on: function(e, t, i) {
            this.olEvents.register(e, i, t)
        },
        off: function(e, t, i) {
            this.olEvents.unregister(e, i, t)
        },
        fire: function(e, t) {
            this.olEvents.triggerEvent(e, t)
        },
        destroy: function() {
            null !== this.$el && this.$el.off("." + this.uniqueID),
            this.$el = null ,
            this.olEvents.destroy()
        }
    });
    s.baseID = 0,
    e.exports = s
}
, function(e, t, i) {
    "use strict";
    function n(e, t) {
        return e = "./" + e + ".hamlc",
        t = _.extend({}, o, t),
        r(e)(t)
    }
    var s = i(9)
      , r = i(1029);
    r.keys().map(r);
    var o = {
        t: I18n.t.bind(I18n),
        l: I18n.l.bind(I18n),
        h: s,
        safe_t: s.safe_t,
        __htmlEscape: s.escape,
        __cleanValue: s.cleanValue
    };
    o.renderPartial = n,
    Marionette.Renderer.render = function(e, t) {
        return "function" == typeof e ? e(t) : n(e, t)
    }
    ,
    e.exports = {
        getHTML: n
    }
}
, function(e, t) {
    var i = e.exports = {
        version: "2.4.0"
    };
    "number" == typeof __e && (__e = i)
}
, function(e, t, i) {
    var n = i(175)("wks")
      , s = i(178)
      , r = i(19).Symbol
      , o = "function" == typeof r
      , a = e.exports = function(e) {
        return n[e] || (n[e] = o && r[e] || (o ? r : s)("Symbol." + e))
    }
    ;
    a.store = n
}
, function(e, t, i) {
    var n, s = i(4), r = i(6);
    n = OpenLayers.Class(OpenLayers.Feature.Vector, s, {
        initialize: function(e, t) {
            this.attributes = e || {},
            t && t.parse && e && this.parse(e),
            e && (this.attributes = OL.Util.extend(this.attributes, e)),
            _.defaults(this.attributes, _.result(this, "defaults"))
        },
        merge: function(e) {
            this.parse(e),
            OpenLayers.Util.extend(this.attributes, e),
            this.originalValues && (this.originalValues = void 0)
        },
        getOriginalValue: function(e) {
            return this.originalValues && !_.isUndefined(this.originalValues[e]) ? this.originalValues[e] : this.attributes[e]
        },
        getID: function() {
            return this.attributes.id
        },
        setID: function(e) {
            this.attributes.id = e
        },
        getVersion: function() {
            return this.attributes.version || s.prototype.getVersion.apply(this)
        },
        clone: function() {
            var e, t = null , i = _.extend({}, this.attributes);
            return this.attributes.geometry && (t = this.attributes.geometry.clone()),
            i.geometry = t,
            e = new n(i),
            e.state = this.state,
            e
        },
        getPermissions: function() {
            return r.isDefined(this.attributes.permissions) ? this.attributes.permissions : 0
        },
        getAttributes: function() {
            return this.attributes
        },
        CLASS_NAME: "Waze.Feature.Vector"
    }),
    Object.defineProperty(n.prototype, "geometry", {
        get: function() {
            if (this.attributes)
                return this.attributes.geometry
        },
        set: function(e) {
            this.attributes.geometry = e
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    "use strict";
    var n = (i(41),
    {
        _getManifestsWith: function(e) {
            return W.Config.enabled_modules.map(function(t) {
                try {
                    return i(1071)("./" + t + "/Manifest")[e]
                } catch (e) {
                    throw new Error("Error loading module " + t + ":\nManifest file does not exist.")
                }
            }).filter(function(e) {
                return void 0 !== e
            })
        },
        getEntryPoints: function() {
            return this._getManifestsWith("entryPoint").map(function(e) {
                return e.class[e.callback].bind(e.class)
            })
        },
        getMenus: function() {
            return this._getManifestsWith("menu")
        },
        getRepositories: function() {
            return this._getManifestsWith("feature")
        },
        getLayers: function() {
            return _.flatten(this._getManifestsWith("layers"))
        },
        getFeatureEditors: function() {
            return this._getManifestsWith("feature").filter(function(e) {
                return void 0 !== e.featureEditorClass
            }).map(function(e) {
                return _.pick(e, "featureType", "featureEditorClass")
            })
        },
        getModels: function() {
            return this._getManifestsWith("feature").filter(function(e) {
                return void 0 !== e.modelClass
            }).map(function(e) {
                return _.pick(e, "repositoryName", "modelClass")
            })
        }
    });
    n.LAYER_TYPE = {
        RASTER: "raster",
        FEATURE: "feature",
        MARKER: "marker"
    },
    e.exports = n
}
, function(e, t) {
    var i = OpenLayers.Class({
        visible: !0,
        enabled: !0,
        initialize: function(e) {
            OpenLayers.Util.applyDefaults(this, e)
        },
        destroy: function() {},
        show: function() {
            this.setVisible(!0)
        },
        hide: function() {
            this.setVisible(!1)
        },
        setVisible: function(e) {
            e !== this.visible && (this.visible = e,
            this.div && (e ? OpenLayers.Element.show(this.div) : OpenLayers.Element.hide(this.div)),
            this.events && this.events.triggerEvent("visibilitychanged"))
        },
        enable: function(e) {
            this.setEnabled(!0, e)
        },
        disable: function(e) {
            this.setEnabled(!1, e)
        },
        isEnabled: function() {
            return this.enabled
        },
        setEnabled: function(e, t) {
            this.enabled !== e && (this.enabled = e,
            this.events && !t && this.events.triggerEvent("enablechanged"))
        },
        CLASS_NAME: "Waze.Control"
    });
    e.exports = i
}
, function(e, t) {
    var i = e.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
    "number" == typeof __g && (__g = i)
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h, p = {}.hasOwnProperty;
    n = i(4),
    s = i(51),
    o = i(16),
    a = i(8),
    l = i(29),
    u = i(58),
    r = i(121),
    d = i(7),
    h = i(6),
    c = OL.Class(o, {
        defaults: function() {
            return {
                type: 1,
                roadType: 1,
                fromNodeID: null ,
                toNodeID: null ,
                crossroadID: null ,
                fwdDirection: !0,
                revDirection: !1,
                fwdMaxSpeed: null ,
                revMaxSpeed: null ,
                fwdMaxSpeedUnverified: !1,
                revMaxSpeedUnverified: !1,
                fwdTurnsLocked: !0,
                revTurnsLocked: !0,
                level: 0,
                allowNoDirection: !0,
                rank: 0,
                lockRank: null ,
                permissions: n.ALL_PERMISSIONS & ~this.PERMISSIONS.EDIT_ROUTING_ROAD_TYPES,
                routingRoadType: null ,
                flags: 0,
                fwdFlags: 0,
                revFlags: 0,
                primaryStreetID: null ,
                fromCrossroads: [],
                toCrossroads: [],
                streetIDs: [],
                fromConnections: {},
                toConnections: {}
            }
        },
        nested: {
            fwdRestrictions: u,
            revRestrictions: u,
            geometry: OL.Geometry
        },
        FLAG_ATTRIBUTES: {
            tunnel: {
                mask: "flags",
                flag: r.FLAGS.TUNNEL
            },
            unpaved: {
                mask: "flags",
                flag: r.FLAGS.UNPAVED
            },
            fwdSpeedCamera: {
                mask: "fwdFlags",
                flag: r.FWD.SPEED_CAMERA
            },
            revSpeedCamera: {
                mask: "revFlags",
                flag: r.REV.SPEED_CAMERA
            }
        },
        initialize: function(e) {
            o.prototype.initialize.apply(this, arguments),
            this.flagAttributes = this.calcFlagAttributes()
        },
        calcFlagAttributes: function() {
            var e, t, i, n, r;
            i = {},
            r = this.FLAG_ATTRIBUTES;
            for (e in r)
                p.call(r, e) && (t = r[e],
                n = this.attributes[t.mask],
                i[e] = new s(n).isEnabled(t.flag));
            return i
        },
        parse: function(e) {
            o.prototype.parse.apply(this, arguments),
            this.parseTurnRestrictions(e)
        },
        parseTurnRestrictions: function(e) {
            var t, i, n, s, r, o, a;
            for (r = ["fromRestrictions", "toRestrictions"],
            a = [],
            n = 0,
            s = r.length; n < s; n++)
                t = r[n],
                a.push(function() {
                    var n, s;
                    n = e[t],
                    s = [];
                    for (i in n)
                        o = n[i],
                        s.push(e[t][i] = o.map(function(e) {
                            return new u(e,{
                                parse: !0
                            })
                        }));
                    return s
                }());
            return a
        },
        cloneRestrictions: function(e) {
            var t, i, n;
            t = {};
            for (i in e)
                n = e[i],
                t[i] = n.map(function(e) {
                    return e.clone()
                });
            return t
        },
        merge: function() {
            return delete this.attributes.origIDs,
            o.prototype.merge.apply(this, arguments)
        },
        copyAttributes: function(e) {
            var t, i, n, s;
            t = this.attributes,
            i = t.geometry,
            OpenLayers.Util.extend(t, e.attributes);
            for (n in t)
                p.call(t, n) && (s = t[n],
                s instanceof Array && (t[n] = s.slice(0)));
            delete t.origIDs,
            t.geometry = i
        },
        getRestrictionsAtNode: function(e) {
            return this.attributes.toNodeID === e.getID() ? this.attributes.toRestrictions : this.attributes.fromRestrictions
        },
        getConnectionsAtNode: function(e) {
            return this.attributes.toNodeID === e.getID() ? this.attributes.toConnections : this.attributes.fromConnections
        },
        getAddress: function() {
            var e, t, i, n, s;
            return s = this.model.streets.get(this.attributes.primaryStreetID),
            s && (t = this.model.cities.get(s.cityID)),
            t && (n = this.model.states.get(t.attributes.stateID)),
            n && (i = this.model.countries.get(t.attributes.countryID)),
            t && n && i ? e = this.attributes.streetIDs.map(function(e) {
                return function(t) {
                    e.model.streets.get(t)
                }
            }(this)) : s = null ,
            {
                street: s,
                city: t,
                state: n,
                country: i,
                altStreets: e
            }
        },
        getAddressDetails: function() {
            var e, t;
            return e = this.getAddress(),
            t = {},
            e.street ? (t.streetName = e.street.isEmpty ? I18n.t("edit.address.no_street") : e.street.name,
            t.cityName = e.city.isEmpty() ? I18n.t("edit.address.no_city") : e.city.attributes.name,
            t.hasState = this.model.hasStates() && !e.state.isDefault,
            t.stateName = e.state.name,
            t.countryName = e.country.name,
            t) : null
        },
        getCenter: function() {
            var e, t, i, n, s, r, o, a, l, u, c;
            for (c = this.geometry.getLength(),
            e = c / 2,
            i = c,
            n = 1,
            s = this.geometry.components.length; n < s && (r = this.geometry.components[n - 1].distanceTo(this.geometry.components[n]),
            i -= r,
            !(i <= e)); )
                n++;
            return o = this.geometry.components[n - 1],
            a = this.geometry.components[n],
            u = Math.atan2(a.y - o.y, a.x - o.x),
            l = e - i,
            t = new OpenLayers.Geometry.Point(o.x,o.y),
            t.x += l * Math.cos(u),
            t.y += l * Math.sin(u),
            t
        },
        getArrowPoints: function(e, t, i) {
            var n, s, r, o, a, l, u, c, d;
            if (n = [],
            c = this.geometry.components,
            s = 0,
            o = 0,
            !h.defined(e))
                return [];
            for (t && t < e && (s += e - t),
            r = c[o]; o < c.length - 1; )
                u = c[o + 1],
                l = r.distanceTo(u),
                i && o === c.length - 2 && (l -= i),
                s + l < e ? (s += l,
                o++,
                r = u) : (d = Math.atan2(u.y - r.y, u.x - r.x),
                a = e - s,
                r = new OpenLayers.Geometry.Point(r.x,r.y),
                r.move(a * Math.cos(d), a * Math.sin(d)),
                n.push([r.clone(), d]),
                s = 0);
            return n
        },
        getSubSegment: function(e, t) {
            var i, n, s, r, o, a, l, u, c;
            for (i = 0,
            l = this.geometry.components,
            u = [],
            s = 0,
            t && (l = l.clone().reverse()),
            n = l.first(),
            u.push(new OpenLayers.Geometry.Point(n.x,n.y)); i < e && s < l.length - 1; )
                a = l[s + 1],
                o = n.distanceTo(a),
                i + o < e ? (u.push(new OpenLayers.Geometry.Point(a.x,a.y)),
                i += o,
                n = a,
                s++) : (r = e - i,
                c = Math.atan2(a.y - n.y, a.x - n.x),
                n = new OpenLayers.Geometry.Point(n.x,n.y),
                n.move(r * Math.cos(c), r * Math.sin(c)),
                u.push(n),
                i = e);
            return new OpenLayers.Feature.Vector(new OpenLayers.Geometry.LineString(u))
        },
        clone: function() {
            var e, t;
            return e = _.extend({}, this.attributes),
            this.attributes.geometry && (e.geometry = this.attributes.geometry.clone()),
            t = new c(e),
            this.attributes.streetIDs && (t.attributes.streetIDs = this.attributes.streetIDs.clone()),
            t.attributes.fromRestrictions = this.cloneRestrictions(this.attributes.fromRestrictions),
            t.attributes.toRestrictions = this.cloneRestrictions(this.attributes.toRestrictions),
            t.attributes.fromConnections = _.clone(this.attributes.fromConnections),
            t.attributes.toConnections = _.clone(this.attributes.toConnections),
            t.state = this.state,
            t
        },
        splitByGeoms: function(e) {
            var t, i;
            return t = this.clone(),
            i = [],
            delete t.geometry,
            e.forEach(function(e) {
                var n;
                n = t.clone(),
                n.geometry = e,
                n.geometry.calculateBounds(),
                n.state = OpenLayers.State.INSERT,
                i.push(n)
            }),
            i
        },
        isOneWay: function() {
            return this.attributes.fwdDirection ? !this.attributes.revDirection : this.attributes.revDirection
        },
        isDeletable: function() {
            return !this.isInBigJunction() && this.isAllowed(l.Segments.DELETE) && !this.hasClosures()
        },
        reverseDirection: function() {
            this.isOneWay() && (this.attributes.fwdDirection = !this.attributes.fwdDirection,
            this.attributes.revDirection = !this.attributes.revDirection)
        },
        isConnectedToNode: function(e) {
            return this.attributes.toNodeID === e.getID() || this.attributes.fromNodeID === e.getID()
        },
        isSingular: function() {
            var e;
            return e = this.geometry.components.first(),
            this.geometry.components.every(function(t) {
                return t.equals(e)
            })
        },
        edgeIntersectionWithEllipse: function(e, t, i, n, s) {
            var r, o, a, l, u, c, d, h, p, g, m, f, v, y, b, _, w, S;
            return w = 1,
            S = 1,
            i > n ? (S = i / n,
            y = i) : (w = n / i,
            y = n),
            u = (e[1].x - e[0].x) * w,
            c = (e[1].y - e[0].y) * S,
            g = (e[0].x - t.x) * w,
            m = (e[0].y - t.y) * S,
            h = (e[1].x - t.x) * w,
            p = (e[1].y - t.y) * S,
            d = Math.sqrt(g * g + m * m),
            f = d < y,
            v = [],
            r = u * u + c * c,
            o = 2 * (g * u + m * c),
            a = g * g + m * m - y * y,
            l = o * o - 4 * r * a,
            !(l < 0) && (l = Math.sqrt(l),
            b = (-o + l) / (2 * r),
            _ = (-o - l) / (2 * r),
            [b, _].sort().forEach(function(i) {
                var n;
                i >= 0 && i <= 1 && (n = new OpenLayers.Geometry.Point(e[0].x + i * u / w,e[0].y + i * c / S),
                v.push({
                    point: n,
                    angle: (2 * Math.PI + Math.atan2((n.y - t.y) * S, (n.x - t.x) * w)) % (2 * Math.PI),
                    goingOut: f,
                    index: s
                }),
                f = !f)
            }),
            v.isEmpty() ? d < y && Math.sqrt(h * h + p * p) < y : v)
        },
        intersectionWithEllipse: function(e, t, i) {
            var n, s, r, o, a, l, u;
            for (u = this.geometry.getVertices(),
            o = [],
            n = !0,
            a = u[0],
            s = 0; s < u.length - 1; ) {
                if (l = u[s + 1],
                r = this.edgeIntersectionWithEllipse([a, l], e, t, i, s),
                r instanceof Array ? o = o.concat(r) : n &= r,
                o.length > 2)
                    return !1;
                a = l,
                s++
            }
            return o.isEmpty() ? n : o
        },
        is: function() {
            var e, t, i, n, s, r, o, a, l, u, c;
            for (t = this.geometry.components,
            s = t.length,
            i = t[0],
            r = t[1],
            n = 0; n < s - 2; )
                o = t[n + 2],
                a = [o.x - r.x, o.y - r.y],
                u = [i.x - r.x, i.y - r.y],
                l = Math.sqrt(a[0] * a[0] + a[1] * a[1]),
                c = Math.sqrt(u[0] * u[0] + u[1] * u[1]),
                e = Math.acos((a[0] * u[0] + a[1] * u[1]) / (l * c)),
                i = r,
                r = o,
                n++
        },
        setDirection: function(e) {
            this.attributes.fwdDirection = 0 !== (1 & e),
            this.attributes.revDirection = 0 !== (2 & e)
        },
        getDirection: function() {
            return (this.attributes.fwdDirection ? 1 : 0) + (this.attributes.revDirection ? 2 : 0)
        },
        isTollRoad: function() {
            return this.attributes.fwdToll || this.attributes.revToll
        },
        setTollRoad: function(e) {
            this.attributes.fwdToll = this.attributes.revToll = e
        },
        getEntireStreet: function() {
            var e, t;
            return e = this.attributes.primaryStreetID,
            t = this.model.streets.get(e),
            !t || t.isEmpty ? [this] : _.values(this.model.segments.objects).filter(function(t) {
                return t.attributes.primaryStreetID === e
            })
        },
        getConnectedSegments: function(e) {
            var t;
            return t = this.model.nodes.get(this.attributes[e + "NodeID"]),
            t ? t.attributes.segIDs.map(function(e) {
                return function(t) {
                    return e.model.segments.get(t)
                }
            }(this)) : []
        },
        getTurnsLockAttribute: function(e) {
            return e.getID() === this.attributes.toNodeID ? "fwdTurnsLocked" : "revTurnsLocked"
        },
        getNodeAttribute: function(e) {
            return this.attributes.fromNodeID === e.getID() ? "from" : this.attributes.toNodeID === e.getID() ? "to" : null
        },
        areTurnsLocked: function(e) {
            return e.getID() === this.attributes.toNodeID ? this.attributes.fwdTurnsLocked : this.attributes.revTurnsLocked
        },
        setTurnsLock: function(e, t) {
            e.getID() === this.attributes.toNodeID ? this.attributes.fwdTurnsLocked = t : this.attributes.revTurnsLocked = t
        },
        equals: function(e) {
            return e.getID() === this.getID() && e.type === this.type
        },
        isLockedByHigherRank: function() {
            return !(!this.attributes.lockRank || !this.model.loginManager.isLoggedIn()) && this.getLockRank() > this.model.loginManager.user.rank
        },
        getLockRank: function() {
            return null === this.attributes.lockRank ? this.attributes.rank : this.attributes.lockRank
        },
        hasEmptyStreet: function() {
            var e;
            return e = this.model.streets.get(this.attributes.primaryStreetID),
            e && e.isEmpty
        },
        isHighway: function() {
            return this.HIGHWAY_ROAD_TYPES.contains(this.attributes.roadType)
        },
        isRoad: function() {
            return this.ROAD_TYPES.contains(this.attributes.roadType)
        },
        isDrivable: function() {
            return !this.NON_DRIVABLE_ROAD_TYPES.contains(this.attributes.roadType)
        },
        hasFromNode: function() {
            return null !== this.attributes.fromNodeID
        },
        getFromNode: function() {
            return this.hasFromNode() ? this.model.nodes.get(this.attributes.fromNodeID) : null
        },
        hasToNode: function() {
            return null !== this.attributes.toNodeID
        },
        getToNode: function() {
            return this.hasToNode() ? this.model.nodes.get(this.attributes.toNodeID) : null
        },
        getNodeByDirection: function(e) {
            return null != this.attributes[e + "NodeID"] ? this.model.nodes.get(this.attributes[e + "NodeID"]) : null
        },
        isInBigJunction: function() {
            return this.isBigJunctionShort() || this.hasFromBigJunction() || this.hasToBigJunction()
        },
        isBigJunctionShort: function() {
            return null != this.attributes.crossroadID
        },
        getBigJunction: function() {
            return this.isBigJunctionShort() ? this.model.bigJunctions.get(this.attributes.crossroadID) : null
        },
        hasFromBigJunction: function(e) {
            return null != e ? _.contains(this.attributes.fromCrossroads, e) : this.attributes.fromCrossroads.length > 0
        },
        getFromBigJunction: function() {
            return this.hasFromBigJunction() ? this.model.bigJunctions.get(this.attributes.fromCrossroads) : null
        },
        hasToBigJunction: function(e) {
            return null != e ? _.contains(this.attributes.toCrossroads, e) : this.attributes.toCrossroads.length > 0
        },
        getToBigJunction: function() {
            return this.hasToBigJunction() ? this.model.bigJunctions.get(this.attributes.toCrossroads) : null
        },
        getRelatedBigJunction: function() {
            return this.getBigJunction() || this.getFromBigJunction() || this.getToBigJunction()
        },
        getBigJunctionRank: function() {
            var e;
            return e = this.getRelatedBigJunction(),
            null == e && e.rank,
            0
        },
        getConnectedSegmentsByDirection: function(e) {
            var t;
            return t = this.getConnectedSegments(e).filter(function(t) {
                return function(i) {
                    var n;
                    if (i !== t)
                        return n = t.getNodeByDirection(e),
                        t.isTurnAllowed(i, n) || i.isTurnAllowed(t, n)
                }
            }(this))
        },
        canForceHouseNumbers: function() {
            return this.isAllowed(this.PERMISSIONS.FORCE_HOUSE_NUMBERS)
        },
        canEditHouseNumbers: function() {
            return this.isAllowed(this.PERMISSIONS.EDIT_HOUSE_NUMBERS)
        },
        canEditClosures: function() {
            return this.isAllowed(this.PERMISSIONS.EDIT_CLOSURES)
        },
        canChangeMaxSpeedUnverified: function(e) {
            return this.getOriginalValue(e) === !0
        },
        arePropertiesEditable: function() {
            return !this.isInBigJunction() && !this.hasClosures() && o.prototype.arePropertiesEditable.apply(this, arguments)
        },
        isGeometryEditable: function() {
            return !this.isInBigJunction() && !this.hasClosures() && o.prototype.isGeometryEditable.apply(this, arguments)
        },
        getRestrictionCount: function() {
            var e;
            return e = 0,
            this.attributes.fwdRestrictions && this.attributes.fwdDirection && (e += this.attributes.fwdRestrictions.length),
            this.attributes.revRestrictions && this.attributes.revDirection && (e += this.attributes.revRestrictions.length),
            e
        },
        hasClosures: function() {
            return !!this.attributes.hasClosures
        },
        lockTurns: function(e, t) {
            var i, n;
            return n = {},
            n[this.getTurnsLockAttribute(e)] = !0,
            i = new d(this,n),
            t ? i : this.model.actionManager.add(i)
        },
        getFwdHeading: function() {
            var e;
            return e = this.geometry.components,
            a.getHeading(e[0], e[e.length - 1])
        },
        getRevHeading: function() {
            var e;
            return e = this.geometry.components,
            a.getHeading(e[e.length - 1], e[0])
        },
        isTurnAllowed: function(e, t) {
            var i, n;
            return i = e.getID(),
            n = this.getNodeAttribute(t),
            !!n && (this.attributes[n + "Connections"][i] || !1)
        },
        canUserSetDefaultRank: function(e) {
            return e >= this.attributes.rank
        },
        canEditRoutingRoadTypes: function() {
            return this.isAllowed(this.PERMISSIONS.EDIT_ROUTING_ROAD_TYPES)
        },
        canEditConnections: function() {
            return this.canEditFromConnections() && this.canEditToConnections()
        },
        canEditFromConnections: function() {
            return this.isAllowed(this.PERMISSIONS.EDIT_CONNECTIONS) && !this.hasFromBigJunction()
        },
        canEditToConnections: function() {
            return this.isAllowed(this.PERMISSIONS.EDIT_CONNECTIONS) && !this.hasToBigJunction()
        },
        isRoutable: function() {
            return this.ROUTING_ROAD_TYPES.contains(this.attributes.roadType)
        },
        houseNumbersEditablePerType: function() {
            return this.HOUSENUMBER_ROAD_TYPES.contains(this.attributes.roadType)
        },
        isInRoundabout: function() {
            return null != this.attributes.junctionID
        },
        getRoundabout: function() {
            return this.isInRoundabout() ? this.model.junctions.get(this.attributes.junctionID) : null
        },
        getRoutingRoadTypes: function() {
            var e, t, i;
            return t = this.attributes.roadType,
            e = {
                prev: null ,
                next: null
            },
            this.isRoutable() ? (i = this.ROUTING_ROAD_TYPES.indexOf(this.attributes.roadType),
            e.prev = this.ROUTING_ROAD_TYPES[i - 1] || null ,
            e.next = this.ROUTING_ROAD_TYPES[i + 1] || null ,
            e) : e
        },
        MinLevel: -5,
        MaxLevel: 9,
        HIGHWAY_ROAD_TYPES: [3, 4, 6, 7],
        ROUTING_ROAD_TYPES: [1, 2, 7, 6, 3],
        ROAD_TYPES: [1, 2, 3, 4, 6, 7, 8, 14],
        NON_DRIVABLE_ROAD_TYPES: [5, 10, 16, 18, 19],
        HOUSENUMBER_ROAD_TYPES: [1, 2, 5, 6, 7, 8, 10, 14, 16, 17, 20],
        keepOriginal: {
            fwdMaxSpeedUnverified: !0,
            revMaxSpeedUnverified: !0
        },
        PERMISSIONS: {
            EDIT_GEOMETRY: 1,
            EDIT_PROPERTIES: 2,
            DELETE: 4,
            EDIT_EMPTY_STREET: 8,
            SPLIT_DIRECTIONS: 16,
            SET_UNKNOWN_DIRECTIONS: 32,
            EDIT_HOUSE_NUMBERS: 64,
            FORCE_HOUSE_NUMBERS: 128,
            EDIT_CONNECTIONS: 256,
            EDIT_ROUTING_ROAD_TYPES: 512,
            EDIT_CLOSURES: 1024
        },
        CLASS_NAME: "Waze.Feature.Vector.Segment"
    }),
    e.exports = c
}
, function(e, t, i) {
    var n, s, r = {}.hasOwnProperty;
    n = i(125),
    s = OL.Class(n, {
        initialize: function(e) {
            this.attributes = null != e ? e : {}
        },
        set: function(e, t) {
            var i, n, s, o;
            null == t && (t = {}),
            "string" == typeof e && (n = e,
            o = arguments[1],
            e = {},
            e[n] = o,
            t = arguments[2] || {}),
            i = !1;
            for (n in e)
                r.call(e, n) && (o = e[n],
                this.attributes[n] !== o && (s = this.attributes[n],
                this.attributes[n] = o,
                i = !0,
                this.trigger("change:" + n, _.extend({
                    newValue: o,
                    oldValue: s
                }, t))));
            if (i)
                return this.trigger("change", t)
        },
        get: function(e) {
            return this.attributes[e]
        },
        toJSON: function() {
            return $.extend({}, this.attributes)
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(142),
    s = n.extend({
        TYPE: {
            MAP_PROBLEM: "MAP_PROBLEM",
            VENUE_UPDATE_REQUEST: "VENUE_UPDATE_REQUEST",
            UPDATE_REQUEST: "UPDATE_REQUEST"
        },
        MOTIVATIONS: {
            1: "REPORTED_BY_USER",
            2: "USER_FOLLOWS_ISSUE",
            4: "USER_FOLLOWS_ISSUE_LAST_COMMENT",
            8: "CLOSE_TO_FAVORITES",
            16: "NEAR_DRIVES",
            32: "ISSUE_AGE",
            64: "ISSUE_REOPENED",
            128: "CAN_BE_SOLVED_BY_RANK"
        },
        _isModified: function() {
            return !1
        },
        _isResolved: function() {
            return !1
        },
        getSeverity: function() {
            return null
        },
        onModelChanged: function() {
            return this.set("modified", this._isModified())
        },
        onModelSynced: function() {
            if (this.set("modified", !1),
            this._isResolved())
                return this.trigger("resolved")
        },
        onModelRemoved: function() {
            return this.destroy()
        },
        sync: function(e, t, i) {
            var n;
            return null == i && (i = {}),
            "delete" === e && (n = W.Config.paths.issues + "/" + t.get("type") + "/" + t.get("id"),
            i.url = encodeURI(n)),
            Backbone.sync(e, t, i)
        }
    }),
    s.prototype.defaults = _.extend({
        modified: !1
    }, n.prototype.defaults),
    e.exports = s
}
, function(e, t, i) {
    var n, s = i(6);
    n = OpenLayers.Class(OpenLayers.Renderer.SVG, {
        initialize: function() {
            OpenLayers.Renderer.SVG.prototype.initialize.apply(this, arguments),
            this.supportUse = !0
        },
        setAnimation: function(e, t) {
            var i = document.createElementNS(this.xmlns, "animate");
            i.setAttributeNS(null , "attributeName", t.attributeName),
            i.setAttributeNS(null , "dur", t.dur),
            t.from && i.setAttributeNS(null , "from", t.from),
            t.to && i.setAttributeNS(null , "to", t.to),
            t.fill && i.setAttributeNS(null , "fill", t.fill),
            t.begin && i.setAttributeNS(null , "begin", t.begin),
            t.id && i.setAttributeNS(null , "id", t.id),
            t.fill && i.setAttributeNS(null , "fill", t.fill),
            e.appendChild(i)
        },
        setStyle: function(e, t, i) {
            if (OpenLayers.Renderer.SVG.prototype.setStyle.apply(this, arguments),
            t.animation && this.setAnimation(e, t.animation),
            t.mask && e.setAttributeNS(null , "mask", t.mask),
            t.filter && e.setAttributeNS(null , "filter", t.filter),
            s.defined(t.rx) && e.setAttributeNS(null , "rx", t.rx),
            s.defined(t.ry) && e.setAttributeNS(null , "ry", t.ry),
            s.defined(t.maskID)) {
                var n, r = document.getElementById(t.maskID);
                r || (r = document.createElementNS(this.xmlns, "mask"),
                n = document.createElementNS(this.xmlns, "rect"),
                n.setAttributeNS(null , "x", "0"),
                n.setAttributeNS(null , "y", "0"),
                n.setAttributeNS(null , "width", "100%"),
                n.setAttributeNS(null , "height", "100%"),
                n.setAttributeNS(null , "fill", "white"),
                r.setAttributeNS(null , "id", t.maskID),
                r.appendChild(n)),
                r.appendChild(e),
                r._style = t,
                e = r
            }
            return e
        },
        importSymbol: function(e) {
            return this.symbolMetrics = {},
            this.symbolMetrics[e] = [0, 0, 0],
            e
        },
        getNodeType: function(e, t) {
            var i;
            return i = OpenLayers.Renderer.SVG.prototype.getNodeType.apply(this, arguments),
            "circle" === i && s.defined(t.rx) && s.defined(t.ry) && (i = "ellipse"),
            i
        },
        dashStyle: function(e, t) {
            var i;
            if (e.strokeDashArray)
                return e.strokeDashArray;
            i = e.strokeWidth * t;
            var n = e.strokeDashstyle;
            switch (n) {
            case "solid":
                return "none";
            case "dot":
                return [1, 4 * i].join();
            case "dash":
                return [4 * i, 4 * i].join();
            case "dashdot":
                return [4 * i, 4 * i, 1, 4 * i].join();
            case "longdash":
                return [8 * i, 4 * i].join();
            case "longdashdot":
                return [8 * i, 4 * i, 1, 4 * i].join();
            default:
                return OpenLayers.String.trim(n).replace(/\s+/g, ",")
            }
        },
        CLASS_NAME: "Waze.Renderer.ExtendedSVG"
    }),
    e.exports = n
}
, function(e, t, i) {
    "use strict";
    var n = i(51)
      , s = i(7)
      , r = i(44)
      , o = i(10)
      , a = Marionette.LayoutView.extend({
        dataModel: null ,
        events: {
            "submit .attributes-form": "_onAttributesFormSubmitted",
            "change .attributes-form input, .attributes-form select, .attributes-form textarea": "_onAttributeChanged"
        },
        initialize: function(e) {
            this.dataModel = e.dataModel,
            this.model = e.selection[0];
            var t = this.dataModel.getRepository(this.model.type);
            this.listenTo(t, o.CHANGED, this.onFeaturesChanged)
        },
        _onAttributesFormSubmitted: function() {
            return !1
        },
        _toggleFormControls: function(e) {
            this.$(".attributes-form input, textarea, select, button").prop("disabled", !e)
        },
        _isModelEditable: function() {
            return this.model.arePropertiesEditable()
        },
        allowEditing: function(e) {
            var t = e && this._isModelEditable();
            this._toggleFormControls(t),
            t ? this.triggerMethod("editingEnabled") : this.triggerMethod("editingDisabled")
        },
        serializeElement: function(e) {
            var t, i, n = e.data("units");
            if ("checkbox" === e.attr("type") && e.is("[data-multiple]"))
                i = this.$el.find("input[name=" + e.attr("name") + "]:checked"),
                t = i.toArray().map(function(e) {
                    return $(e).val()
                });
            else {
                if ("checkbox" === e.attr("type"))
                    return e.is(":checked");
                t = e.is("select") && e.prop("multiple") ? e.find("option:selected").toArray().map(function(e) {
                    return $(e).val()
                }) : e.is("select") ? e.find("option:selected").val() : e.val()
            }
            return "boolean" === e.data("type") && (t = e.booleanVal()),
            "numeric" === e.data("type") && (t = parseInt(t, 10),
            isNaN(t) && e.is("[data-nullable]") ? t = null : n && (t = r.getOriginalValue(t, n))),
            t
        },
        _removeMixedOption: function(e) {
            return e.find("[data-mixed-indicator]").remove()
        },
        _onAttributeChanged: function(e) {
            var t = $(e.target)
              , i = t.attr("name")
              , s = this.serializeElement(t)
              , r = this[i + "Changed"]
              , o = t.is("[data-refresh]")
              , a = {}
              , l = {}
              , u = _.has(this.model.attributes, i)
              , c = this.model.FLAG_ATTRIBUTES && this.model.FLAG_ATTRIBUTES[i];
            if (t.is("select") && this._removeMixedOption(t),
            c) {
                var d = new n(this.model.attributes[c.mask]);
                s ? d.add(c.flag) : d.remove(c.flag),
                a[c.mask] = d.value,
                l[i] = s,
                this.changed(a, o, void 0, l)
            } else
                r ? r.call(this, s) : u && (a[i] = s,
                this.changed(a, o))
        },
        changed: function(e, t) {
            t || (this.changing = !0),
            this.dataModel.actionManager.add(new s(this.model,e)),
            this.changing = !1
        },
        onFeaturesChanged: function(e) {
            !this.changing && this.hasEditedModelChanged(e) && this.isRendered && this.render()
        },
        hasEditedModelChanged: function(e) {
            if (1 !== e.length)
                return !1;
            var t = e[0];
            return t.getID() === this.model.getID()
        },
        serializeData: function() {
            return this.model
        },
        preventRender: function(e) {
            this.changing = !0;
            try {
                e()
            } finally {
                this.changing = !1
            }
        }
    });
    e.exports = a
}
, function(e, t, i) {
    var n, s, r;
    n = i(3),
    r = i(7),
    s = OL.Class(n, {
        segment: null ,
        node: null ,
        initialize: function(e, t, i) {
            this.node = e,
            this.segment = t,
            n.prototype.initialize.apply(this, [i])
        },
        doAction: function() {
            var e, t;
            return !!(e = this.findSegmentEdge()) && (t = {},
            t[e + "NodeID"] = this.node.getID(),
            this.doSubAction(new r(this.segment,t)),
            this.updateNodeSegmentList(),
            !0)
        },
        findSegmentEdge: function() {
            var e;
            return e = this.segment.geometry.getVertices(!0),
            e[0].equals(this.node.geometry) ? "from" : e[1].equals(this.node.geometry) ? "to" : null
        },
        updateNodeSegmentList: function() {
            var e;
            return e = this.node.attributes.segIDs.clone(),
            e.contains(this.segment.getID()) || e.push(this.segment.getID()),
            this.doSubAction(new r(this.node,{
                segIDs: e
            },{
                dontSerialize: !0
            }))
        },
        CLASS_NAME: "W.Action.ConnectSegment"
    }),
    e.exports = s
}
, function(e, t, i) {
    var n = i(67);
    e.exports = function(e) {
        if (!n(e))
            throw TypeError(e + " is not an object!");
        return e
    }
}
, function(e, t, i) {
    var n, s = i(5), r = i(3), o = i(52), a = i(2);
    n = OpenLayers.Class(r, {
        segment: null ,
        origState: null ,
        hideSegment: !1,
        hidSegment: !1,
        initialize: function(e, t) {
            r.prototype.initialize.apply(this, [t]),
            this.segment = e,
            this.hideSegment = t && !!t.hide
        },
        destroy: function() {
            this.model.segments.get(this.segment.getID()) || this.segment.destroy(),
            this.segment = null ,
            r.prototype.destroy.apply(this)
        },
        doAction: function() {
            var e;
            this.origState = this.segment.state,
            ["fromNodeID", "toNodeID"].forEach(function(t) {
                this.segment.attributes[t] && (e = this.model.nodes.get(this.segment.attributes[t]),
                e && e.isConnectedToSegment(this.segment) && this.doSubAction(new o(this.segment,e,{
                    deleteNode: this.deleteNode,
                    dontSerialize: !0
                })))
            }, this),
            this.hideSegment && (this.segment.hidden || (this.hidSegment = !0),
            this.segment.hidden = !0),
            this.segment.state === OpenLayers.State.INSERT ? this.model.segments.remove(this.segment) : (this.segment.state = OpenLayers.State.DELETE,
            this.model.segments.changed(this.segment))
        },
        undoAction: function() {
            this.segment.state = this.origState,
            this.hidSegment && delete this.segment.hidden,
            this.segment.state === OpenLayers.State.INSERT ? this.model.segments.put(this.segment) : this.model.segments.changed(this.segment),
            r.prototype.undoAction.apply(this)
        },
        redoAction: function() {
            r.prototype.redoAction.apply(this),
            this.hidSegment && (this.segment.hidden = !0),
            this.segment.state === OpenLayers.State.INSERT ? this.model.segments.remove(this.segment) : (this.segment.state = OpenLayers.State.DELETE,
            this.model.segments.changed(this.segment))
        },
        serialize: function() {
            var e = {
                _objectType: a.SEGMENT,
                action: s.TYPE.DELETE,
                attributes: {
                    id: this.segment.getID()
                }
            };
            return e
        },
        CLASS_NAME: "Waze.Action.DeleteSegment"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(4);
    n = OpenLayers.Class(s, {
        initialize: function() {
            s.prototype.initialize.apply(this, arguments),
            this.normalizedLevel = this.NormalizedLevels[this.rank]
        },
        isStaffUser: function() {
            return this.rank >= this.StaffRank
        },
        NormalizedLevels: {
            0: 1,
            1: 2,
            2: 3,
            3: 4,
            4: 5,
            5: 6,
            6: 6
        },
        MinLevel: 0,
        MaxLevel: 5,
        StaffRank: 6,
        CLASS_NAME: "Waze.Feature.Vector.User"
    }),
    n.normalizeLevel = function(e) {
        return n.prototype.NormalizedLevels[e]
    }
    ,
    e.exports = n
}
, function(e, t) {
    e.exports = {
        Segments: {
            EDIT_GEOMETRY: 1,
            EDIT_PROPERTIES: 2,
            DELETE: 4,
            EDIT_EMPTY_STREET: 8,
            SPLIT_DIRECTIONS: 16
        },
        Nodes: {
            EDIT_GEOMETRY: 1,
            DELETE: 2
        },
        Landmarks: {
            EDIT_GEOMETRY: 1,
            EDIT_PROPERTIES: 2,
            DELETE: 4
        }
    }
}
, , function(e, t, i) {
    var n, s, r, o, a = {}.hasOwnProperty;
    n = i(4),
    r = i(17),
    s = i(455),
    o = OL.Class(OL.Format.GeoJSON, {
        initialize: function() {
            var e, t, i, n, o, a;
            for (this._typeToClass = _.clone(s.TYPE_TO_CLASS),
            n = r.getModels(),
            e = 0,
            t = n.length; e < t; e++)
                o = n[e],
                a = o.repositoryName,
                i = o.modelClass,
                this._typeToClass[a] = i
        },
        read: function(e) {
            var t, i;
            for (i in e)
                a.call(e, i) && (t = e[i],
                _.isUndefined(t.objects) || this._parseObjects(i, t.objects));
            return e
        },
        _parseObjects: function(e, t) {
            var i, r, o, a, l, u, c, d, h, p;
            if (r = s.TYPE_TO_FACTORY[e]) {
                for (h = [],
                o = a = 0,
                u = t.length; a < u; o = ++a)
                    d = t[o],
                    h.push(t[o] = r.create(d));
                return h
            }
            for (i = this._typeToClass[e] || n,
            p = [],
            o = l = 0,
            c = t.length; l < c; o = ++l)
                d = t[o],
                p.push(t[o] = new i(d,{
                    parse: !0
                }));
            return p
        }
    }),
    e.exports = o
}
, function(e, t) {
    var i, n, s, r;
    n = {
        A_TO_B: 1,
        B_TO_A: 2,
        TWO_WAY: 3
    },
    s = ["startDate", "endDate", "reason", "location", "permanent", "createdBy", "eventId"],
    i = /^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}$/,
    r = Backbone.Model.extend({
        defaults: function() {
            return {
                startDate: (new Date).toString("yyyy-MM-dd HH:mm"),
                endDate: null ,
                reason: null ,
                location: null ,
                permanent: !1,
                eventId: null ,
                direction: n.A_TO_B,
                createdBy: null ,
                segments: [],
                closures: [],
                reverseSegments: {}
            }
        },
        initialize: function() {
            var e, t, i;
            return e = this.get("closures"),
            (null != e ? e.length : void 0) > 0 && (t = e[0],
            this._setFromSingleClosure(t)),
            i = this.get("segments"),
            null != i && (i = _(i).sortBy(function(e) {
                return e.getID()
            }),
            this.set({
                segments: i
            })),
            this._originalAttribs = this.toJSON()
        },
        _setFromSingleClosure: function(e) {
            var t, i, n;
            for (i = 0,
            n = s.length; i < n; i++)
                t = s[i],
                this.set(t, e[t]);
            return this.set({
                direction: this._getDirectionFromClosure(e)
            })
        },
        _getDirectionFromClosure: function(e) {
            var t;
            return t = e.forward,
            this.isReverse(e.segID) && (t = !t),
            t ? n.A_TO_B : n.B_TO_A
        },
        original: function(e) {
            return this._originalAttribs[e]
        },
        differsFromOriginal: function(e) {
            return this.get(e) !== this.original(e)
        },
        hasChanged: function() {
            return s.some(function(e) {
                return function(t) {
                    return e.differsFromOriginal(t)
                }
            }(this))
        },
        isOppositeToOriginal: function() {
            var e, t;
            return t = this.original("direction"),
            e = this.get("direction"),
            this._areOpposites(t, e)
        },
        isOppositeTo: function(e) {
            var t, i;
            return i = e.get("direction"),
            t = this.get("direction"),
            this._areOpposites(t, i) && this._hasSameAttributes(e) && this._hasSameSegmentIDs(e)
        },
        _hasSameAttributes: function(e) {
            return s.every(function(t) {
                return function(i) {
                    return t.get(i) === e.get(i)
                }
            }(this))
        },
        _hasSameSegmentIDs: function(e) {
            return _.isEqual(this.getSegIDs(), e.getSegIDs())
        },
        _areOpposites: function(e, t) {
            return e === n.A_TO_B && t === n.B_TO_A || e === n.B_TO_A && t === n.A_TO_B
        },
        getSegIDs: function() {
            return _(this.get("segments")).invoke("getID")
        },
        findSegmentByID: function(e) {
            var t, i, n, s;
            for (n = this.get("segments"),
            t = 0,
            i = n.length; t < i; t++)
                if (s = n[t],
                s.getID() === e)
                    return s;
            return null
        },
        mergeWithOpposite: function(e) {
            var t;
            return this.set({
                direction: n.TWO_WAY
            }),
            this._originalAttribs.direction = n.TWO_WAY,
            t = this.get("closures").concat(e.get("closures")),
            this.set({
                closures: t
            })
        },
        isReverse: function(e) {
            return this.get("reverseSegments")[e] === !0
        },
        saveSimpleFieldsToClosure: function(e) {
            var t, i, n, r;
            for (r = [],
            i = 0,
            n = s.length; i < n; i++)
                t = s[i],
                r.push(e[t] = this.get(t));
            return r
        },
        validate: function() {
            return this.errors = {},
            this._validateField("startDate", {
                required: !1,
                date: !0,
                futureDate: !1
            }),
            this._validateField("endDate", {
                required: !0,
                date: !0,
                futureDate: !0
            }),
            this._validateDateRange(),
            _.isEmpty(this.errors)
        },
        _validateField: function(e, t) {
            var i, n;
            if (null == t && (t = {}),
            t.required && !this.isPresent(e))
                return void (this.errors[e] = "required");
            if (this.isPresent(e)) {
                if (n = this.get(e),
                null != t.pattern && !t.pattern.test(n))
                    return void (this.errors[e] = "invalid");
                if (t.date && !this._isValidDate(n))
                    return void (this.errors[e] = "invalid-date");
                if (t.futureDate && (i = Date.parse(n),
                i.isBefore(1..days().ago())))
                    return this.errors[e] = "in-past"
            }
        },
        _isValidDate: function(e) {
            return i.test(e) && null != Date.parse(e)
        },
        _validateDateRange: function() {
            var e, t, i;
            if (i = null == this.errors.startDate && null == this.errors.endDate,
            i && (t = Date.parse(this.get("startDate")),
            e = Date.parse(this.get("endDate")),
            !e.isAfter(t)))
                return this.errors.endDate = "before-start-date"
        },
        calculateForwardValuesForSegment: function(e) {
            var t, i;
            return t = this.get("direction"),
            i = this.isReverse(e),
            t === n.TWO_WAY ? [!0, !1] : t === n.A_TO_B ? [!i] : [i]
        },
        isEndDateSet: function() {
            return null !== this.get("endDate")
        },
        isStartDateSet: function() {
            return null !== this.get("startDate")
        },
        getStartDate: function() {
            return Date.parse(this.get("startDate"))
        },
        getEndDate: function() {
            return Date.parse(this.get("endDate"))
        }
    }),
    _.extend(r.prototype, W.brara.Backbone.ModelHelpers),
    _.extend(r, {
        DIRECTION: n
    }),
    e.exports = r
}
, function(e, t, i) {
    e.exports = !i(65)(function() {
        return 7 != Object.defineProperty({}, "a", {
            get: function() {
                return 7
            }
        }).a
    })
}
, function(e, t, i) {
    var n = i(19)
      , s = i(14)
      , r = i(64)
      , o = i(35)
      , a = "prototype"
      , l = function(e, t, i) {
        var u, c, d, h = e & l.F, p = e & l.G, g = e & l.S, m = e & l.P, f = e & l.B, v = e & l.W, y = p ? s : s[t] || (s[t] = {}), b = y[a], _ = p ? n : g ? n[t] : (n[t] || {})[a];
        p && (i = t);
        for (u in i)
            c = !h && _ && void 0 !== _[u],
            c && u in y || (d = c ? _[u] : i[u],
            y[u] = p && "function" != typeof _[u] ? i[u] : f && c ? r(d, n) : v && _[u] == d ? function(e) {
                var t = function(t, i, n) {
                    if (this instanceof e) {
                        switch (arguments.length) {
                        case 0:
                            return new e;
                        case 1:
                            return new e(t);
                        case 2:
                            return new e(t,i)
                        }
                        return new e(t,i,n)
                    }
                    return e.apply(this, arguments)
                };
                return t[a] = e[a],
                t
            }(d) : m && "function" == typeof d ? r(Function.call, d) : d,
            m && ((y.virtual || (y.virtual = {}))[u] = d,
            e & l.R && b && !b[u] && o(b, u, d)))
    };
    l.F = 1,
    l.G = 2,
    l.S = 4,
    l.P = 8,
    l.B = 16,
    l.W = 32,
    l.U = 64,
    l.R = 128,
    e.exports = l
}
, function(e, t, i) {
    var n = i(45)
      , s = i(174);
    e.exports = i(33) ? function(e, t, i) {
        return n.f(e, t, s(1, i))
    }
    : function(e, t, i) {
        return e[t] = i,
        e
    }
}
, function(e, t) {
    e.exports = {}
}
, , function(e, t, i) {
    var n, s = i(5), r = i(4);
    n = OL.Class(s, {
        object: null ,
        repository: null ,
        attributes: null ,
        initialize: function(e, t, i, n) {
            s.prototype.initialize.apply(this, [n]),
            null === e ? (this.object = new r(i),
            this.attributes = i) : (this.object = e,
            this.attributes = _.extend({}, this.object.getAttributes())),
            this.object.writableAttributes && (this.attributes = _.pick(this.attributes, this.object.writableAttributes)),
            this.repository = t
        },
        destroy: function() {
            null !== this.object && null === this.repository.get(this.object.getID()) && this.object.destroy(),
            s.prototype.destroy.apply(this)
        },
        doAction: function() {
            return this.object.setID(this.repository.generateUniqueID()),
            this.object.version = 1,
            this.object.state = OL.State.INSERT,
            this.repository.put(this.object),
            !0
        },
        undoAction: function() {
            this.repository.remove(this.object)
        },
        redoAction: function() {
            this.repository.put(this.object)
        },
        serialize: function() {
            var e, t = _.extend({}, this.attributes);
            return t.id = this.object.getID(),
            e = {
                _objectType: this.object.type,
                action: s.TYPE.ADD,
                attributes: t
            }
        },
        CLASS_NAME: "Waze.Action.CreateObject"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(1064), r = i(10), o = i(6);
    n = Marionette.Object.extend({
        KEEP_CHANGED: function(e, t) {
            return e
        },
        REPLACE_CHANGED: function(e, t) {
            return t
        },
        DEFAULT_PROJECTION: new OpenLayers.Projection("EPSG:4326"),
        GENERATED_ID_BASE: -100,
        GENERATED_ID_STEP: -1,
        objectType: null ,
        objects: null ,
        persistentObjects: null ,
        idGenerator: null ,
        projection: null ,
        active: null ,
        name: null ,
        currentDataBounds: null ,
        minZoom: 0,
        onDemand: !0,
        additionalInfo: null ,
        useVersions: !0,
        filterName: null ,
        FILTERS: null ,
        maskToFilter: null ,
        filterCount: 0,
        storePersistentSeparately: !1,
        initialize: function(e, t) {
            OpenLayers.Util.extend(this, t),
            this.objects = {},
            this.persistentObjects = {},
            this.objectType = e,
            this.idGenerator = new s(this.GENERATED_ID_BASE,this.GENERATED_ID_STEP),
            null === this.projection && (this.projection = this.DEFAULT_PROJECTION),
            this.active = !o.defined(t.active) || t.active,
            this._generateMaskToFilterMap(),
            this.model.repositoryFilters.has(this.objectType) && this.model.repositoryFilters.on("change:" + this.objectType, this._onFilterChanged, this)
        },
        _generateMaskToFilterMap: function() {
            if (null !== this.FILTERS) {
                var e = this;
                this.maskToFilter = {},
                _.each(this.FILTERS, function(t, i) {
                    if (!o.isPowerOfTwo(t.mask))
                        throw new Error("Invalid mask value " + t.mask + " for filter " + i + ". Mask values should be a power of two.");
                    if (!_.isUndefined(e.maskToFilter[t.mask]))
                        throw new Error("Duplicate mask value " + t.mask + " for filter " + i);
                    e.maskToFilter[t.mask] = t,
                    e.filterCount++
                })
            }
        },
        _onFilterChanged: function(e, t) {
            for (var i = e.previous(this.objectType), n = !1, s = 1, r = 0; r < this.filterCount; r++) {
                var o = t % 2 === 1
                  , a = i % 2 === 1;
                !a && o ? n = !0 : a && !o && this._removeFilteredObjects(this.maskToFilter[s]),
                i >>= 1,
                t >>= 1,
                s <<= 1
            }
            n && this.clear({
                keepUnsaved: !0
            })
        },
        _removeFilteredObjects: function(e) {
            var t = [];
            _.each(this.objects, function(i) {
                i.isUnchanged() && e.callback(i) && t.push(i)
            }),
            this.remove(t)
        },
        toggleFilterBit: function(e) {
            this.model.repositoryFilters.set(this.objectType, this.getFilter() ^ e.mask)
        },
        isFilterBitSet: function(e) {
            return 0 !== (e.mask & this.getFilter())
        },
        getFilter: function() {
            return this.model.repositoryFilters.get(this.objectType)
        },
        setActive: function(e) {
            this.active = e,
            this.trigger("change:active", {
                active: e
            })
        },
        updateDataExtent: function(e, t, i) {
            var n = {};
            if (i < this.minZoom)
                return this.clear({
                    keepUnsaved: !0,
                    keepSelected: !0
                }),
                null ;
            if (!this.filtered && (!this.onDemand || this.currentDataBounds && this.currentDataBounds.containsBounds(e)))
                return null ;
            if (this.filterName) {
                var s = 0;
                return this.model.repositoryFilters.has(this.objectType) && (s = this.getFilter()),
                n[this.filterName] = s,
                n
            }
            return n[this.objectType + "s"] = !0,
            n
        },
        get: function(e) {
            return this.objects[e] || this.persistentObjects[e]
        },
        getByAttributes: function(e) {
            return _.where(this.objects, e)
        },
        put: function(e) {
            e instanceof Array || (e = [e]);
            for (var t = [], i = [], n = 0, s = e.length; n < s; n++) {
                var o, a = e[n], l = a.getID();
                o = this.storePersistentSeparately && a.isPersistent() ? this.persistentObjects : this.objects,
                a.type = this.objectType,
                a.model = this.model,
                o[l] ? t.push(a) : i.push(a),
                o[l] = a
            }
            t.length > 0 && this.trigger(r.CHANGED, t),
            i.length > 0 && this.trigger(r.ADDED, i),
            (i.length > 0 || t.length > 0) && this.trigger(r.UPDATED)
        },
        changed: function(e) {
            e instanceof Array || (e = [e]),
            this.trigger(r.CHANGED, e),
            this.trigger(r.UPDATED)
        },
        synced: function(e) {
            e instanceof Array || (e = [e]),
            this.trigger(r.SYNCED, e)
        },
        remove: function(e) {
            e instanceof Array || (e = [e]);
            for (var t = [], i = 0, n = e.length; i < n; i++) {
                var s = e[i];
                this.objects[s.getID()] && (delete this.objects[s.getID()],
                t.push(s))
            }
            t.length > 0 && (this.trigger(r.REMOVED, t),
            this.trigger(r.UPDATED))
        },
        updateID: function(e, t) {
            delete this.objects[t],
            this.objects[e.getID()] = e,
            e.type = this.objectType,
            this.changed(e)
        },
        generateUniqueID: function() {
            return this.idGenerator.next()
        },
        getObjectArray: function(e) {
            return _.isUndefined(e) ? Object.values(this.objects) : _.filter(this.objects, e)
        },
        clear: function(e) {
            this.currentDataBounds = null ;
            var t = [];
            e = _.extend({
                keepPersistent: !0
            }, e),
            Object.forEach(this.objects, function(i, n) {
                var s = n.isInUse(e);
                s ? n.state !== OpenLayers.State.INSERT && (n.outOfScope = !0) : (t.push(n),
                delete this.objects[i])
            }, this),
            e && e.silent || t.length > 0 && (this.trigger(r.REMOVED, t),
            this.trigger(r.UPDATED))
        },
        setFilterBit: function(e, t) {
            t ? this.filter |= e : this.filter &= ~e
        },
        mergeObjects: function(e, t, i, n) {
            this.currentDataBounds = i.clone(),
            t || (t = this.KEEP_CHANGED),
            this.filtered = !!e && !!e.filtered,
            e = e ? e.objects : [],
            e || (e = []);
            for (var s = [], o = [], a = 0, l = e.length; a < l; ++a) {
                var u = e[a].getID();
                if (this.objects[u])
                    if (!this.useVersions || e[a].getVersion() > this.objects[u].getVersion())
                        if (this.objects[u].state) {
                            var c = t(this.objects[u], e[a]);
                            c && c !== this.objects[u] && (o.push(this.objects[u]),
                            this.objects[u] = e[a],
                            s.push(e[a]),
                            e[a].type = this.objectType,
                            e[a].model = this.model)
                        } else
                            o.push(this.objects[u]),
                            this.objects[u] = e[a],
                            s.push(e[a]),
                            e[a].type = this.objectType,
                            e[a].model = this.model;
                    else
                        delete this.objects[u].outOfScope;
                else
                    this.objects[u] = e[a],
                    s.push(e[a]),
                    e[a].type = this.objectType,
                    e[a].model = this.model
            }
            delete e.objects,
            this.additionalInfo = e,
            o.length > 0 && this.trigger(r.REMOVED, o),
            s.length > 0 && this.trigger(r.ADDED, s),
            (o.length > 0 || s.length > 0) && this.trigger(r.UPDATED)
        },
        getModifiedObjects: function() {
            var e = {};
            e[OpenLayers.State.INSERT] = [],
            e[OpenLayers.State.UPDATE] = [],
            e[OpenLayers.State.DELETE] = [];
            for (var t in this.objects)
                this.objects[t].state && e[this.objects[t].state].push(this.objects[t]);
            return e
        },
        hasModifiedObjects: function() {
            for (var e in this.objects)
                if (this.objects[e].state)
                    return !0;
            return !1
        },
        getByIds: function(e) {
            var t, i = [];
            return e.forEach(function(e) {
                t = this.get(e),
                t && i.push(t)
            }, this),
            i
        },
        CLASS_NAME: "Waze.Model.ObjectRepository"
    }),
    e.exports = n
}
, function(e, t, i) {
    "use strict";
    var n, s = i(16), r = i(4), o = i(132), a = i(42), l = i(86), u = i(128), c = i(550), d = i(549), h = i(57), p = i(8);
    n = OpenLayers.Class(s, {
        defaults: function() {
            return {
                name: "",
                description: "",
                rank: 0,
                lockRank: 0,
                url: null ,
                phone: null ,
                brand: null ,
                residential: !1,
                openingHours: [],
                categories: [],
                categoryAttributes: {},
                services: [],
                entryExitPoints: [],
                images: [],
                venueUpdateRequests: [],
                aliases: [],
                approved: !0,
                externalProviderIDs: [],
                adLocked: !1,
                permissions: r.ALL_PERMISSIONS
            }
        },
        nested: {
            geometry: OL.Geometry,
            images: a,
            entryExitPoints: d,
            externalProviderIDs: u
        },
        SERVICE_TYPES: {
            GENERAL: ["VALLET_SERVICE", "DRIVETHROUGH", "WI_FI", "RESTROOMS", "CREDIT_CARDS", "RESERVATIONS", "OUTSIDE_SEATING", "AIR_CONDITIONING", "PARKING_FOR_CUSTOMERS", "DELIVERIES", "TAKE_AWAY", "WHEELCHAIR_ACCESSIBLE"],
            PARKING_LOT: ["RESERVATIONS", "DISABILITY_PARKING", "CARPOOL_PARKING", "EV_CHARGING_STATION", "VALLET_SERVICE", "CAR_WASH", "SECURITY", "AIRPORT_SHUTTLE"]
        },
        PERMISSIONS: {
            EDIT_GEOMETRY: 1,
            EDIT_PROPERTIES: 2,
            DELETE: 4,
            EDIT_UPDATE_REQUESTS: 8,
            EDIT_EXTERNAL_PROVIDERS: 16
        },
        DEFAULT_POLYGON_SIZE_METERS: 20,
        initialize: function(e) {
            s.prototype.initialize.apply(this, arguments),
            this._originalResidential = this.attributes.residential
        },
        parse: function(e) {
            s.prototype.parse.apply(this, arguments),
            this.parseUpdateRequests(e)
        },
        merge: function(e) {
            _.defaults(e, this.defaults()),
            s.prototype.merge.apply(this, arguments),
            this._originalResidential = this.attributes.residential
        },
        parseUpdateRequests: function(e) {
            if (e.venueUpdateRequests) {
                var t = r.prototype.arePropertiesEditable.apply(this)
                  , i = W.loginManager.canEditPlaceUpdates()
                  , n = new c({
                    isInEditArea: t,
                    isAdLockedEditable: W.loginManager.canEditAdLockedPlaceUpdates(),
                    isEditable: this.areUpdateRequestsEditable() && i
                });
                e.venueUpdateRequests = e.venueUpdateRequests.map(function(e) {
                    return e.place = this,
                    n.build(e)
                }, this)
            }
        },
        getCategorySet: function() {
            return this.attributes.categories.toSet()
        },
        getMainCategory: function() {
            return this._categoryToParentMap || (this._categoryToParentMap = this._generateCategoryToParentMap()),
            0 === this.attributes.categories.length ? null : this._categoryToParentMap[this.attributes.categories.first()]
        },
        _generateCategoryToParentMap: function() {
            var e = {};
            return Object.forEach(W.Config.venues.subcategories, function(t, i) {
                e[t] = t,
                i.forEach(function(i) {
                    e[i] = t
                })
            }),
            e
        },
        getServiceSet: function() {
            return this.attributes.services.toSet()
        },
        getAddress: function() {
            return h.fromStreetID(this.attributes.streetID, this.model, {
                houseNumber: this.attributes.houseNumber
            })
        },
        is2D: function() {
            return this.geometry.components && this.geometry.components.every(function(e) {
                return e.components.length > 3
            })
        },
        isPoint: function() {
            return "OpenLayers.Geometry.Point" === this.geometry.CLASS_NAME
        },
        isGasStation: function() {
            return !!this.getCategorySet().GAS_STATION
        },
        getPolygonGeometry: function() {
            return this.isPoint() ? p.pointToSquarePolygon(this.geometry, this.DEFAULT_POLYGON_SIZE_METERS) : this.geometry.clone();
        },
        getPointGeometry: function() {
            return this.isPoint() ? this.geometry.clone() : p.polygonToPoint(this.geometry)
        },
        getLockRank: function() {
            return Math.max(this.attributes.rank, this.attributes.lockRank)
        },
        getNavigationPoint: function() {
            return this.attributes.entryExitPoints.length > 0 ? this.attributes.entryExitPoints[0] : new d({
                point: this.geometry.getCentroid(!0),
                entry: !0,
                exit: !0
            })
        },
        isApproved: function() {
            return this.attributes.approved
        },
        getOpeningHours: function() {
            return new o.Collection(this.attributes.openingHours.map(function(e) {
                return new o.OpeningHour(e)
            }))
        },
        hasUpdateRequests: function() {
            return this.attributes.venueUpdateRequests.length > 0
        },
        getImagesByUserId: function(e) {
            return _.filter(this.attributes.images, function(t) {
                return t.get("creatorUserId") === e
            })
        },
        getImageById: function(e) {
            return _.find(this.attributes.images, function(t) {
                return t.id === e
            })
        },
        arePropertiesEditable: function() {
            return r.prototype.arePropertiesEditable.apply(this, arguments) && this.attributes.approved
        },
        areUpdateRequestsEditable: function() {
            return this.isAllowed(this.PERMISSIONS.EDIT_UPDATE_REQUESTS)
        },
        areExternalProvidersEditable: function() {
            return this.isAllowed(this.PERMISSIONS.EDIT_EXTERNAL_PROVIDERS)
        },
        hasOpenUpdateRequests: function() {
            return this.attributes.venueUpdateRequests.some(function(e) {
                return null === e.get("approved")
            })
        },
        canConvertToPublic: function() {
            return this._originalResidential === !1
        },
        isParkingLot: function() {
            return this.attributes.categories[0] === l.PARKING_LOT
        },
        isResidential: function() {
            return this.attributes.residential
        },
        CLASS_NAME: "Waze.Feature.Vector.Landmark"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    n = i(10),
    s = OL.Class(OL.Layer.Vector, {
        repo: null ,
        _featureMap: null ,
        model: null ,
        initialize: function(e, t, i, n) {
            var s, r, o, a;
            for (this.model = t,
            this.repo = i,
            OL.Layer.Vector.prototype.initialize.apply(this, [e, n]),
            this._featureMap = {},
            _(this.repo).isArray() || (this.repo = [this.repo]),
            a = this.repo,
            s = 0,
            r = a.length; s < r; s++)
                o = a[s],
                this.registerRepoEvents(o)
        },
        registerRepoEvents: function(e) {
            return e.on(n.ADDED, this.onFeaturesAdded, this),
            e.on(n.CHANGED, this.onFeaturesChanged, this),
            e.on(n.REMOVED, this.onFeaturesRemoved, this)
        },
        unregisterRepoEvents: function(e) {
            return e.off(n.ADDED, this.onFeaturesAdded, this),
            e.off(n.CHANGED, this.onFeaturesChanged, this),
            e.off(n.REMOVED, this.onFeaturesRemoved, this)
        },
        destroy: function() {
            var e, t, i, n;
            for (n = this.repo,
            e = 0,
            t = n.length; e < t; e++)
                i = n[e],
                this.unregisterRepoEvents(i);
            return OL.Layer.Vector.prototype.destroy.apply(this)
        },
        getVector: function(e) {
            return this._featureMap[e.getID()] || null
        },
        onFeaturesAdded: function(e) {
            return e = e.map(function(e) {
                return function(t) {
                    var i;
                    return i = new OL.Feature.Vector(t.geometry),
                    i.model = t,
                    e._featureMap[t.getID()] = i,
                    e.fixRenderIntent(i),
                    i
                }
            }(this)),
            this.addFeatures(e)
        },
        _getFeatureByPrevId: function(e) {
            var t, i;
            return (i = e._prevID) ? (t = this._featureMap[i],
            t ? (this._featureMap[i] = void 0,
            this._featureMap[e.getID()] = t,
            t) : null ) : null
        },
        onFeaturesChanged: function(e) {
            var t, i, n, s, r, o, a, l;
            for (a = [],
            l = [],
            o = [],
            i = 0,
            n = e.length; i < n; i++)
                s = e[i],
                t = this._featureMap[s.getID()] || this._getFeatureByPrevId(s),
                t ? (this.fixRenderIntent(t),
                this._updateFeatureModel(t, s),
                s.hidden ? (this._featureMap[s.getID()] = void 0,
                a.push(t)) : (t.geometry = s.geometry,
                this.drawFeature(t)),
                (s.isDeleted() || s.hidden) && this.selectedFeatures.contains(t) && (OL.Util.removeItem(this.selectedFeatures, t),
                l.push(t))) : (r = new OL.Feature.Vector(s.geometry),
                r.model = s,
                o.push(r),
                this._featureMap[s.getID()] = r);
            return this.events.triggerEvent("featureunselected", {
                features: l
            }),
            this.removeFeatures(a),
            this.addFeatures(o)
        },
        onFeaturesRemoved: function(e) {
            var t, i;
            return i = e.map(function(e) {
                return function(t) {
                    var i;
                    return i = e._featureMap[t.getID()],
                    e._featureMap[t.getID()] = void 0,
                    i
                }
            }(this)),
            i = _(i).filter(function(e) {
                return null != e
            }),
            t = _(i).filter(function(e) {
                return function(t) {
                    return e.selectedFeatures.contains(t)
                }
            }(this)),
            this.events.triggerEvent("featureunselected", {
                features: t
            }),
            this.removeFeatures(i)
        },
        fixRenderIntent: function(e) {
            var t;
            return e.model.isDeleted() ? e.renderIntent = "delete" : "delete" === e.renderIntent ? e.renderIntent = null != (t = e.model.isSelected()) ? t : {
                select: "default"
            } : void 0
        },
        _updateFeatureModel: function(e, t) {
            return null != t.geometry && null != e.model.geometry && (t.geometry.id = e.model.geometry.id),
            e.model = t
        },
        CLASS_NAME: "Waze.Layer.FeatureLayer"
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        getUrl: function(e) {
            return this.getUrlById(e, this.id)
        },
        getUrlById: function(e, t) {
            return e === i.SIZE.ORIGINAL ? W.Config.venues.image_bucket_url + t : W.Config.venues.image_bucket_url + "thumbs/thumb" + e + "_" + t
        }
    }),
    i.SIZE = {
        ORIGINAL: 0,
        SMALL: 32,
        WEB: 100,
        MOBILE: 347,
        BIG: 700
    },
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    a = i(148),
    o = i(120),
    l = i(7),
    s = i(641),
    r = i(629),
    n = Backbone.Model.extend({
        MORE_INFO_DEFAULTS: [{
            name: "averageSession",
            visible: !0
        }, {
            name: "allSessions",
            visible: !1
        }],
        _moreInfoTypes: null ,
        _moreInfoTypeMap: null ,
        constructor: function(e) {
            return this.problem = e,
            Backbone.Model.apply(this)
        },
        setState: function(e) {
            var t;
            return t = {},
            t.open = e === a.OPEN,
            t.resolution = function() {
                switch (e) {
                case a.SOLVED:
                    return o.FIXED;
                case a.NOT_IDENTIFIED:
                    return o.NOT_A_PROBLEM;
                case a.OPEN:
                    return null
                }
            }(),
            this.problem.model.actionManager.add(new l(this.problem,t))
        },
        getState: function() {
            if (this.problem.attributes.open)
                return a.OPEN;
            switch (this.problem.attributes.resolution) {
            case o.FIXED:
                return a.SOLVED;
            case o.NOT_A_PROBLEM:
                return a.NOT_IDENTIFIED
            }
        },
        getTitle: function() {
            return I18n.t("problems.types." + this.problem.attributes.subType + ".title")
        },
        getReportedString: function() {
            return I18n.t("problems.panel.auto_detected")
        },
        hasDescription: function() {
            return !0
        },
        getDescription: function() {
            return I18n.t("problems.types." + this.problem.attributes.subType + ".description")
        },
        getDescriptionTemplate: function() {
            return null
        },
        isConversationAvailable: function() {
            return !1
        },
        getMoreInfoTypes: function() {
            return null !== this._moreInfoTypes ? this._moreInfoTypes : (this._moreInfoTypeMap = {},
            this._moreInfoTypes = this.MORE_INFO_DEFAULTS.map(function(e) {
                return function(t) {
                    var i;
                    return i = new r({
                        name: t.name,
                        visible: t.visible
                    }),
                    e._moreInfoTypeMap[t.name] = i,
                    i
                }
            }(this)),
            this._moreInfoTypes)
        },
        getMoreInfo: function() {
            return null != this.moreInfo ? this.moreInfo : this.moreInfo = this.problem.getSessions().done(function(e) {
                return function(t) {
                    var i, n;
                    return t = t[0],
                    e._moreInfoTypeMap.averageSession.set({
                        available: null != (null != (i = t.average) ? i.geometry : void 0)
                    }),
                    e._moreInfoTypeMap.allSessions.set({
                        available: (null != (n = t.sessions) ? n.length : void 0) > 0
                    })
                }
            }(this))
        },
        isMoreInfoAvailable: function() {
            return _.some(this.getMoreInfoTypes(), function(e) {
                return e.get("available")
            })
        },
        getSeverity: function() {
            return this.problem.attributes.severity
        },
        getRepository: function() {
            return this.problem.model.problems
        },
        createMoreInfoRenderer: function(e, t, i) {
            return new s(e,t,i)
        },
        getMarkerLayer: function() {
            return W.map.problemLayer
        },
        isEditable: function() {
            return this.problem.canEdit()
        },
        getBounds: function() {
            return this.problem.getDisconnectBounds()
        },
        getGeometry: function() {
            return this.problem.geometry.clone()
        },
        getOpenStateString: function() {
            return I18n.t("problems.panel.states.open")
        },
        getSolvedStateString: function() {
            return I18n.t("problems.panel.states.solved")
        },
        getNotIdentifiedStateString: function() {
            return I18n.t("problems.panel.states.not_identified")
        },
        getNextButtonString: function() {
            return this._nextButtonString || I18n.t("problems.panel.next")
        },
        setNextButtonString: function(e) {
            return this._nextButtonString = e
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i, n, s, r, o, a, l, u, c, d = {}.hasOwnProperty;
    l = {},
    o = {},
    n = {},
    a = {
        KILOMETER: "km",
        MILE: "mi",
        METER: "m",
        FEET: "ft"
    },
    r = {},
    r[a.KILOMETER] = a.MILE,
    r[a.METER] = a.FEET,
    i = {};
    for (c in r)
        d.call(r, c) && (u = r[c],
        i[u] = c,
        o[c] = !0,
        n[u] = !0);
    s = OpenLayers.INCHES_PER_UNIT,
    l = {
        convert: function(e, t, i) {
            return e * s[t] / s[i]
        },
        localizeUnit: function(e) {
            return o[e] && W.model.isImperial ? e = r[e] : n[e] && !W.model.isImperial && (e = i[e]),
            e
        },
        getLocalizedValue: function(e, t) {
            var i;
            return i = this.localizeUnit(t),
            this.convert(e, t, i)
        },
        getLocalizedDisplayValue: function(e, t, i) {
            var n;
            return n = this.convert(e, t, i),
            this.getLocalizedValue(n, i)
        },
        getOriginalValue: function(e, t) {
            var i;
            return i = this.localizeUnit(t),
            this.convert(e, i, t)
        }
    },
    l.UNIT = a,
    e.exports = l
}
, function(e, t, i) {
    var n = i(26)
      , s = i(730)
      , r = i(752)
      , o = Object.defineProperty;
    t.f = i(33) ? Object.defineProperty : function(e, t, i) {
        if (n(e),
        t = r(t, !0),
        n(i),
        s)
            try {
                return o(e, t, i)
            } catch (e) {}
        if ("get"in i || "set"in i)
            throw TypeError("Accessors not supported!");
        return "value"in i && (e[t] = i.value),
        e
    }
}
, , function(e, t, i) {
    var n, s = i(5), r = i(294), o = i(3), a = i(109), l = i(2);
    n = OpenLayers.Class(r, {
        segment: null ,
        segmentAttributes: null ,
        initialSegmentGeometry: null ,
        createNodes: !1,
        createTwoWay: !1,
        openAllTurns: !1,
        initialize: function(e, t) {
            r.prototype.initialize.apply(this, [e, t]),
            this.segment = e,
            this.segmentAttributes = {},
            this.createTwoWay && (this.segment.attributes.revDirection = !0,
            this.segment.attributes.fwdDirection = !0)
        },
        destroy: function() {
            this.segment = null ,
            this.segmentAttributes = null ,
            this.newID = null ,
            this.options = null ,
            null !== this.initialSegmentGeometry && (this.initialSegmentGeometry.destroy(),
            this.initialSegmentGeometry = null ),
            r.prototype.destroy.apply(this)
        },
        doAction: function() {
            if (this.segment.isSingular())
                return !1;
            this.segment.geometry.bounds || this.segment.geometry.calculateBounds(),
            this.segment.bounds || (this.segment.bounds = this.segment.geometry.bounds),
            this.segment.state = OpenLayers.State.INSERT,
            this.segment.getID() || this.segment.setID(this.model.segments.generateUniqueID()),
            this.segment.attributes.streetIDs || (this.segment.attributes.streetIDs = []),
            this.initialSegmentGeometry = this.segment.geometry.clone(),
            this.model.segments.put(this.segment);
            var e = (this.segment.geometry.getVertices(!0),
            this.segment.attributes.geometry);
            this.segment.attributes.geometry = null ,
            $.extend(!0, this.segmentAttributes, this.segment.attributes),
            this.segment.attributes.geometry = e,
            this.updateEndPoint(null , this.touching.fromVertex, !0),
            this.updateEndPoint(null , this.touching.toVertex, !1),
            this.openAllTurns && ["from", "to"].forEach(function(e) {
                var t = this.segment.getNodeByDirection(e);
                this.doSubAction(new a(t,!0,{
                    forSegment: this.segment
                }))
            }, this)
        },
        undoAction: function() {
            r.prototype.undoAction.apply(this),
            this.model.segments.remove(this.segment)
        },
        redoAction: function() {
            this.model.segments.put(this.segment),
            r.prototype.redoAction.apply(this)
        },
        serialize: function() {
            var e = this.segmentAttributes;
            e.id = this.segment.getID(),
            e.geometry = this.initialSegmentGeometry;
            var t = {
                _objectType: l.SEGMENT,
                action: s.TYPE.ADD,
                attributes: e
            };
            return t
        },
        getBounds: function() {
            var e = o.prototype.getBounds.apply(this, arguments) || new OpenLayers.Bounds;
            return e.extend(this.initialSegmentGeometry.getBounds()),
            e
        },
        CLASS_NAME: "Waze.Action.AddSegment"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(5);
    n = OpenLayers.Class(s, {
        feature: null ,
        repo: null ,
        newGeometry: null ,
        oldGeometry: null ,
        changedState: !1,
        initialize: function(e, t, i, n, s) {
            this.feature = e,
            this.repo = t,
            this.newGeometry = n,
            this.oldGeometry = i
        },
        destroy: function() {
            this.feature = null ,
            this.repo = null ,
            this.newGeometry = null ,
            this.oldGeometry = null
        },
        doAction: function() {
            this.replaceGeometry(this.newGeometry.clone()),
            this.feature.state || (this.changedState = !0,
            this.feature.state = OpenLayers.State.UPDATE),
            this.repo.changed(this.feature)
        },
        replaceGeometry: function(e) {
            e !== this.feature.geometry && (e.id = this.feature.geometry.id,
            this.feature.geometry = e,
            this.feature.bounds = this.feature.geometry.bounds)
        },
        undoAction: function() {
            this.changedState && (this.feature.state = null ),
            this.replaceGeometry(this.oldGeometry.clone()),
            this.repo.changed(this.feature)
        },
        redoAction: function() {
            this.replaceGeometry(this.newGeometry.clone()),
            this.changedState && (this.feature.state = OpenLayers.State.UPDATE),
            this.repo.changed(this.feature)
        },
        serialize: function() {
            var e = {};
            e.id = this.feature.getID(),
            e.geometry = this.newGeometry;
            var t = {
                _objectType: this.feature.type,
                action: s.TYPE.UPDATE,
                attributes: e
            };
            return t
        },
        getBounds: function() {
            return this.newGeometry.getBounds().clone()
        },
        CLASS_NAME: "Waze.Action.UpdateFeatureGeometry"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(16);
    n = OpenLayers.Class(s, {
        TYPE: {
            DISCONNECTION: "DISCONNECTION",
            TURN: "TURN",
            DATA: "DATA",
            ROAD_CLOSURE: "ROAD_CLOSURE"
        },
        nested: {
            geometry: OL.Geometry,
            bounds: OL.Geometry
        },
        ONE_WEEK_IN_MILLIS: 6048e5,
        SeverityThreshold: {
            low: 3,
            medium: 7
        },
        disconnectBounds: null ,
        initialize: function(e) {
            s.prototype.initialize.apply(this, arguments),
            this.setSeverity(this.attributes.weight),
            this.editable = this.attributes.open
        },
        merge: function(e) {
            s.prototype.merge.apply(this, arguments),
            this.editable = this.attributes.open
        },
        getDisconnectBounds: function() {
            return this.disconnectBounds || (this.disconnectBounds = this.attributes.bounds.getBounds()),
            this.disconnectBounds
        },
        setSeverity: function(e) {
            var t = "high";
            this.attributes.priority < 0,
            e <= this.SeverityThreshold.low ? t = "low" : e <= this.SeverityThreshold.medium && (t = "medium"),
            this.attributes.severity = t
        },
        getSessions: function() {
            return this.model.problemDetails.get([this.getID()])
        },
        isRecentlyClosed: function() {
            return !this.attributes.open && Date.now() - this.attributes.resolvedOn <= this.ONE_WEEK_IN_MILLIS
        },
        getLocation: function() {
            return this.attributes.geometry
        },
        canEdit: function() {
            return this.isAllowed(this.PERMISSIONS.EDIT)
        },
        PERMISSIONS: {
            EDIT: 1,
            FORCE_CLOSE: 2
        },
        CLASS_NAME: "Waze.Feature.Vector.MapProblem"
    }),
    e.exports = n
}
, function(e, t) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.default = {
        UNKNOWN: "UNKNOWN",
        COST_TYPE: ["FREE", "LOW", "MODERATE", "EXPENSIVE"],
        PAYMENT_TYPE: ["CASH", "CHECKS", "CREDIT"],
        LOT_TYPE: ["STREET_LEVEL", "STREET_LEVEL_COVERED", "MULTI_LEVEL", "UNDERGROUND"],
        SPOTS_ESTIMATE: [{
            value: "R_1_TO_10",
            range: [1, 10]
        }, {
            value: "R_11_TO_30",
            range: [11, 30]
        }, {
            value: "R_31_TO_60",
            range: [31, 60]
        }, {
            value: "R_61_TO_100",
            range: [61, 100]
        }, {
            value: "R_101_TO_300",
            range: [101, 300]
        }, {
            value: "R_301_TO_600",
            range: [301, 600]
        }, {
            value: "R_600_PLUS",
            range: [601, 1 / 0]
        }]
    },
    e.exports = t.default
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = i(78)
      , r = n(s)
      , o = i(79)
      , a = n(o)
      , l = function() {
        function e() {
            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 0;
            (0,
            r.default)(this, e),
            this._value = t
        }
        return (0,
        a.default)(e, [{
            key: "add",
            value: function(e) {
                this._value |= e
            }
        }, {
            key: "remove",
            value: function(e) {
                this._value &= ~e
            }
        }, {
            key: "isEnabled",
            value: function(e) {
                var t = this._value & e;
                return 0 !== t
            }
        }, {
            key: "isDisabled",
            value: function(e) {
                var t = this._value & e;
                return 0 === t
            }
        }, {
            key: "value",
            get: function() {
                return this._value
            }
        }]),
        e
    }();
    t.default = l,
    e.exports = t.default
}
, function(e, t, i) {
    var n, s, r, o;
    n = i(3),
    o = i(7),
    s = i(291),
    r = OL.Class(n, {
        segment: null ,
        node: null ,
        deleteNode: !0,
        initialize: function(e, t, i) {
            this.segment = e,
            this.node = t,
            n.prototype.initialize.apply(this, [i])
        },
        doAction: function() {
            var e, t, i, n, r, a;
            return r = this.segment.getID(),
            n = this.node.getID(),
            e = this.segment.getTurnsLockAttribute(this.node),
            !!(i = this.segment.getNodeAttribute(this.node)) && (t = {},
            t[e] = !1,
            t[i + "NodeID"] = null ,
            t[i + "Connections"] = {},
            a = this.node.attributes.segIDs.clone(),
            OL.Util.removeItem(a, r),
            this.doSubAction(new o(this.segment,t)),
            this.doSubAction(new o(this.node,{
                segIDs: a
            })),
            this.node.isDisconnected() && this.deleteNode && this.doSubAction(new s(this.node)),
            !0)
        },
        CLASS_NAME: "Waze.Action.DisconnectSegment"
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o, a;
    s = i(3),
    a = i(7),
    o = i(2),
    n = i(5),
    r = OL.Class(s, {
        initialize: function(e, t, i, n, r) {
            return this.fromSegID = e,
            this.node = t,
            this.toSegID = i,
            this.navigable = n,
            s.prototype.initialize.apply(this, [r])
        },
        doAction: function() {
            var e, t, i;
            return this.fromSegment = this.model.segments.get(this.fromSegID),
            this.toSegment = this.model.segments.get(this.toSegID),
            this.fromSegFwd = this.fromSegment.attributes.toNodeID === this.node.getID(),
            this.toSegFwd = this.toSegment.attributes.fromNodeID === this.node.getID(),
            e = this.fromSegFwd ? "toConnections" : "fromConnections",
            t = OL.Util.extend({}, this.fromSegment.attributes[e]),
            t[this.toSegID] !== this.navigable && (t[this.toSegID] = this.navigable,
            i = {},
            i[e] = t,
            void this.doSubAction(new a(this.fromSegment,i,{
                dontSerialize: !0
            })))
        },
        serialize: function() {
            var e, t, i;
            return t = {
                fromSegID: this.fromSegID,
                toSegID: this.toSegID,
                fromSegFwd: this.fromSegFwd,
                toSegFwd: this.toSegFwd
            },
            e = this.navigable ? n.TYPE.ADD : n.TYPE.DELETE,
            e !== n.TYPE.DELETE && (t.nodeID = this.node.getID()),
            i = {
                _objectType: o.NC,
                action: e,
                attributes: t
            }
        },
        CLASS_NAME: "Waze.Action.ModifyConnection"
    }),
    e.exports = r
}
, function(e, t) {
    e.exports = {
        STATE_CHANGED: "STATE_CHANGED"
    }
}
, function(e, t) {
    var i;
    i = OL.Class({
        started: !1,
        stopDown: !0,
        dragging: !1,
        touch: !1,
        last: null ,
        start: null ,
        lastMoveEvt: null ,
        oldOnselectstart: null ,
        interval: 0,
        timeoutId: null ,
        forced: !1,
        active: !1,
        initialize: function(e) {
            this.map = e,
            this.uniqueID = i.baseID--
        },
        callback: function(e, t) {
            if (this[e])
                return this[e].apply(this, t)
        },
        dragstart: function(e) {
            var t;
            return e.xy = new OL.Pixel(e.clientX - this.map.viewPortDiv.offsets[0],e.clientY - this.map.viewPortDiv.offsets[1]),
            t = !0,
            this.dragging = !1,
            (OL.Event.isLeftClick(e) || OL.Event.isSingleTouch(e)) && (this.started = !0,
            this.start = e.xy,
            this.last = e.xy,
            OL.Element.addClass(this.map.viewPortDiv, "olDragDown"),
            this.down(e),
            this.callback("down", [e.xy]),
            OL.Event.stop(e),
            this.oldOnselectstart || (this.oldOnselectstart = document.onselectstart ? document.onselectstart : OL.Function.True),
            document.onselectstart = OL.Function.False,
            t = !this.stopDown),
            t
        },
        forceStart: function(e) {
            return null == e && (e = !1),
            this.started = !0,
            this.endOnMouseUp = e,
            this.forced = !0,
            this.last = {
                x: 0,
                y: 0
            },
            this.callback("force")
        },
        forceEnd: function() {
            if (this.forced)
                return this.endDrag()
        },
        dragmove: function(e) {
            return this.map.viewPortDiv.offsets && (e.xy = new OL.Pixel(e.clientX - this.map.viewPortDiv.offsets[0],e.clientY - this.map.viewPortDiv.offsets[1])),
            this.lastMoveEvt = e,
            !this.started || this.timeoutId || e.xy.x === this.last.x && e.xy.y === this.last.y || (this.interval > 0 && (this.timeoutId = setTimeout(OL.Function.bind(this.removeTimeout, this), this.interval)),
            this.dragging = !0,
            this.move(e),
            this.oldOnselectstart || (this.oldOnselectstart = document.onselectstart,
            document.onselectstart = OL.Function.False),
            this.last = e.xy),
            !0
        },
        dragend: function(e) {
            var t;
            return e.xy = new OL.Pixel(e.clientX - this.map.viewPortDiv.offsets[0],e.clientY - this.map.viewPortDiv.offsets[1]),
            this.started && (t = this.start !== this.last,
            this.endDrag(),
            this.up(e),
            this.callback("up", [e.xy]),
            t && this.callback("done", [e.xy])),
            !0
        },
        endDrag: function() {
            return this.started = !1,
            this.dragging = !1,
            this.forced = !1,
            OL.Element.removeClass(this.map.viewPortDiv, "olDragDown"),
            document.onselectstart = this.oldOnselectstart
        },
        down: function(e) {},
        move: function(e) {},
        up: function(e) {},
        out: function(e) {},
        mousedown: function(e) {
            return this.dragstart(e)
        },
        touchstart: function(e) {
            return this.touch || (this.touch = !0,
            this.map.events.un({
                mousedown: this.mousedown,
                mouseup: this.mouseup,
                mousemove: this.mousemove,
                click: this.click,
                scope: this
            })),
            this.dragstart(e)
        },
        mousemove: function(e) {
            return this.dragmove(e)
        },
        touchmove: function(e) {
            return this.dragmove(e)
        },
        removeTimeout: function() {
            if (this.timeoutId = null ,
            this.dragging)
                return this.mousemove(this.lastMoveEvt)
        },
        mouseup: function(e) {
            if (!this.forced || this.endOnMouseUp)
                return this.started ? this.dragend(e) : void 0
        },
        touchend: function(e) {
            if (e.xy = this.last,
            !this.forced)
                return this.dragend(e)
        },
        click: function(e) {
            return this.start === this.last
        },
        activate: function(e) {
            var t;
            return this.$el = e,
            this.active = !0,
            t = $(this.map.viewPortDiv),
            this.$el.on("mousedown.drag-" + this.uniqueID, $.proxy(this.mousedown, this)),
            this.$el.on("touchstart.drag-" + this.uniqueID, $.proxy(this.touchstart, this)),
            $(document).on("mouseup.drag-" + this.uniqueID, $.proxy(this.mouseup, this)),
            t.on("mousemove.drag-" + this.uniqueID, $.proxy(this.mousemove, this)),
            t.on("touchmove.drag-" + this.uniqueID, $.proxy(this.touchmove, this)),
            t.on("touchend.drag-" + this.uniqueID, $.proxy(this.touchend, this))
        },
        deactivate: function() {
            return this.active = !1,
            this.$el.off(".drag-" + this.uniqueID),
            $(this.map.viewPortDiv).off(".drag-" + this.uniqueID),
            $(document).off(".drag-" + this.uniqueID),
            this.touch = !1,
            this.started = !1,
            this.forced = !1,
            this.dragging = !1,
            this.start = null ,
            this.last = null ,
            OL.Element.removeClass(this.map.viewPortDiv, "olDragDown")
        },
        adjustXY: function(e) {
            var t;
            return t = OL.Util.pagePosition(this.map.viewPortDiv),
            e.xy.x -= t[0],
            e.xy.y -= t[1]
        },
        CLASS_NAME: "W.Handler.DragElement"
    }),
    i.baseID = 0,
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h, p, g, m, f, v, y, b, w, S, E, C, L, A, M, I, D, x, T, O, k;
    T = i(91),
    O = i(167),
    y = i(707),
    A = i(708),
    r = i(706),
    s = i(705),
    M = i(709),
    h = i(166),
    L = i(1062),
    v = i(1061),
    a = i(41),
    n = i(1059),
    x = i(1063),
    u = i(1060),
    g = i(122),
    I = i(540),
    S = i(538),
    C = i(539),
    m = i(533),
    b = i(2),
    l = i(8),
    w = i(534),
    o = i(23),
    D = i(92),
    f = i(17),
    c = f.LAYER_TYPE,
    E = {
        WMS: "wms",
        MAPNIK: "mapnik"
    },
    d = {
        ARCHIVE: "archive",
        AREA_MANAGERS: "area_managers",
        BIG_JUNCTIONS: "big_junctions",
        CLOSURES: "closures",
        EDITABLE_AREAS: "editable_areas",
        LANDMARKS: "landmarks",
        NODES: "nodes",
        PLACE_UPDATES: "place_updates",
        PROBLEMS: "problems",
        SATELLITE_IMAGERY: "satellite_imagery",
        SEGMENTS: "segments",
        SPEED_CAMERAS: "speed_cameras",
        UPDATE_REQUESTS: "update_requests",
        GPS_POINTS: "gps_points",
        ROADS: "roads",
        LIVE_USERS: "live_users"
    },
    p = {
        initializeLayers: function() {
            return this._addAerials(),
            this._addModulesLayers(c.RASTER),
            this._addRasterLayers(),
            this._addVectorLayers(),
            this._addModulesLayers(c.FEATURE),
            this._addModulesLayers(c.MARKER),
            this._setLayersAncestry(),
            this._setModuleLayersAncestry()
        },
        _addRasterLayers: function() {
            return this._addRasterLayer(W.Config.raster_layers[d.GPS_POINTS]),
            this._addRasterLayer(W.Config.raster_layers[d.ROADS]),
            this.roadLayers = [this.getLayerByUniqueName(d.ROADS)],
            W.model.events.register("change:lastTransactionID", this, this._refreshRoadLayers),
            this._setRoadLayerParams()
        },
        _addRasterLayer: function(e) {
            var t, i, n, s, r, o, a, l;
            return r = {},
            a = e.type || E.WMS,
            i = I18n.t("layers.name." + e.uniqueName),
            t = e.file_name || W.Config.raster_layers[a].file_name,
            o = W.Config.raster_layers[a].servers.map(function(e) {
                return e + "/" + t
            }),
            $.extend(r, W.Config.raster_layers.options, e.options),
            r.tileSize = new OL.Size(r.tileWidth,r.tileHeight),
            r.removeBackBufferDelay = 0,
            r.uniqueName = e.uniqueName,
            r.visibility = e.visible,
            n = {
                text: I18n.t("layers.loading", {
                    layer_name: i
                })
            },
            a === E.WMS ? (l = {},
            $.extend(l, W.Config.raster_layers.wms.params, e.params),
            l.layers = e.layers,
            s = new OL.Layer.WMS(i,o,l,r)) : (s = new w(i,o,r),
            $.extend(s.params, e.params)),
            s.type = a,
            s.events.on({
                loadstart: function(e) {
                    return function() {
                        return W.vent.trigger("operationPending", {
                            operation: e
                        })
                    }
                }(n),
                loadend: function(e) {
                    return function() {
                        return W.vent.trigger("operationDone", {
                            operation: e
                        })
                    }
                }(n)
            }),
            this.addUniqueLayer(s),
            s
        },
        _setRoadLayerParams: function() {
            var e, t, i, n, s, r, o, a;
            for (a = (null != (s = this.snapshotManager) ? s.isSnapshotOn() : void 0) ? -1 : 1,
            n = {
                timestamp: a,
                waitFor: W.model.lastTransactionID
            },
            r = this.roadLayers,
            o = [],
            e = 0,
            i = r.length; e < i; e++)
                t = r[e],
                t.type === E.MAPNIK ? o.push(t.params.addToQuery = $.param(n)) : o.push(_.extend(t.params, n));
            return o
        },
        _refreshRoadLayers: function(e) {
            var t, i, n, s, r;
            for (this._setRoadLayerParams(),
            s = this.roadLayers,
            r = [],
            t = 0,
            n = s.length; t < n; t++)
                i = s[t],
                i.redraw({
                    force: !0
                }),
                r.push(i.removeBackBuffer());
            return r
        },
        _addVectorLayers: function() {
            return this.segmentLayer = new L(I18n.t("layers.name.segments"),W.model,W.model.segments,{
                styleMap: A,
                displayInLayerSwitcher: !1,
                uniqueName: d.SEGMENTS,
                selectable: !0,
                featureType: b.SEGMENT
            }),
            this.nodeLayer = new v(I18n.t("layers.name.nodes"),W.model,W.model.nodes,{
                styleMap: y,
                displayInLayerSwitcher: !1,
                uniqueName: d.NODES,
                selectable: !0,
                featureType: b.NODE
            }),
            this.landmarkLayer = new a(I18n.t("layers.name.landmarks"),W.model,W.model.venues,{
                styleMap: O,
                displayInLayerSwitcher: !0,
                visibility: W.Config.venues.shownByDefault,
                uniqueName: d.LANDMARKS,
                rendererOptions: {
                    zIndexing: !0
                },
                selectable: !0,
                featureType: b.VENUE,
                toggleRepo: !0
            }),
            this.bigJunctionLayer = new a(I18n.t("layers.name.big_junctions"),W.model,W.model.bigJunctions,{
                styleMap: s,
                displayInLayerSwitcher: W.Config.big_junctions.enable,
                visibility: W.Config.big_junctions.shownByDefault && W.Config.big_junctions.enable,
                uniqueName: d.BIG_JUNCTIONS,
                rendererOptions: {
                    zIndexing: !0
                },
                selectable: !0,
                featureType: b.BIG_JUNCTION,
                toggleRepo: !0
            }),
            this.bigJunctionPathLayer = new OL.Layer.Vector("bigJunctionPathLayer",{
                displayInLayerSwitcher: !1,
                rendererOptions: {
                    zIndexing: !0
                },
                renderers: [o],
                styleMap: D,
                selectable: !0
            }),
            this.camerasLayer = new a(I18n.t("layers.name.speed_cameras"),W.model,W.model.cameras,{
                styleMap: r,
                displayInLayerSwitcher: !0,
                visibility: W.Config.cameras.shownByDefault,
                uniqueName: d.SPEED_CAMERAS,
                selectable: !0,
                featureType: b.SPEED_CAMERA,
                toggleRepo: !0
            }),
            this.problemLayer = new m(I18n.t("layers.name.problems"),[W.model.problems],{
                markerClass: g,
                uniqueName: d.PROBLEMS,
                className: "map-problems",
                toggleRepo: !0
            }),
            this.updateRequestLayer = new m(I18n.t("layers.name.update_requests"),[W.model.mapUpdateRequests],{
                markerClass: I,
                uniqueName: d.UPDATE_REQUESTS,
                className: "update-requests",
                visibility: W.Config.update_requests.shownByDefault,
                toggleRepo: !0
            }),
            this.archiveLayer = new n(I18n.t("layers.name.archive"),{
                displayInLayerSwitcher: !1,
                rendererOptions: {
                    zIndexing: !0
                },
                uniqueName: d.ARCHIVE
            }),
            this.userLayer = new x(I18n.t("layers.name.editable_areas"),W.model,[W.model.userAreas],{
                visibility: !1,
                displayInLayerSwitcher: !0,
                uniqueName: d.EDITABLE_AREAS
            }),
            this.managedAreasLayer = new a(I18n.t("layers.name.area_managers"),W.model,W.model.managedAreas,{
                styleMap: h,
                displayInLayerSwitcher: !0,
                visibility: !1,
                uniqueName: d.AREA_MANAGERS
            }),
            this.sketchLayer = new OpenLayers.Layer.Vector("sketch",{
                styleMap: M,
                displayInLayerSwitcher: !1,
                selectable: !0
            }),
            this.placeUpdatesLayer = new m(I18n.t("layers.name.place_updates"),[W.model.venues],{
                markerClass: S,
                uniqueName: d.PLACE_UPDATES,
                className: "place-updates",
                displayInLayerSwitcher: !0,
                visibility: W.Config.place_updates.shownByDefault,
                toggleFilter: "retrieveUpdateRequests",
                filter: function(e) {
                    return e.hasUpdateRequests()
                }
            }),
            this.addUniqueLayers([this.archiveLayer, this.managedAreasLayer, this.landmarkLayer, this.placeUpdatesLayer, this.bigJunctionLayer, this.segmentLayer, this.nodeLayer, this.camerasLayer, this.sketchLayer, this.problemLayer, this.updateRequestLayer, this.userLayer, this.bigJunctionPathLayer]),
            this.closuresMarkerLayer = new m(I18n.t("layers.name.closures"),[W.model.roadClosures],{
                markerClass: C,
                uniqueName: d.CLOSURES,
                visibility: W.Config.closures.shownByDefault,
                displayInLayerSwitcher: !0,
                toggleRepo: !0
            }),
            this.addUniqueLayer(this.closuresMarkerLayer)
        },
        _addModulesLayers: function(e) {
            var t, i, n, s, r;
            for (n = f.getLayers().filter(function(t) {
                return t.type === e
            }),
            r = [],
            t = 0,
            s = n.length; t < s; t++)
                if (i = n[t],
                i.type === c.RASTER)
                    r.push(this._addModuleRasterLayer(i));
                else if (i.type === c.FEATURE)
                    r.push(this._addModuleFeatureLayer(i));
                else {
                    if (i.type !== c.MARKER)
                        throw new Error("Invalid layer type " + i.type);
                    r.push(this._addModuleMarkerLayer(i))
                }
            return r
        },
        _addModuleRasterLayer: function(e) {
            return this._addRasterLayer(e.options)
        },
        _addModuleFeatureLayer: function(e) {
            var t, i, n, s;
            return i = e.options || {},
            s = [W.model.getRepository(i.objectType)],
            i.enableZIndexing && (n = {
                zIndexing: !0
            }),
            t = new a(i.name,W.model,s,{
                uniqueName: e.uniqueName,
                visibility: i.visibleByDefault,
                displayInLayerSwitcher: i.toggleable,
                styleMap: i.styleMap,
                selectable: i.selectable,
                featureType: i.objectType,
                toggleRepo: !0,
                rendererOptions: n
            }),
            this.addUniqueLayer(t)
        },
        _addModuleMarkerLayer: function(e) {
            var t, i, n;
            return i = e.options || {},
            n = [W.model.getRepository(i.objectType)],
            t = new m(i.name,n,{
                uniqueName: e.uniqueName,
                markerClass: i.markerClass,
                className: i.markerClassName,
                displayInLayerSwitcher: i.toggleable,
                visibility: i.visibleByDefault,
                featureType: i.objectType,
                filter: i.filter
            }),
            this.addUniqueLayer(t)
        },
        _setModuleLayersAncestry: function() {
            var e, t, i, n, s, r, o;
            for (r = f.getLayers(),
            o = [],
            t = 0,
            n = r.length; t < n; t++)
                i = r[t],
                i.parentLayerUniqueName ? (e = this.getLayerByUniqueName(i.uniqueName),
                s = this.getLayerByUniqueName(i.parentLayerUniqueName),
                e.parentLayer = s,
                o.push(s.childLayers = [e])) : o.push(void 0);
            return o
        },
        getLayerByUniqueName: function(e) {
            return this.getLayersBy("uniqueName", e)[0]
        },
        _addAerials: function() {
            var e, t, i, n;
            return i = W.Config.map.initialPosition[W.location.code],
            t = new OL.LonLat(i.lon,i.lat),
            l.project(t),
            e = new u({
                name: I18n.t("layers.name.satellite_imagery"),
                key: "AIzaSyCn64OU_OShrM5EgKeBiUKBkFn2yLW1gDw",
                type: "satellite",
                zoomOffset: 12,
                numZoomLevels: 11,
                zoom: i.initialZoom,
                minResolution: .037322767712175846,
                center: t,
                uniqueName: d.SATELLITE_IMAGERY,
                shortcutKey: "S+i",
                transitionEffect: "resize"
            }),
            this.addUniqueLayer(e),
            n = {
                text: I18n.t("layers.loading", {
                    layer_name: I18n.t("layers.name.satellite_imagery")
                })
            },
            e.events.on({
                loadstart: function() {
                    if (this.getVisibility())
                        return W.vent.trigger("operationPending", {
                            operation: n
                        })
                },
                loadend: function() {
                    return W.vent.trigger("operationDone", {
                        operation: n
                    })
                },
                loaderror: function() {
                    return W.vent.trigger("operationDone", {
                        operation: n
                    })
                }
            }),
            this.setCenter(t, i.initialZoom)
        },
        _setLayersAncestry: function() {
            return this.placeUpdatesLayer.parent = this.landmarkLayer,
            this.landmarkLayer.childLayers = [this.placeUpdatesLayer]
        },
        getLayersByRepos: function(e, t) {
            return (t || null == this.layersPerRepo) && (this.layersPerRepo = this.layers.reduce(function(e, t) {
                var i, n, s, r, o;
                if (t.displayInLayerSwitcher && null != t.repo)
                    for (r = t.repo,
                    i = 0,
                    n = r.length; i < n; i++)
                        o = r[i],
                        null == e[s = o.name] && (e[s] = []),
                        e[o.name].push(t);
                return e
            }, {})),
            _.pick(this.layersPerRepo, e)
        },
        showLayerByObjectType: function(e) {
            var t, i, n, s, r, o, a;
            for (o = W.model.getRepository(e),
            n = this.getLayersByRepos([o.name]),
            r = n[o.name],
            a = [],
            t = 0,
            s = r.length; t < s; t++)
                i = r[t],
                a.push(i.setVisibility(!0));
            return a
        },
        addUniqueLayer: function(e) {
            var t;
            if (e.uniqueName && (t = this.getLayersBy("uniqueName", e.uniqueName),
            t.length > 0))
                throw new Error("Cannot add layer " + e.uniqueName + ", the provided uniqueName already exists.");
            return this.addLayer(e)
        },
        addUniqueLayers: function(e) {
            var t, i, n, s;
            for (s = [],
            t = 0,
            n = e.length; t < n; t++)
                i = e[t],
                s.push(this.addUniqueLayer(i));
            return s
        }
    },
    p.layerVisibilityBitmask = (k = {},
    k["" + d.SATELLITE_IMAGERY] = 0,
    k["" + d.ROADS] = 2,
    k["" + d.GPS_POINTS] = 3,
    k["" + d.AREA_MANAGERS] = 4,
    k["" + d.LANDMARKS] = 5,
    k["" + d.SPEED_CAMERAS] = 6,
    k["" + d.PROBLEMS] = 7,
    k["" + d.UPDATE_REQUESTS] = 8,
    k["" + d.EDITABLE_AREAS] = 9,
    k["" + d.LIVE_USERS] = 10,
    k["" + d.PLACE_UPDATES] = 11,
    k["" + d.BIG_JUNCTIONS] = 12,
    k["" + d.CLOSURES] = 13,
    k),
    p.LAYER_UNIQUE_NAMES = d,
    e.exports = p
}
, function(e, t, i) {
    var n, s, r;
    r = i(547),
    n = r.extend({
        defaults: {
            street: null ,
            city: null ,
            state: null ,
            country: null ,
            houseNumber: null ,
            isEmpty: !1
        }
    }),
    n.fromStreetID = function(e, t, i) {
        var r;
        return null == i && (i = {}),
        r = t.streets.get(e),
        null == r ? s : n.fromCityID(r.cityID, t, _.extend(i, {
            street: r
        }))
    }
    ,
    n.fromCityID = function(e, t, i) {
        var r, o, a;
        return null == i && (i = {}),
        r = t.cities.get(e),
        r && (a = t.states.get(r.attributes.stateID)),
        a && (o = t.countries.get(r.attributes.countryID)),
        [r, a, o].some(function(e) {
            return null == e
        }) ? s : new n(_.extend(i, {
            city: r,
            state: a,
            country: o
        }))
    }
    ,
    s = new n({
        isEmpty: !0
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    n = i(4),
    s = OL.Class(n, {
        attributesToCompare: ["fromTime", "toTime", "fromDate", "toDate", "vehicleTypes", "days", "description", "difficult"],
        MaxVehicleType: 11,
        DescriptionMaxLength: 100,
        allDay: !0,
        fromTime: null ,
        toTime: null ,
        fromDate: null ,
        toDate: null ,
        DateFormat: "yyyy-MM-dd",
        days: 0,
        vehicleTypes: 0,
        description: null ,
        initialize: function(e) {
            OL.Util.extend(this, e)
        },
        setTime: function(e, t) {
            return this.allDay = !1,
            this.fromTime = e,
            this.toTime = t
        },
        setAllDay: function() {
            return this.allDay = !0,
            this.fromTime = null ,
            this.toTime = null
        },
        isAllDay: function() {
            return this.allDay
        },
        setDates: function(e, t) {
            return this.fromDate = new Date(e).toString(this.DateFormat),
            this.toDate = new Date(t).toString(this.DateFormat)
        },
        getFromDate: function() {
            return this.parseDate(this.fromDate)
        },
        getToDate: function() {
            return this.parseDate(this.toDate)
        },
        parseDate: function(e) {
            var t, i, n, s;
            return e ? (n = e.split("-"),
            s = n[0],
            i = n[1],
            t = n[2],
            new Date(s,i - 1,t)) : null
        },
        setPermanent: function() {
            return this.fromDate = null ,
            this.toDate = null
        },
        isPermanent: function() {
            return null === this.fromDate && null === this.toDate
        },
        isDifficult: function() {
            return this.difficult && this.isPermanent() && this.isAllDay() && this.days === s.prototype.allDays && this.vehicleTypes === s.prototype.allVehicleTypes
        },
        isTwoDay: function() {
            var e, t;
            return !this.isAllDay() && (e = this.parseTime(this.fromTime),
            t = this.parseTime(this.toTime),
            1 === this.compareHours(e, t))
        },
        compareHours: function(e, t) {
            return e.hour === t.hour ? e.minute > t.minute ? 1 : e.minute < t.minute ? -1 : 0 : e.hour > t.hour ? 1 : e.hour < t.hour ? -1 : 0
        },
        isInThePast: function() {
            var e;
            return !this.isPermanent() && (e = new Date.today,
            +this.getToDate() < +e)
        },
        parseTime: function(e) {
            var t;
            return t = e.split(":"),
            {
                hour: t[0],
                minute: t[1]
            }
        },
        includesVehicleType: function(e) {
            return e = Math.pow(2, e),
            0 !== (this.vehicleTypes & e)
        },
        allVehiclesIncluded: function() {
            return this.vehicleTypes === this.allVehicleTypes
        },
        clone: function() {
            return new s({
                allDay: this.allDay,
                fromTime: this.fromTime,
                toTime: this.toTime,
                fromDate: this.fromDate,
                toDate: this.toDate,
                vehicleTypes: this.vehicleTypes,
                days: this.days,
                description: this.description,
                difficult: this.difficult
            })
        },
        includesDay: function(e) {
            return 0 !== (this.days & 1 << e)
        },
        getDays: function() {
            var e, t, i;
            for (i = [],
            e = t = 0; t <= 6; e = ++t)
                this.includesDay(e) && i.push(e);
            return i
        },
        setDays: function(e) {
            return this.days = e.reduce(function(e, t) {
                return e += 1 << t
            }, 0)
        },
        equals: function(e) {
            return this.attributesToCompare.every(function(t) {
                return function(i) {
                    return e[i] === t[i]
                }
            }(this))
        },
        toString: function() {
            return this.days + "," + this.fromTime + "," + this.toTime + "," + this.fromDate + "," + this.toDate + "," + this.vehicleTypes + "," + this.description
        },
        CLASS_NAME: "Waze.Model.Object.Restriction"
    }),
    s.prototype.allVehicleTypes = -1,
    s.prototype.allDays = 127,
    s.createDifficult = function() {
        return new s({
            difficult: !0,
            allDay: !0,
            fromTime: null ,
            toTime: null ,
            fromDate: null ,
            toDate: null ,
            vehicleTypes: s.prototype.allVehicleTypes,
            days: s.prototype.allDays
        })
    }
    ,
    e.exports = s
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        SUBJECT: {
            VENUE: "VENUE",
            IMAGE: "IMAGE"
        },
        ACTION: {
            ADD: "ADD",
            UPDATE: "UPDATE",
            DELETE: "DELETE"
        },
        SEVERITY: {
            LOW: "low",
            MEDIUM: "medium",
            HIGH: "high"
        },
        SEVERITY_THRESHOLD: {
            LOW: 3,
            MEDIUM: 7
        },
        defaults: {
            approved: null
        },
        initialize: function() {
            return this.set({
                updateType: this.get("action") + "_" + this.get("subject")
            })
        },
        isVenue: function() {
            return this.get("subject") === this.SUBJECT.VENUE
        },
        isImage: function() {
            return this.get("subject") === this.SUBJECT.IMAGE
        },
        getAddedImage: function() {
            return this._findImage(this.id)
        },
        _findImage: function(e) {
            return _(this.get("place").attributes.images).find(function(t) {
                return t.get("id") === e
            })
        },
        isEditableByUser: function() {
            return this.get("isEditable") && this.get("isInEditArea")
        },
        isPlaceAdLocked: function() {
            return this.get("place").attributes.adLocked && !this.get("isAdLockedEditable")
        },
        getRequiredEditRank: function() {
            return Math.max(this.get("place").attributes.lockRank, i.MIN_EDIT_RANK)
        },
        getSeverity: function() {
            var e, t;
            return e = new TimeSpan(Date.now() - this.get("dateAdded")).days,
            t = this.SEVERITY.HIGH,
            e <= this.SEVERITY_THRESHOLD.LOW ? t = this.SEVERITY.LOW : e <= this.SEVERITY_THRESHOLD.MEDIUM && (t = this.SEVERITY.MEDIUM),
            t
        }
    }),
    i.MIN_EDIT_RANK = 1,
    e.exports = i
}
, function(e, t) {
    var i;
    i = Marionette.Behavior.extend({
        defaults: {
            modelAttribute: "model"
        },
        timepickerOptions: {
            defaultTime: !1,
            showMeridian: !1,
            template: !1
        },
        datepickerOptions: {
            singleDatePicker: !0,
            autoUpdateInput: !1,
            locale: {
                format: "YYYY-MM-DD"
            }
        },
        ui: {
            startDate: ".start-date",
            startTime: ".start-time",
            endDate: ".end-date",
            endTime: ".end-time"
        },
        events: {
            "click .date-input-group .open-calendar-button": "_focusSiblingInput",
            "click .input-group.bootstrap-timepicker .input-group-addon": "_focusSiblingInput"
        },
        bindings: function() {
            return {
                ".start-date": {
                    observe: "startDate",
                    onGet: this._getDate.bind(this),
                    onSet: this._setDate.bind(this)
                },
                ".start-time": {
                    observe: "startDate",
                    onGet: this._getTime.bind(this),
                    onSet: this._setTime.bind(this)
                },
                ".end-date": {
                    observe: "endDate",
                    onGet: this._getDate.bind(this),
                    onSet: this._setDate.bind(this)
                },
                ".end-time": {
                    observe: "endDate",
                    onGet: this._getTime.bind(this),
                    onSet: this._setTime.bind(this)
                },
                ".no-end-date": {
                    observe: "endDate",
                    onGet: function(e) {
                        return (null != e ? e.length : void 0) > 0
                    },
                    onSet: function(e) {
                        return null
                    }
                }
            }
        },
        onRender: function() {
            return this.view.stickit(this.view[this.options.modelAttribute], this.bindings()),
            this._createTimePickers(),
            this._createDatePickers()
        },
        onDestroy: function() {
            return this._destroyTimePickers(),
            this._destroyDatePickers()
        },
        _createTimePickers: function() {
            return this.ui.startTime.timepicker(this.timepickerOptions),
            this.ui.endTime.timepicker(this.timepickerOptions)
        },
        _createDatePickers: function() {
            return this._createDatePicker(this.ui.startDate, this.ui.startTime),
            this._createDatePicker(this.ui.endDate, this.ui.endTime)
        },
        _createDatePicker: function(e, t) {
            return e.daterangepicker(this.datepickerOptions),
            e.on("apply.daterangepicker", function(i, n) {
                return e.val(n.startDate.format(n.locale.format)),
                e.trigger("change"),
                null != t ? t.focus() : void 0
            })
        },
        _destroyTimePickers: function() {
            var e, t, i, n;
            return null != (e = this.ui.startTime) && null != (t = e.data("timepicker")) && t.remove(),
            null != (i = this.ui.endTime) && null != (n = i.data("timepicker")) ? n.remove() : void 0
        },
        _destroyDatePickers: function() {
            var e, t, i, n;
            return null != (e = this.ui.startDate) && null != (t = e.data("daterangepicker")) && t.remove(),
            null != (i = this.ui.endDate) && null != (n = i.data("daterangepicker")) ? n.remove() : void 0
        },
        _focusSiblingInput: function(e) {
            return this.$(e.target).parents(".input-group").find("input").focus()
        },
        _getDate: function(e) {
            var t, i;
            return i = null ,
            null != e && (t = e.split(" ")[0],
            this._isValidDate(t) && (i = t)),
            i
        },
        _getTime: function(e) {
            var t;
            return t = null ,
            (null != e ? e.length : void 0) > 0 && (t = e.split(" ")[1]),
            t
        },
        _setDate: function(e, t) {
            var i, n;
            return this._isValidDate(e) ? (i = t.view[this.options.modelAttribute].get(t.observe),
            n = this._getTime(i),
            "" === n && (n = "00:00"),
            [e, n].join(" ")) : null
        },
        _setTime: function(e, t) {
            var i, n;
            return n = t.view[this.options.modelAttribute].get(t.observe),
            i = this._getDate(n),
            this._isValidDate(i) ? [i, e].join(" ") : null
        },
        _isValidDate: function(e) {
            return "Invalid Date" !== new Date(e).toString()
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s;
    n = i(142),
    s = n.extend({
        TYPE: {
            PRIVATE_FORUM_MESSAGE: "PRIVATE_FORUM_MESSAGE"
        },
        defaults: function() {
            return {
                type: null ,
                timestamp: null ,
                parameters: {}
            }
        },
        isForumMessage: function() {
            return this.attributes.type === this.TYPE.PRIVATE_FORUM_MESSAGE
        },
        getParameter: function(e) {
            return this.attributes.parameters[e]
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l = {}.hasOwnProperty;
    a = i(9),
    s = i(87),
    o = i(22),
    n = i(51),
    r = s.extend({
        className: "feed-item feed-issue",
        template: "Waze/Modules/Feed/templates/issue_item",
        bindings: {
            ":el": {
                classes: {
                    modified: "modified"
                }
            }
        },
        onRender: function() {
            return this.stickit()
        },
        getType: function() {
            return null
        },
        serializeData: function() {
            return {
                type: this.getType(),
                motivation: this._getMotivationText(),
                place: this._getPlaceText(),
                street: this.model.get("streetText"),
                city: this.model.get("cityText"),
                state: this.model.get("stateText"),
                country: this.model.get("countryText"),
                timestamp: this.model.has("timestamp") ? this._formatTimestamp() : void 0
            }
        },
        _formatTimestamp: function() {
            return a.timeDistanceInWordsFromNow(this.model.get("timestamp"))
        },
        _getMotivationText: function() {
            var e, t, i, s;
            e = new n(this.model.get("motivation")),
            i = o.prototype.MOTIVATIONS;
            for (t in i)
                if (l.call(i, t) && (s = i[t],
                e.isEnabled(t)))
                    return I18n.t("feed.issues.motivations." + s);
            return null
        },
        _getPlaceText: function() {
            var e;
            return e = this.model.get("venue"),
            e ? e.attributes.name : ""
        },
        _getSeverityClass: function() {
            return this.model.getSeverity() ? "severity-" + this.model.getSeverity() : ""
        }
    }),
    e.exports = r
}
, function(e, t) {
    var i = {}.toString;
    e.exports = function(e) {
        return i.call(e).slice(8, -1)
    }
}
, function(e, t, i) {
    var n = i(93);
    e.exports = function(e, t, i) {
        if (n(e),
        void 0 === t)
            return e;
        switch (i) {
        case 1:
            return function(i) {
                return e.call(t, i)
            }
            ;
        case 2:
            return function(i, n) {
                return e.call(t, i, n)
            }
            ;
        case 3:
            return function(i, n, s) {
                return e.call(t, i, n, s)
            }
        }
        return function() {
            return e.apply(t, arguments)
        }
    }
}
, function(e, t) {
    e.exports = function(e) {
        try {
            return !!e()
        } catch (e) {
            return !0
        }
    }
}
, function(e, t) {
    var i = {}.hasOwnProperty;
    e.exports = function(e, t) {
        return i.call(e, t)
    }
}
, function(e, t) {
    e.exports = function(e) {
        return "object" == typeof e ? null !== e : "function" == typeof e
    }
}
, function(e, t, i) {
    var n = i(743)
      , s = i(168);
    e.exports = Object.keys || function(e) {
        return n(e, s)
    }
}
, function(e, t, i) {
    var n = i(170)
      , s = i(95);
    e.exports = function(e) {
        return n(s(e))
    }
}
, function(e, t, i) {
    var n, s = i(3), r = i(38), o = (i(2),
    i(105));
    n = OpenLayers.Class(s, {
        city: null ,
        initialize: function(e, t, i, n, r) {
            s.prototype.initialize.apply(this, [r]),
            this.state = e,
            this.country = t,
            this.name = i,
            this.isEmpty = n
        },
        doAction: function() {
            var e, t = null , i = !1;
            if (this.state || (this.state = this.model.states.getByAttributes({
                isDefault: !0
            }).first()),
            t = this.isEmpty ? this.model.cities.getByAttributes({
                countryID: this.country.getID(),
                stateID: this.state.getID(),
                isEmpty: !0
            }).first() : this.model.cities.getByAttributes({
                name: this.name,
                countryID: this.country.getID(),
                stateID: this.state.getID()
            }).first(),
            !t) {
                var n = new o({
                    countryID: this.country.getID(),
                    stateID: this.state.getID(),
                    isEmpty: this.isEmpty,
                    name: this.isEmpty ? "" : this.name
                });
                e = new r(n,this.model.cities),
                t = e.object,
                this.doSubAction(e),
                i = !0
            }
            return this.city = t,
            i
        },
        CLASS_NAME: "Waze.Action.AddOrGetCity"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(3);
    n = OpenLayers.Class(s, {
        initialize: function(e, t) {
            s.prototype.initialize.apply(this, [t]),
            e ? this.subActions = e : this.subActions = []
        },
        undoSupported: function() {
            for (var e = 0, t = this.subActions.length; e < t; e++)
                if (!this.subActions[e].undoSupported())
                    return !1;
            return !0
        },
        setModel: function(e) {
            s.prototype.setModel.apply(this, [e]);
            for (var t = 0, i = this.subActions.length; t < i; t++)
                this.subActions[t].setModel(e)
        },
        CLASS_NAME: "Waze.Action.MultiAction"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r = (i(5),
    i(25)), o = i(27), a = i(53), l = i(3), u = i(103), c = i(110), d = i(8), h = i(6);
    _.defer(function() {
        n = i(47)
    }),
    s = OpenLayers.Class(l, {
        segment: null ,
        splits: null ,
        initialize: function(e, t) {
            l.prototype.initialize.apply(this, [t]),
            this.segment = e
        },
        destroy: function() {
            this.model.segments.get(this.segment.getID()) || this.segment.destroy(),
            this.splits && this.splits.forEach(function(e) {
                this.model.segments.get(this.segment.getID()) || e.destroy()
            }, this),
            this.segment = null ,
            this.splits = null ,
            l.prototype.destroy.apply(this)
        },
        splitSegment: function() {
            var e = this.model.nodes.get(this.segment.attributes.fromNodeID)
              , t = this.model.nodes.get(this.segment.attributes.toNodeID);
            this.addSplitNode(),
            this.createSegments(),
            this.connectSegmentsToSplitNode(),
            this.connectSplitToNode(this.splits.first(), e),
            this.connectSplitToNode(this.splits.last(), t),
            this.connectParts(),
            this.doSubAction(new c(e,this.segment,this.splits.first(),{
                dontSerialize: !0
            })),
            this.doSubAction(new c(t,this.segment,this.splits.last(),{
                dontSerialize: !0
            })),
            this.doSubAction(new o(this.segment,{
                hide: !0
            }))
        },
        connectParts: function() {
            if (this.segment.isDrivable()) {
                var e = this.splits.first()
                  , t = this.splits.last();
                this.splitNode.isTurnAllowedBySegDirections(e, t) && this.doSubAction(new a(e.getID(),this.splitNode,t.getID(),!0)),
                this.splitNode.isTurnAllowedBySegDirections(t, e) && this.doSubAction(new a(t.getID(),this.splitNode,e.getID(),!0))
            }
        },
        createSegments: function() {
            var e = this.segment.attributes.origID || this.segment.getID() || null
              , t = this.segment.attributes
              , i = this.splits[0]
              , s = this.splits[1];
            i.attributes.fromConnections = _.clone(t.fromConnections),
            i.attributes.toConnections = {},
            i.attributes.fromRestrictions = this.segment.cloneRestrictions(t.fromRestrictions),
            i.attributes.toRestrictions = {},
            i.attributes.toNodeID = this.splitNode.getID(),
            i.attributes.fromNodeID = t.fromNodeID,
            s.attributes.toConnections = _.clone(t.toConnections),
            s.attributes.fromConnections = {},
            s.attributes.toRestrictions = this.segment.cloneRestrictions(t.toRestrictions),
            s.attributes.fromRestrictions = {},
            s.attributes.toNodeID = t.toNodeID,
            s.attributes.fromNodeID = this.splitNode.getID(),
            this.splits.forEach(function(i) {
                i.attributes.fwdDirection = t.fwdDirection,
                i.attributes.revDirection = t.revDirection,
                i.attributes.fwdToll = t.fwdToll,
                i.attributes.revToll = t.revToll,
                i.attributes.origIDs = [e],
                i.setID(null ),
                this.doSubAction(new n(i))
            }, this)
        },
        addSplitNode: function() {
            var e, t;
            this.splitNode || (e = this.splits.first().geometry.components.last(),
            e = new OpenLayers.Geometry.Point(e.x,e.y),
            t = new u(e,[]),
            this.doSubAction(t),
            this.splitNode = t.node)
        },
        connectSegmentsToSplitNode: function() {
            this.splitWithSegment && this.doSubAction(new r(this.splitNode,this.splitWithSegment)),
            this.splits.forEach(function(e) {
                this.doSubAction(new r(this.splitNode,e,{
                    dontSerialize: !0
                }))
            }, this)
        },
        connectSplitToNode: function(e, t) {
            t && this.doSubAction(new r(t,e,{
                dontSerialize: !0
            }))
        },
        doAction: function() {
            return !(this.splitAtPoint && !this.createSplitsFromPoint(this.splitAtPoint)) && !!this.splits && !this.hasSingularParts() && void this.splitSegment()
        },
        hasSingularParts: function() {
            var e = this.model.distanceCache.getValue(this.segment.geometry.getVertices(!0).first());
            return this.splits.some(function(t) {
                return t.geometry.getLength() < e
            }, this)
        },
        createSplitsFromPoint: function(e) {
            var t, i, n, s;
            if (s = this.segment.geometry.getVertices().map(function(e) {
                return new OpenLayers.Geometry.Point(e.x,e.y)
            }),
            h.defined(this.splittingPointIndex))
                n = this.splittingPointIndex;
            else if (n = this.getSplitEdge(e, s),
            n === -1)
                return !1;
            return t = new OpenLayers.Geometry.LineString(s.slice(0, n + 1)),
            t.components.last().equals(e) || t.components.push(e.clone()),
            i = new OpenLayers.Geometry.LineString(s.slice(n + 1)),
            i.components.first().equals(e) || i.components.unshift(e.clone()),
            this.splits = [t, i].map(function(e) {
                return this.createSplitSegmentPart(this.segment, e)
            }, this),
            !0
        },
        getSplitEdge: function(e, t) {
            return d.getPointEdge(t, e, this.splittingPointDistance)
        },
        createSplitSegmentPart: function(e, t) {
            var i = e.clone();
            return delete i.geometry,
            i.geometry = t,
            i
        },
        CLASS_NAME: "Waze.Action.SplitSegments"
    }),
    e.exports = s
}
, function(e, t, i) {
    "use strict";
    var n = i(10)
      , s = i(48)
      , r = OL.Class(OL.Control.ModifyFeature, {
        standalone: !0,
        initialize: function(e, t) {
            OpenLayers.Control.ModifyFeature.prototype.initialize.call(this, e.layer, t),
            this.feature = e,
            this.repo.on(n.CHANGED, this._onFeaturesChanged, this),
            this.repo.on(n.REMOVED, this._onFeaturesRemoved, this),
            this.map.events.register("zoomend", this, this.resetVertices),
            this._originalGeometry = this.feature.geometry.clone(),
            this.map.addControl(this),
            this.activate(),
            this.selectFeature(this.feature)
        },
        destroy: function() {
            this.unselectFeature(),
            this.repo.off(n.CHANGED, this._onFeaturesChanged, this),
            this.repo.off(n.REMOVED, this._onFeaturesRemoved, this),
            this.map.events.unregister("zoomend", this, this.resetVertices),
            this.map.removeControl(this),
            OL.Control.ModifyFeature.prototype.destroy.apply(this, arguments)
        },
        setFeatureState: function() {},
        _onFeaturesChanged: function() {
            this.feature && (this.resetVertices(),
            this._originalGeometry = this.feature.geometry.clone())
        },
        _onFeaturesRemoved: function(e) {
            e.contains(this.feature) && this.unselectFeature(this.feature)
        },
        onModification: function() {
            var e = new s(this.feature.model,this.repo,this._originalGeometry,this.feature.geometry);
            this.model.actionManager.add(e),
            this._originalGeometry = this.feature.geometry.clone()
        }
    });
    e.exports = r
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var s = i(108)
      , r = n(s)
      , o = i(77)
      , a = n(o)
      , l = (i(51),
    i(121),
    i(463))
      , u = i(20)
      , c = i(44).UNIT
      , d = OpenLayers.Class(u, {
        children: null ,
        address: null ,
        addressDetails: null ,
        attributeToReducer: null ,
        attributeNames: ["flags", "fwdFlags", "revFlags", "roadType", "direction", "level", "fwdToll", "revToll", "fwdDirection", "revDirection", "fwdMaxSpeed", "fwdMaxSpeedUnverified", "revMaxSpeed", "revMaxSpeedUnverified", "permissions", "updatedBy", "createdBy", "createdOn", "updatedOn", "length", "allowNoDirection", "rank", "lockRank", "routingRoadType", "hasClosures", "hasHNs"],
        attributeReducers: {
            permissions: l.bitwise.and,
            length: l.sum,
            rank: l.max,
            hasClosures: l.logical.or,
            hasHNs: l.logical.or,
            flags: l.bitwise.or,
            fwdflags: l.bitwise.or,
            revFlags: l.bitwise.or
        },
        flagAttributeNames: (0,
        a.default)(u.prototype.FLAG_ATTRIBUTES),
        flagAttributeReducers: (0,
        a.default)(u.prototype.FLAG_ATTRIBUTES).reduce(function(e, t) {
            return e[t] = l.logical.and
        }, {}),
        attributeReverses: {
            fwdDirection: "directionReverser",
            revDirection: "directionReverser"
        },
        reversableAttributes: {
            fwdMaxSpeed: "revMaxSpeed",
            revMaxSpeed: "fwdMaxSpeed",
            fwdDirection: "revDirection",
            revDirection: "fwdDirection",
            fwdToll: "revToll",
            revToll: "fwdToll",
            fwdFlags: "revFlags",
            revFlags: "fwdFlags",
            fwdMaxSpeedUnverified: "revMaxSpeedUnverified",
            revMaxSpeedUnverified: "fwdMaxSpeedUnverified"
        },
        UNITS: {
            speed: c.KILOMETER
        },
        initialize: function(e, t, i) {
            this.children = e,
            this.model = t,
            this.reverseSegments = i,
            this.attributeToReducer = _.extend({}, this.attributeReducers, this.flagAttributeReducers),
            this.calcAttributes()
        },
        directionReverser: function(e, t) {
            return e.isOneWay() ? !e.attributes[t] : e.attributes[t]
        },
        calcAttributes: function() {
            var e = this
              , t = this._computeAttributes(this.attributeNames)
              , i = (0,
            r.default)(t, 2)
              , n = i[0]
              , s = i[1]
              , o = this._computeAttributes(this.flagAttributeNames)
              , a = (0,
            r.default)(o, 2)
              , l = a[0]
              , u = a[1];
            this.attributes = n,
            this.flagAttributes = l,
            this.mixed = _.extend({}, s, u),
            this.address = null ,
            this.addressDetails = null ,
            this.calcVirtualAttributes(),
            1 === this.children.length && ["fwdRestrictions", "revRestrictions"].forEach(function(t) {
                e.attributes[t] = e.children[0].attributes[t]
            })
        },
        _computeAttributes: function(e) {
            var t = this
              , i = {}
              , n = {};
            return e.forEach(function(e) {
                var s = null
                  , r = t.attributeToReducer[e]
                  , o = t.children.map(function(i) {
                    return t._getChildAttribute(i, e)
                }).unique();
                1 === o.length ? (s = o.first(),
                n[e] = !1) : (n[e] = !0,
                s = r ? o.reduce(r) : o),
                i[e] = s
            }),
            [i, n]
        },
        calcVirtualAttributes: function() {
            this.mixed.fwdToll || this.mixed.revToll ? this.mixed.toll = !0 : this.attributes.toll = this.isTollRoad(),
            this.mixed.fwdDirection || this.mixed.revDirection ? this.mixed.direction = !0 : this.attributes.direction = this.getDirection()
        },
        getAddress: function() {
            if (null !== this.address)
                return this.address;
            var e, t, i, n = this;
            return t = {
                street: [],
                city: [],
                state: [],
                country: [],
                altStreets: []
            },
            this.mixed.streetIDs = !1,
            this.children.length > 0 && (i = this.children.first().attributes.streetIDs),
            this.children.forEach(function(s) {
                e = s.getAddress(),
                t.street.push(e.street),
                t.city.push(e.city),
                t.state.push(e.state),
                t.country.push(e.country),
                n.mixed.streetIDs || (n.mixed.streetIDs = !i.equals(s.attributes.streetIDs)),
                t.altStreets = t.altStreets.concat(s.attributes.streetIDs)
            }),
            t.anyStreet = t.street.some(function(e) {
                return e && !e.isEmpty
            }),
            t.altStreets = t.altStreets.unique(),
            t.altStreets = t.altStreets.map(function(e) {
                var t, i;
                return (t = n.model.streets.get(e)) ? (i = n.model.cities.get(t.cityID),
                {
                    street: t,
                    city: i
                }) : null
            }),
            t.altStreets = t.altStreets.filter(function(e) {
                return null !== e
            }),
            ["street", "city", "state", "country"].forEach(function(e) {
                t[e] = t[e].uniqueBy(function(e, t) {
                    return e && t ? e.id === t.id : e === t
                }),
                1 === t[e].length ? t[e] = t[e].first() : n.mixed[e] = !0
            }),
            this.address = t,
            t
        },
        getAddressDetails: function() {
            if (null !== this.addressDetails)
                return this.addressDetails;
            var e = u.prototype.getAddressDetails.apply(this, arguments)
              , t = this.getAddress();
            return t.street ? (e.streetName = this.mixed.street ? I18n.t("edit.segment.no_common.street") : e.streetName,
            e.cityName = this.mixed.city ? I18n.t("edit.segment.no_common.city") : e.cityName,
            e.stateName = this.mixed.state ? I18n.t("edit.segment.no_common.state") : e.stateName,
            e.countryName = this.mixed.country ? I18n.t("edit.segment.no_common.country") : e.countryName,
            this.addressDetails = e,
            e) : null
        },
        getID: function() {
            return this.children.map(function(e) {
                return e.getID()
            }).join(", ")
        },
        isHighway: function() {
            return this.children.every(function(e) {
                return e.isHighway()
            })
        },
        isRoad: function() {
            return this.children.every(function(e) {
                return e.isRoad()
            })
        },
        isInBigJunction: function() {
            return this.children.some(function(e) {
                return e.isInBigJunction()
            })
        },
        isInRoundabout: function() {
            return this.children.every(function(e) {
                return e.isInRoundabout()
            })
        },
        canChangeMaxSpeedUnverified: function(e) {
            var t = this;
            return this.children.some(function(i) {
                var n = t._getAttributeByDirection(i, e);
                return i.canChangeMaxSpeedUnverified(n)
            })
        },
        _isReversed: function(e) {
            return !!this.reverseSegments[e.getID()]
        },
        _getChildAttribute: function(e, t) {
            var i = void 0;
            if (i = this.flagAttributeNames.indexOf(t) > -1 ? e.flagAttributes[t] : e.attributes[t],
            this._isReversed(e)) {
                var n = this.attributeReverses[t]
                  , s = this.reversableAttributes[t];
                n ? i = this[n](e, t) : s && (i = e.attributes[s])
            }
            return i
        },
        _getAttributeByDirection: function(e, t) {
            var i = this.reversableAttributes[t];
            return this._isReversed(e) && i ? i : t
        },
        CLASS_NAME: "Waze.Feature.Vector.CompositeSegment"
    });
    e.exports = d
}
, function(e, t, i) {
    "use strict";
    var n, s = i(8), r = i(20);
    n = OpenLayers.Class({
        ARROW_DISTANCE: 70,
        DISCONNECT_GUTTER_SIZE: 5,
        WEIGHT_POINT_DISTANCE: 70,
        HIDDEN_INSTRUCTION_CODES: [0, 5],
        layer: null ,
        initialize: function(e) {
            this.layer = e
        },
        drawUserDrive: function(e) {
            var t = [];
            return t.push(new OpenLayers.Feature.Vector(e.clone(),{
                type: "drive"
            })),
            this.drawArrows(e, t, "driveArrow"),
            this.addFeatures(t),
            t
        },
        drawDriveWeightPoint: function(e, t, i) {
            if (this.layer.map.getZoom() >= W.Config.user_drive.weightMinDisplayZoom) {
                var n, r = e.distanceTo(t, {
                    details: !0
                });
                r = new OpenLayers.Geometry.Point(r.x1,r.y1),
                r = s.getPointAlongLine(t.getVertices(), this.WEIGHT_POINT_DISTANCE * this.layer.map.getResolution(), r).point,
                n = new OpenLayers.Feature.Vector(r,{
                    weight: i.toString(),
                    type: "driveWeight"
                }),
                this.addFeatures(n)
            }
        },
        drawShortSegment: function(e) {
            var t = [];
            t.push(new OpenLayers.Feature.Vector(e.clone(),{
                type: "shortSegment"
            })),
            this.addFeatures(t)
        },
        drawMatchedSegment: function(e) {
            var t = [];
            t.push(new OpenLayers.Feature.Vector(e.clone(),{
                type: "matchedSegment"
            })),
            this.drawArrows(e, t, "matchedSegmentArrow"),
            this.addFeatures(t)
        },
        drawSuggestedRoute: function(e) {
            var t = [];
            return t.push(new OpenLayers.Feature.Vector(e.clone(),{
                type: "suggestedRoute"
            })),
            this.drawArrows(e, t, "suggestedRouteArrow"),
            this.addFeatures(t),
            t
        },
        drawSession: function(e) {
            this.addFeatures(new OpenLayers.Feature.Vector(e.clone(),{
                type: "session"
            }))
        },
        drawArrows: function(e, t, i) {
            if (this.layer.map.getZoom() >= W.Config.user_drive.arrowsMinDisplayZoom) {
                var n = this.ARROW_DISTANCE * this.layer.map.getResolution();
                new r({
                    geometry: e
                }).getArrowPoints(n).forEach(function(e) {
                    t.push(new OpenLayers.Feature.Vector(e.first(),{
                        type: i,
                        angle: 360 - OpenLayers.Util.deg(e.last())
                    }))
                })
            }
        },
        drawDisconnect: function(e, t) {
            var i = [];
            i.push(new OpenLayers.Feature.Vector(e.clone(),{
                type: "disconnect"
            })),
            t && this.drawDisconnectGutters(e, i),
            this.addFeatures(i)
        },
        drawDisconnectGutters: function(e, t) {
            if (this.layer.map.getZoom() >= W.Config.user_drive.gutterMinDisplayZoom) {
                var i, n = this.DISCONNECT_GUTTER_SIZE * this.layer.map.getResolution();
                [!0, !1].forEach(function(s) {
                    i = new r({
                        geometry: e
                    }).getSubSegment(n, s),
                    i.attributes.type = "gutter",
                    t.push(i)
                })
            }
        },
        drawPin: function(e, t) {
            this.addFeatures(new OpenLayers.Feature.Vector(e.clone(),{
                type: "pin" + t
            }))
        },
        drawRouteInstructions: function(e, t) {
            var i = [];
            t.isEmpty() || this.layer.map.getZoom() < W.Config.user_drive.instructionsMinDisplayZoom || (t.forEach(function(e) {
                this.HIDDEN_INSTRUCTION_CODES.contains(+e.code) || i.push(new OpenLayers.Feature.Vector(e.point,{
                    type: "routeInstruction",
                    code: e.code
                }))
            }, this),
            this.addFeatures(i))
        },
        drawVenue: function(e) {
            var t = new OL.Feature.Vector(e.clone(),{
                type: "venue"
            });
            this.addFeatures(t)
        },
        addFeatures: function(e) {
            this.layer.addFeatures(e, {
                silent: !0
            })
        }
    }),
    e.exports = n
}
, function(e, t) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    }),
    t.default = {
        RASTER_LAYER_NAME: "cities",
        FEATURES_LAYER_NAME: "cities_features",
        MARKERS_LAYER_NAME: "cities_markers"
    },
    e.exports = t.default
}
, function(e, t, i) {
    e.exports = {
        default: i(723),
        __esModule: !0
    }
}
, function(e, t) {
    "use strict";
    t.__esModule = !0,
    t.default = function(e, t) {
        if (!(e instanceof t))
            throw new TypeError("Cannot call a class as a function")
    }
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.__esModule = !0;
    var s = i(106)
      , r = n(s);
    t.default = function() {
        function e(e, t) {
            for (var i = 0; i < t.length; i++) {
                var n = t[i];
                n.enumerable = n.enumerable || !1,
                n.configurable = !0,
                "value"in n && (n.writable = !0),
                (0,
                r.default)(e, n.key, n)
            }
        }
        return function(t, i, n) {
            return i && e(t.prototype, i),
            n && e(t, n),
            t
        }
    }()
}
, function(e, t) {
    var i;
    i = OL.Class({
        initialize: function() {
            return this.dfd = new $.Deferred,
            this
        },
        next: function() {
            if ("resolved" === this.dfd.state())
                throw new Error("next was already called");
            return this._resolve("next")
        },
        on: function(e, t) {
            return this.dfd.promise().done(function(i) {
                if (i === e)
                    return t()
            })
        },
        _resolve: function(e) {
            return this.dfd.resolve(e)
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r = {}.hasOwnProperty;
    n = i(8),
    s = {
        parse: function(e) {
            var t, i, n, s;
            s = this.nested;
            for (t in s)
                r.call(s, t) && (i = s[t],
                n = e[t],
                n && (_.isArray(n) ? e[t] = n.map(function(e) {
                    return function(n) {
                        return e.parseField(n, i, t)
                    }
                }(this)) : e[t] = this.parseField(n, i, t)));
            return e
        },
        parseField: function(e, t, i) {
            var s, r, o;
            return t === OL.Geometry ? (s = n.parse(e),
            (null != (r = this.attributes) && null != (o = r[i]) ? o.id : void 0) && (s.id = this.attributes[i].id),
            s) : _.isObject(e) ? new t(e,{
                parse: !0
            }) : new t({
                id: e,
                parse: !0
            })
        }
    },
    e.exports = s
}
, function(e, t) {
    var i, n;
    n = Backbone.Model.extend(),
    i = Backbone.Collection.extend({
        model: n,
        removeEmpty: function() {
            return this.remove(this.where({
                name: ""
            }), {
                silent: !0
            }),
            this
        }
    }),
    e.exports = {
        Item: n,
        Collection: i
    }
}
, function(e, t, i) {
    var n, s, r, o = {}.hasOwnProperty;
    s = i(125),
    r = i(21),
    n = OL.Class(s, {
        initialize: function(e, t) {
            null == e && (e = []),
            this.options = null != t ? t : {},
            this.models = e,
            null != this.options.model && (this.model = this.options.model)
        },
        model: r,
        add: function(e, t) {
            return null == t && (t = {}),
            e instanceof this.model || (e = new this.model(e)),
            this._beforeAdd(e) && (this.models.push(e),
            t.silent || this.trigger("add", e)),
            e
        },
        addSorted: function(e, t) {
            var i, n, s, r, o, a;
            for (null == t && (t = {}),
            e instanceof this.model || (e = new this.model(e)),
            a = e.get(t.attribute),
            n = 0,
            o = this.models,
            i = 0,
            s = o.length; i < s; i++) {
                if (r = o[i],
                t.ascending) {
                    if (r.get(t.attribute) >= a)
                        break
                } else if (r.get(t.attribute) <= a)
                    break;
                n++
            }
            return this._beforeAdd(e) && (this.models.splice(n, 0, e),
            t.silent || this.trigger("add", e)),
            e
        },
        _beforeAdd: function(e) {
            return !0
        },
        remove: function(e) {
            return this.removeAt(this.models.indexOf(e))
        },
        removeAt: function(e) {
            var t;
            if (0 <= e && e < this.models.length)
                return t = this.models[e],
                this.models.splice(e, 1),
                this.trigger("remove", {
                    item: t,
                    index: e
                })
        },
        reset: function(e) {
            var t, i, n;
            for (this.models = [],
            t = 0,
            n = e.length; t < n; t++)
                i = e[t],
                this.add(i, {
                    silent: !0
                });
            return this.trigger("reset")
        },
        first: function(e) {
            var t, i, n, s;
            if (null != e) {
                for (s = this.models,
                t = 0,
                i = s.length; t < i; t++)
                    if (n = s[t],
                    e(n))
                        return n;
                return null
            }
            return this.models[0]
        },
        findWhere: function(e) {
            return null == e && (e = {}),
            this.first(function(t) {
                var i, n, s;
                i = !0;
                for (n in e)
                    o.call(e, n) && (s = e[n],
                    t.get(n) !== s && (i = !1));
                return i
            })
        },
        last: function() {
            return this.models.length > 0 ? this.models[this.models.length - 1] : null
        },
        map: function(e) {
            var t, i, n, s, r;
            for (r = [],
            s = this.models,
            t = 0,
            i = s.length; t < i; t++)
                n = s[t],
                r.push(e(n));
            return r
        },
        toJSON: function() {
            var e, t, i, n, s;
            for (n = this.models,
            s = [],
            e = 0,
            t = n.length; e < t; e++)
                i = n[e],
                s.push(i.toJSON());
            return s
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = {}.hasOwnProperty;
    n = Backbone.Model.extend({
        GEOMETRY_FIELDS: {
            entryExitPoints: !0,
            geometry: !0
        },
        CHANGE_TYPE: {
            ADDED: "ADDED",
            REMOVED: "REMOVED",
            UNCHANGED: "UNCHANGED"
        },
        initialize: function(e, t) {
            var n, s;
            return e = {},
            this.__setSuggestedValue(e),
            n = i(40),
            s = new n(e,{
                parse: null != t ? t.parse : void 0
            }),
            s.model = W.model,
            this.set({
                suggestedVenue: s
            })
        },
        __setSuggestedValue: function(e) {
            return e[this.get("fieldName")] = this.get("suggestedValue")
        },
        isGeometry: function() {
            return this.GEOMETRY_FIELDS[this.get("fieldName")] === !0
        },
        _getChangeList: function(e, t) {
            var i, n, s, r;
            return s = _.intersection(e, t),
            r = _.difference(e, t),
            i = _.difference(t, e),
            s = s.map(function(e) {
                return function(t) {
                    return {
                        name: t,
                        changeType: e.CHANGE_TYPE.UNCHANGED
                    }
                }
            }(this)),
            r = r.map(function(e) {
                return function(t) {
                    return {
                        name: t,
                        changeType: e.CHANGE_TYPE.REMOVED
                    }
                }
            }(this)),
            i = i.map(function(e) {
                return function(t) {
                    return {
                        name: t,
                        changeType: e.CHANGE_TYPE.ADDED
                    }
                }
            }(this)),
            n = s.concat(i, r),
            _.sortBy(n, "name")
        }
    }),
    n.build = function(e, t) {
        var i, r, o;
        r = [];
        for (i in e)
            s.call(e, i) && (o = e[i],
            _.isEqual(o, t.attributes[i]) || r.push(new n({
                fieldName: i,
                suggestedValue: o,
                venue: t
            },{
                parse: !0
            })));
        return r
    }
    ,
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    s = i(576),
    r = i(10),
    o = i(90),
    a = i(112),
    l = i(9),
    n = Marionette.ItemView.extend({
        template: "templates/address/edit",
        className: "address-edit-view",
        events: {
            "submit .address-form": "_formSubmitted",
            "click .edit-button": "_editClicked",
            "click .cancel-button": "_cancelClicked"
        },
        ui: {
            streetNameInput: ".street-name",
            cityNameInput: ".city-name"
        },
        defaultOptions: {
            editStreet: !0,
            editHouseNumber: !1
        },
        cityBindings: {
            ".city-id": {
                observe: "cityID",
                attributes: o.requireAndEnableIfNot("emptyCity"),
                selectOptions: {
                    collection: "this.cityOptions",
                    defaultOption: {
                        value: null ,
                        label: I18n.t("mte.edit.select_city")
                    }
                }
            }
        },
        bindings: {
            ".street-name": {
                observe: "streetName",
                attributes: o.requireAndEnableIfNot("emptyStreet")
            },
            ".city-name": {
                observe: "cityName",
                attributes: o.requireAndEnableIfNot("emptyCity")
            },
            ".state-id": {
                observe: "stateID",
                selectOptions: {
                    collection: "this.stateOptions"
                }
            },
            ".country-id": {
                observe: "countryID",
                selectOptions: {
                    collection: "this.countryOptions"
                }
            },
            ".empty-street": "emptyStreet",
            ".empty-city": "emptyCity",
            ".house-number": "houseNumber",
            ".preview": {
                observe: "addressFormShown",
                visible: function(e) {
                    return !e
                }
            },
            ".address-form": {
                observe: "addressFormShown",
                visible: !0
            },
            ".full-address": "fullAddress",
            ".edit-button": {
                observe: "editable",
                visible: !0
            }
        },
        initialize: function(e) {
            if (this.options = _.defaults(e, this.defaultOptions),
            this.addressModel = e.addressModel,
            this.dataModel = e.dataModel,
            this.model = new s.fromAddress(this.addressModel,this.dataModel),
            this.model.set({
                editable: e.editable,
                fullAddress: l.formatAddress(this.addressModel)
            }),
            this.showStatesSelection = this.dataModel.hasStates(),
            this._generateOptions(),
            this.options.showCitySelect ? this._initCitySelect() : this._initCityInput(),
            this.options.editStreet)
                return this._initStreetInput()
        },
        _generateOptions: function() {
            return this.countryOptions = _.map(this.dataModel.countries.objects, function(e) {
                return {
                    label: e.name,
                    value: e.getID()
                }
            }),
            this.stateOptions = _.map(this.dataModel.states.objects, function(e) {
                return {
                    label: e.name,
                    value: e.getID()
                }
            })
        },
        _generateCityOptions: function() {
            return this.cityOptions = this.dataModel.cities.getValidCities().map(function(e) {
                return {
                    label: e.attributes.name,
                    value: e.getID()
                }
            })
        },
        _generateCityNames: function() {
            return this.cityNames = this.dataModel.cities.getValidCities().map(function(e) {
                return e.attributes.name
            })
        },
        _generateStreetNames: function() {
            return this.streetNames = _.chain(this.dataModel.streets.objects).pluck("name").compact().value()
        },
        onRender: function() {
            return this.stickit(),
            this.stickit(this.model, _.extend(this.bindings, this.cityBindings)),
            this.ui.cityNameInput.typeahead({
                source: this.cityNames
            }),
            this.ui.streetNameInput.typeahead({
                source: this.streetNames
            })
        },
        _initCitySelect: function() {
            return this._generateCityOptions(),
            this.listenTo(this.dataModel.cities, r.UPDATED, function(e) {
                return function() {
                    return e._generateCityOptions(),
                    e.stickit(e.model, e.cityBindings)
                }
            }(this))
        },
        _initCityInput: function() {
            return this._generateCityNames(),
            this.listenTo(this.dataModel.cities, r.UPDATED, function(e) {
                return function() {
                    var t, i;
                    return e._generateCityNames(),
                    "function" == typeof (t = e.ui.cityNameInput).data && null != (i = t.data("typeahead")) ? i.source = e.cityNames : void 0
                }
            }(this))
        },
        _initStreetInput: function() {
            return this._generateStreetNames(),
            this.listenTo(this.dataModel.streets, r.UPDATED, function(e) {
                return function() {
                    var t, i;
                    return e._generateStreetNames(),
                    "function" == typeof (t = e.ui.streetNameInput).data && null != (i = t.data("typeahead")) ? i.source = e.streetNames : void 0
                }
            }(this))
        },
        serializeData: function() {
            return _.extend(Marionette.ItemView.prototype.serializeData.apply(this, arguments), {
                dataModel: this.dataModel,
                MAX_LENGTH: this.model.MAX_LENGTH,
                showStatesSelection: this.dataModel.hasStates(),
                showHouseNumberInput: this.options.editHouseNumber,
                showStreetInput: this.options.editStreet,
                showCitySelect: this.options.showCitySelect,
                fullAddress: l.formatAddress(this.addressModel)
            })
        },
        _formSubmitted: function(e) {
            var t, i;
            e.preventDefault(),
            i = this.model.toJSON(),
            t = new a(this.options.feature,i,{
                updateStreet: this.options.editStreet,
                getCityById: this.options.showCitySelect,
                updateHouseNumber: this.options.editHouseNumber
            }),
            this.dataModel.actionManager.add(t),
            this.addressModel = this.options.feature.getAddress(),
            this.model.set({
                fullAddress: l.formatAddress(this.addressModel)
            }),
            this.model.set({
                addressFormShown: !1
            }),
            this.trigger("addressChanged")
        },
        _editClicked: function() {
            return this.model.set({
                addressFormShown: !0
            })
        },
        _cancelClicked: function() {
            return this.model.set({
                addressFormShown: !1
            }),
            this.model.populateFromAddressModel(this.addressModel)
        },
        toggleEditable: function(e) {
            return e === !1 && this.model.set({
                addressFormShown: !1
            }),
            this.model.set({
                editable: e
            })
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i, n, s, r, o, a, l, u, c, d, h;
    for (i = "PARKING_LOT",
    s = _.without(W.Config.venues.categories, i),
    d = _.object(s, s),
    n = [],
    o = 0,
    l = s.length; o < l; o++)
        for (c = s[o],
        n.push({
            id: c
        }),
        h = W.Config.venues.subcategories[c],
        a = 0,
        u = h.length; a < u; a++)
            r = h[a],
            n.push({
                id: r
            });
    e.exports = {
        PARKING_LOT: i,
        mainCategories: s,
        mainCategoryMap: d,
        allCategories: n
    }
}
, function(e, t, i) {
    var n, s;
    s = i(9),
    n = Marionette.ItemView.extend({
        tagName: "li",
        className: "feed-item",
        triggers: {
            click: "click"
        },
        events: {
            "click .delete": "_onClickDelete"
        },
        initialize: function() {
            return this.model.on("change:selected", this._toggleSelected, this),
            this.model.on("delegate:delete", this._destroyModel, this),
            this.model.on("resolved", this._destroyModel, this)
        },
        serializeData: function() {
            return {
                title: this.model.getParameter("title"),
                shortMessage: this.model.getParameter("shortMessage"),
                timestamp: this.model.has("timestamp") ? this._formatTimestamp() : void 0
            }
        },
        _onClickDelete: function(e) {
            return e.stopPropagation(),
            this._destroyModel()
        },
        _destroyModel: function() {
            return this.$el.one("transitionend", function(e) {
                return function() {
                    return e.model.destroy()
                }
            }(this)),
            this.$el.addClass("deleting"),
            W.Report.feedAction("dismiss", this.model.get("type"))
        },
        _toggleSelected: function() {
            var e;
            if (e = this.model.get("selected"),
            this.$el.toggleClass("selected", e),
            e)
                return this.el.scrollIntoViewIfNeeded()
        },
        _formatTimestamp: function() {
            return s.dateString(this.model.get("timestamp"))
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    s = i(4),
    a = i(2),
    r = i(16),
    n = i(57),
    l = i(81),
    o = Backbone.Model.extend({
        type: a.MTE,
        CATEGORIES: {
            FESTIVAL: "FESTIVAL",
            PARADE: "PARADE",
            MARATHON: "MARATHON",
            RACE: "RACE",
            CYCLING: "CYCLING",
            CONCERT: "CONCERT",
            GAME_DAY: "GAME_DAY",
            PAPAL_VISIT: "PAPAL_VISIT",
            PRESIDENTIAL_VISIT: "PRESIDENTIAL_VISIT",
            VIP_VISIT: "VIP_VISIT",
            CRISIS: "CRISIS",
            CONSTRUCTION: "CONSTRUCTION",
            OTHER: "OTHER"
        },
        defaults: function() {
            return {
                id: null ,
                active: null ,
                category: null ,
                cityID: null ,
                comment: null ,
                contributors: [],
                createdBy: null ,
                createdOn: null ,
                description: null ,
                startDate: (new Date).toString("yyyy-MM-dd HH:mm"),
                endDate: null ,
                names: [],
                permissions: s.ALL_PERMISSIONS & ~this.PERMISSIONS.EDIT_TWEET_TEXT,
                updatedBy: null ,
                updatedOn: null ,
                url: null ,
                published: !1,
                ready: !1,
                uniqueName: null ,
                partners: [],
                tweetText: null ,
                twitterAccountsUrls: []
            }
        },
        writableAttributes: ["id", "category", "cityID", "comment", "startDate", "endDate", "names", "url", "partners", "tweetText"],
        clone: function() {
            var e, t;
            return e = Backbone.Model.prototype.clone.apply(this, arguments),
            t = $.extend(!0, [], this.get("names")),
            e.set({
                names: t
            }),
            e.model = this.model,
            e
        },
        getAddress: function() {
            return n.fromCityID(this.attributes.cityID, this.model)
        },
        getEnglishName: function() {
            var e;
            return e = _.where(this.attributes.names, {
                locale: "en"
            }),
            e.length > 0 ? e[0].value : null
        },
        getLocale: function() {
            var e;
            return e = this._getLocalNameObject(),
            null !== e ? e.locale : null
        },
        getLocalName: function() {
            var e;
            return e = this._getLocalNameObject(),
            null !== e ? e.value : null
        },
        _getLocalNameObject: function() {
            var e;
            return e = _.reject(this.attributes.names, function(e) {
                return "en" === e.locale
            }),
            e.length > 0 ? e[0] : null
        },
        canPublish: function() {
            return !this.isNew() && this.get("ready") && this.isAllowed(this.PERMISSIONS.PUBLISH)
        },
        canEditPartners: function() {
            return this.isAllowed(this.PERMISSIONS.MANIPULATE_PARTNERS)
        },
        canEditTweetText: function() {
            return this.isAllowed(this.PERMISSIONS.EDIT_TWEET_TEXT)
        },
        PERMISSIONS: {
            EDIT_PROPERTIES: 1,
            MANIPULATE_PARTNERS: 2,
            PUBLISH: 4,
            EDIT_TWEET_TEXT: 16
        }
    }),
    _.extend(o.prototype, _.omit(r.prototype, "clone", "initialize")),
    e.exports = o
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        template: "Waze/Modules/Toolbar/templates/layer-switcher-checkbox",
        tagName: "li",
        events: {
            "change input.toggle": "_onVisibilityChanged"
        },
        bindings: {
            "input.toggle": {
                attributes: [{
                    name: "disabled",
                    observe: "disabled"
                }]
            }
        },
        attributes: function() {
            return {
                "data-layer-id": this.model.get("layer").id
            }
        },
        className: function() {
            var e;
            if (e = this.model.get("layer"),
            e.draggable)
                return "draggable"
        },
        onRender: function() {
            return this.stickit()
        },
        _onVisibilityChanged: function(e) {
            var t, i;
            return t = this.model.get("layer"),
            i = e.target.checked,
            t.setVisibility(i)
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = {
        selectionRequiredOption: function(e) {
            var t;
            return t = Backbone.$("<option/>").prop("disabled", "disabled").prop("selected", "selected").text(e).val("")
        },
        selectOptionsFromList: function(e, t, i) {
            var n, s;
            return s = null ,
            n = e.map(function(e) {
                return {
                    value: e,
                    label: t(e)
                }
            }),
            void 0 !== i && (n = n.filter(function(e) {
                return e.value !== i
            }),
            s = {
                value: i,
                label: t(i)
            }),
            {
                collection: n,
                defaultOption: s
            }
        },
        checkboxList: function(e) {
            return {
                observe: e,
                getVal: function(e, t, i) {
                    var n, s;
                    return n = e.filter(":checked"),
                    s = n.toArray().map(function(e) {
                        return $(e).attr("value")
                    })
                },
                update: function(e, t, i, n) {
                    var s;
                    return s = t || [],
                    e.toArray().forEach(function(e) {
                        var t, i;
                        return t = $(e),
                        i = s.indexOf(t.attr("value")) > -1,
                        t.attr("checked", i)
                    })
                }
            }
        },
        requireAndEnableIfNot: function(e) {
            return [{
                observe: e,
                name: "required",
                onGet: function(e) {
                    return !e
                }
            }, {
                name: "disabled",
                observe: e
            }]
        },
        initBootstrapSupport: function() {
            return Backbone.Stickit.addHandler({
                selector: ".btn-group input[type=radio]",
                update: function(e, t) {
                    var i;
                    if (e.parent(".btn").removeClass("active"),
                    null !== t && "" !== t)
                        return i = e.filter("[value=" + t + "]"),
                        i.parent(".btn").addClass("active")
                }
            }),
            Backbone.Stickit.addHandler({
                selector: ".btn-group[data-type=boolean] input[type=radio]",
                onSet: function(e) {
                    return "true" === e
                }
            })
        }
    },
    i.initBootstrapSupport(),
    e.exports = i
}
, function(e, t, i) {
    e.exports = {
        virtualVertices: {
            strokeWidth: 2,
            strokeColor: "#00ece3",
            strokeOpacity: 1,
            pointRadius: 4,
            fillColor: "#ffffff",
            fillOpacity: .6
        },
        permalinkMarker: new OL.StyleMap({
            default: new OL.Style({
                externalGraphic: i(181),
                graphicYOffset: -53,
                graphicWidth: 37,
                graphicHeight: 53
            })
        })
    }
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    a = {
        0: "unknown",
        1: "big_direction_left",
        2: "big_direction_right",
        3: "big_direction_exit_left",
        4: "big_direction_exit_right",
        5: "big_direction_forward",
        6: "big_directions_roundabout",
        7: "big_directions_roundabout",
        8: "big_directions_roundabout_l",
        9: "big_directions_roundabout_l",
        10: "big_directions_roundabout_s",
        11: "big_directions_roundabout_s",
        12: "big_directions_roundabout_r",
        13: "big_directions_roundabout_r",
        14: "big_directions_roundabout_u",
        15: "big_directions_roundabout_u",
        16: "big_direction_end",
        17: "big_direction_exit_left",
        18: "big_direction_exit_right",
        20: "big_direction_u"
    },
    o = {
        pointerEvents: "none",
        strokeLinecap: "square",
        strokeWidth: 5
    },
    n = "#7ddd7f",
    r = "#9400ff",
    s = 8,
    l = new OpenLayers.StyleMap({
        default: new OpenLayers.Style(o,{
            context: {
                getInstructionCodeImages: function(e) {
                    return i(1028)("./" + a[e.attributes.code] + ".png")
                }
            }
        })
    }),
    l.addUniqueValueRules("default", "type", {
        session: {
            strokeColor: n,
            strokeWidth: 2,
            graphicZIndex: 0
        },
        drive: {
            strokeColor: n,
            strokeWidth: s,
            graphicZIndex: 2
        },
        driveArrow: {
            externalGraphic: i(980),
            rotation: "${angle}",
            graphicWidth: 9,
            graphicHeight: 5,
            graphicZIndex: 2
        },
        disconnect: {
            strokeColor: "#D04F2D",
            strokeWidth: s,
            strokeDashstyle: "dash",
            strokeDashArray: "32 16",
            graphicZIndex: 2
        },
        matchedSegment: {
            strokeWidth: s,
            strokeColor: "#00ece3",
            strokeOpacity: .7,
            graphicZIndex: 2
        },
        matchedSegmentArrow: {
            externalGraphic: i(180),
            rotation: "${angle}",
            fillOpacity: .7,
            graphicWidth: 9,
            graphicHeight: 5,
            graphicZIndex: 3
        },
        gutter: {
            strokeColor: "black",
            graphicZIndex: 2
        },
        pinA: {
            pointerEvents: "visiblePainted",
            externalGraphic: i(989),
            graphicWidth: 33,
            graphicHeight: 40,
            graphicYOffset: -35
        },
        pinB: {
            pointerEvents: "visiblePainted",
            externalGraphic: i(990),
            graphicWidth: 33,
            graphicHeight: 40,
            graphicYOffset: -35
        },
        suggestedRoute: {
            strokeWidth: s,
            strokeColor: r,
            graphicZIndex: 3
        },
        suggestedRouteArrow: {
            externalGraphic: i(982),
            rotation: "${angle}",
            graphicWidth: 9,
            graphicHeight: 5,
            graphicZIndex: 3
        },
        driveWeight: {
            label: "${weight}",
            fontSize: 12,
            fontColor: "white",
            strokeWidth: 3,
            strokeOpacity: 1,
            pointRadius: 14,
            fillColor: "#529554",
            strokeColor: n
        },
        routeInstruction: {
            externalGraphic: "${getInstructionCodeImages}",
            graphicWidth: 30,
            graphicHeight: 32
        },
        shortSegment: {
            strokeWidth: s,
            strokeColor: "#3a582c",
            graphicZIndex: 1
        },
        venue: {
            strokeColor: "#ea4e35",
            fillColor: "#ea4e35",
            strokeDashstyle: "dash",
            strokeOpacity: 1,
            strokeWidth: 2,
            fillOpacity: .3
        }
    }),
    e.exports = l
}
, function(e, t) {
    e.exports = function(e) {
        if ("function" != typeof e)
            throw TypeError(e + " is not a function!");
        return e
    }
}
, function(e, t, i) {
    var n = i(63)
      , s = i(15)("toStringTag")
      , r = "Arguments" == n(function() {
        return arguments
    }())
      , o = function(e, t) {
        try {
            return e[t]
        } catch (e) {}
    };
    e.exports = function(e) {
        var t, i, a;
        return void 0 === e ? "Undefined" : null === e ? "Null" : "string" == typeof (i = o(t = Object(e), s)) ? i : r ? n(t) : "Object" == (a = n(t)) && "function" == typeof t.callee ? "Arguments" : a
    }
}
, function(e, t) {
    e.exports = function(e) {
        if (void 0 == e)
            throw TypeError("Can't call method on  " + e);
        return e
    }
}
, function(e, t, i) {
    var n = i(67)
      , s = i(19).document
      , r = n(s) && n(s.createElement);
    e.exports = function(e) {
        return r ? s.createElement(e) : {}
    }
}
, function(e, t, i) {
    var n = i(45).f
      , s = i(66)
      , r = i(15)("toStringTag");
    e.exports = function(e, t, i) {
        e && !s(e = i ? e : e.prototype, r) && n(e, r, {
            configurable: !0,
            value: t
        })
    }
}
, function(e, t, i) {
    var n = i(175)("keys")
      , s = i(178);
    e.exports = function(e) {
        return n[e] || (n[e] = s(e))
    }
}
, function(e, t) {
    var i = Math.ceil
      , n = Math.floor;
    e.exports = function(e) {
        return isNaN(e = +e) ? 0 : (e > 0 ? n : i)(e)
    }
}
, function(e, t, i) {
    var n = i(95);
    e.exports = function(e) {
        return Object(n(e))
    }
}
, function(e, t, i) {
    "use strict";
    var n = i(750)(!0);
    i(171)(String, "String", function(e) {
        this._t = String(e),
        this._i = 0
    }, function() {
        var e, t = this._t, i = this._i;
        return i >= t.length ? {
            value: void 0,
            done: !0
        } : (e = n(t, i),
        this._i += e.length,
        {
            value: e,
            done: !1
        })
    })
}
, function(e, t, i) {
    i(755);
    for (var n = i(19), s = i(35), r = i(36), o = i(15)("toStringTag"), a = ["NodeList", "DOMTokenList", "MediaList", "StyleSheetList", "CSSRuleList"], l = 0; l < 5; l++) {
        var u = a[l]
          , c = n[u]
          , d = c && c.prototype;
        d && !d[o] && s(d, o, u),
        r[u] = r.Array
    }
}
, function(e, t, i) {
    var n, s = i(5), r = i(25), o = i(3), a = i(2), l = i(299);
    n = OpenLayers.Class(o, {
        point: null ,
        segments: null ,
        options: null ,
        node: null ,
        nodeAttributes: null ,
        initialize: function(e, t, i) {
            o.prototype.initialize.apply(this, [i]),
            this.point = e.clone(),
            delete this.point.parent,
            this.segments = t,
            this.options = i,
            this.nodeAttributes = {}
        },
        destroy: function() {
            this.model.nodes.get(this.node.getID()) || this.node.destroy(),
            this.options = null ,
            this.segment = null ,
            this.point = null ,
            this.node = null ,
            this.newID = null ,
            this.segments = null ,
            this.nodeAttributes = null ,
            o.prototype.destroy.apply(this)
        },
        createNode: function(e) {
            var t = new l({
                geometry: e
            });
            return t.attributes || (t.attributes = {}),
            OpenLayers.Util.applyDefaults(t.attributes, this.DEFAULT_NODE_ATTRIBUTES),
            t.attributes.segIDs = [],
            t.state = OpenLayers.State.INSERT,
            t.setID(this.model.nodes.generateUniqueID()),
            $.extend(!0, this.nodeAttributes, t.attributes),
            t
        },
        doAction: function() {
            if (this.node = this.createNode(this.point.clone()),
            this.model.nodes.put(this.node),
            null !== this.segments)
                for (var e = 0, t = this.segments.length; e < t; e++)
                    this.doSubAction(new r(this.node,this.segments[e],this.options))
        },
        undoAction: function() {
            o.prototype.undoAction.apply(this),
            this.model.nodes.remove(this.node)
        },
        redoAction: function() {
            this.model.nodes.put(this.node),
            o.prototype.redoAction.apply(this)
        },
        serialize: function() {
            var e, t = this.nodeAttributes;
            return t.id = this.node.getID(),
            t.geometry = this.point,
            e = {
                _objectType: a.NODE,
                action: s.TYPE.ADD,
                attributes: t
            }
        },
        DEFAULT_NODE_ATTRIBUTES: {
            permissions: 2147483647
        },
        CLASS_NAME: "Waze.Action.AddNode"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(3), r = i(38);
    i(2),
    n = OpenLayers.Class(s, {
        street: null ,
        initialize: function(e, t, i) {
            s.prototype.initialize.apply(this, arguments),
            this.city = t,
            this.name = e,
            this.isEmpty = i
        },
        doAction: function() {
            var e, t = null , i = !1;
            return t = this.isEmpty ? this.model.streets.getByAttributes({
                isEmpty: !0,
                cityID: this.city.getID()
            }).first() : this.model.streets.getByAttributes({
                name: this.name,
                cityID: this.city.getID()
            }).first(),
            t || (e = new r(null ,this.model.streets,{
                name: this.isEmpty ? "" : this.name,
                isEmpty: this.isEmpty,
                cityID: this.city.getID()
            }),
            t = e.object,
            this.doSubAction(e),
            i = !0),
            this.street = t,
            i
        },
        CLASS_NAME: "Waze.Action.AddOrGetStreet"
    }),
    e.exports = n
}
, function(e, t, i) {
    "use strict";
    var n = i(16)
      , s = i(4)
      , r = OL.Class(n, {
        defaults: {
            id: null ,
            countryID: null ,
            stateID: null ,
            name: null ,
            englishName: null ,
            geometry: null ,
            isEmpty: !1,
            permissions: s.ALL_PERMISSIONS
        },
        nested: {
            geometry: OL.Geometry
        },
        PERMISSIONS: {
            EDIT_PROPERTIES: 1
        },
        isEmpty: function() {
            return this.attributes.isEmpty === !0
        },
        hasName: function() {
            return "" !== this.attributes.name && null !== this.attributes.name && void 0 !== this.attributes.name
        },
        showMarker: function() {
            var e = null !== this.attributes.geometry;
            return e && !this.isEmpty()
        }
    });
    e.exports = r
}
, function(e, t, i) {
    e.exports = {
        default: i(722),
        __esModule: !0
    }
}
, function(e, t, i) {
    e.exports = {
        default: i(724),
        __esModule: !0
    }
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.__esModule = !0;
    var s = i(465)
      , r = n(s)
      , o = i(464)
      , a = n(o);
    t.default = function() {
        function e(e, t) {
            var i = []
              , n = !0
              , s = !1
              , r = void 0;
            try {
                for (var o, l = (0,
                a.default)(e); !(n = (o = l.next()).done) && (i.push(o.value),
                !t || i.length !== t); n = !0)
                    ;
            } catch (e) {
                s = !0,
                r = e
            } finally {
                try {
                    !n && l.return && l.return()
                } finally {
                    if (s)
                        throw r
                }
            }
            return i
        }
        return function(t, i) {
            if (Array.isArray(t))
                return t;
            if ((0,
            r.default)(Object(t)))
                return e(t, i);
            throw new TypeError("Invalid attempt to destructure non-iterable instance")
        }
    }()
}
, function(e, t, i) {
    var n, s, r;
    n = i(3),
    r = i(53),
    s = OL.Class(n, {
        initialize: function(e, t, i) {
            return this.node = e,
            this.navigable = t,
            n.prototype.initialize.apply(this, [i])
        },
        doAction: function() {
            var e, t, i, n, s, o, a, l, u;
            for (i = !1,
            e = this.node.allConnectionKeys(!0),
            n = this.navigable ? e.legal : e.all,
            s = 0,
            a = n.length; s < a; s++)
                if (t = n[s],
                o = t.from === t.to,
                t.from.areTurnsLocked(this.node) || this.doSubAction(t.from.lockTurns(this.node, !0)),
                !this.navigable || !o) {
                    if (u = this.forSegment,
                    u && u !== t.from && u !== t.to)
                        continue;
                    l = this.doSubAction(new r(t.from.getID(),this.node,t.to.getID(),this.navigable)),
                    l !== !1 && (i = !0)
                }
            return i
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r;
    n = i(3),
    r = i(7),
    s = OL.Class(n, {
        initialize: function(e, t, i, s) {
            this.node = e,
            this.originalSegment = t,
            this.newSegment = i,
            n.prototype.initialize.apply(this, [s])
        },
        doAction: function() {
            var e, t, i, n, s, r;
            if (!this.node)
                return !1;
            for (r = function() {
                var e, i, n, s;
                for (n = this.node.attributes.segIDs,
                s = [],
                e = 0,
                i = n.length; e < i; e++)
                    t = n[e],
                    s.push(this.model.segments.get(t));
                return s
            }
            .call(this),
            n = [],
            e = 0,
            i = r.length; e < i; e++)
                s = r[e],
                this.replaceConnections(s, "fromConnections"),
                this.replaceConnections(s, "toConnections"),
                this.replaceRestrictions(s, "fromRestrictions"),
                n.push(this.replaceRestrictions(s, "toRestrictions"));
            return n
        },
        replaceConnections: function(e, t) {
            var i, n, s;
            if (n = e.attributes[t],
            n[this.originalSegment.getID()])
                return s = _.clone(n),
                s[this.newSegment.getID()] = n[this.originalSegment.getID()],
                i = {},
                i[t] = s,
                this.doSubAction(new r(e,i))
        },
        replaceRestrictions: function(e, t) {
            var i, n, s;
            if (s = e.attributes[t],
            null != s ? s[this.originalSegment.getID()] : void 0)
                return n = e.cloneRestrictions(s),
                n[this.newSegment.getID()] = s[this.originalSegment.getID()],
                i = {},
                i[t] = n,
                this.doSubAction(new r(e,i))
        },
        CLASS_NAME: "Waze.Action.ReplaceNCSegmentID"
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r;
    n = i(3),
    r = i(7),
    s = OL.Class(n, {
        connectedSegments: null ,
        initialize: function(e, t, i, s) {
            return this.bigJunctionID = e,
            this.segments = t,
            this.action = i,
            n.prototype.initialize.apply(this, [s])
        },
        doAction: function() {
            var e, t;
            return e = this._updateConnectedSegments(this.segments, "from"),
            t = this._updateConnectedSegments(this.segments, "to"),
            this.connectedSegments = e.concat(t)
        },
        _updateConnectedSegments: function(e, t) {
            var i, n, o, a, l, u, c, d, h, p, g, m, f;
            for (i = [],
            u = 0,
            d = e.length; u < d; u++)
                for (g = e[u],
                p = g.attributes[t + "NodeID"],
                l = g.getConnectedSegmentsByDirection(t),
                i.concat(l),
                c = 0,
                h = l.length; c < h; c++)
                    a = l[c],
                    a.isDrivable() && (o = a.attributes.fromNodeID === p ? "from" : "to",
                    m = {},
                    n = o + "Crossroads",
                    f = _.clone(a.attributes[n]),
                    s.ADD_JUNCTION_TO_SEGMENT === this.action ? f.push(this.bigJunctionID) : f = _.without(f, this.bigJunctionID),
                    m[n] = f,
                    this.doSubAction(new r(a,m,{
                        dontSerialize: !0
                    })));
            return i
        },
        CLASS_NAME: "Waze.Action.UpdateBigJunctionConnectedSegments"
    }),
    _.extend(s, {
        ADD_JUNCTION_TO_SEGMENT: "add",
        REMOVE_JUNCTION_FROM_SEGMENT: "remove"
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    r = i(3),
    l = i(7),
    n = i(70),
    s = i(104),
    o = {
        cityIDField: "cityID",
        streetIDField: "streetID",
        updateStreet: !0,
        updateHouseNumber: !1
    },
    a = OL.Class(r, {
        initialize: function(e, t, i) {
            this.feature = e,
            this.attributes = t,
            null == i && (i = {}),
            r.prototype.initialize.apply(this, [i]),
            this.options = _.defaults(i, o)
        },
        doAction: function() {
            var e, t, i, r, o, a, u;
            return i = this.model.countries.get(this.attributes.countryID),
            o = this.model.states.get(this.attributes.stateID),
            this.options.getCityById && !this.attributes.emptyCity ? e = this.model.cities.get(this.attributes.cityID) : (t = new n(o,i,this.attributes.cityName,this.attributes.emptyCity),
            this.doSubAction(t),
            e = t.city),
            r = {},
            this.options.updateStreet ? (u = new s(this.attributes.streetName,e,this.attributes.emptyStreet),
            this.doSubAction(u),
            a = u.street,
            r[this.options.streetIDField] = a.getID()) : r[this.options.cityIDField] = e.getID(),
            this.options.updateHouseNumber && this.doSubAction(new l(this.feature,{
                houseNumber: this.attributes.houseNumber
            })),
            this.doSubAction(new l(this.feature,r)),
            !0
        },
        CLASS_NAME: "Waze.Action.UpdateFeatureAddress"
    }),
    e.exports = a
}
, function(e, t, i) {
    var n, s, r, o = {}.hasOwnProperty;
    n = i(5),
    r = i(6),
    s = OL.Class(n, {
        GEOMETRY_FIELDS: ["geometry", "fractionPoint"],
        houseNumberSet: null ,
        houseNumber: null ,
        attributes: null ,
        oldAttributes: null ,
        stateChanged: !1,
        changed: !1,
        initialize: function(e, t, i, s) {
            n.prototype.initialize.call(this, s),
            this.houseNumberSet = e,
            this.houseNumber = t,
            this.attributes = i,
            this.oldAttributes = {}
        },
        destroy: function() {
            return this.houseNumberSet = null ,
            this.houseNumber = null ,
            this.attributes = null ,
            this.oldAttributes = null ,
            n.prototype.destroy.apply(this, arguments)
        },
        doAction: function() {
            var e, t, i;
            i = this.attributes;
            for (e in i)
                o.call(i, e) && (t = i[e],
                null != this.houseNumber[e] && this.houseNumber[e] !== t && (this.changed = !0,
                this.oldAttributes[e] = this.houseNumber[e]));
            return this.changed && OL.Util.extend(this.houseNumber, this.attributes),
            this.houseNumberSet.state || (this.houseNumberSet.state = OL.State.UPDATE,
            this.stateChanged = !0),
            this.model.houseNumbers.changed(this.houseNumberSet),
            this.changed
        },
        undoAction: function() {
            var e;
            for (e in this.oldAttributes)
                r.isUndefined(this.oldAttributes[e]) ? delete this.attributes[e] : this.houseNumber[e] = this.oldAttributes[e];
            return this.stateChanged && (this.houseNumberSet.state = null ),
            this.model.houseNumbers.changed(this.houseNumberSet)
        },
        redoAction: function() {
            return this.houseNumberSet.state = OL.State.UPDATE,
            OL.Util.extend(this.houseNumber, this.attributes),
            this.model.houseNumbers.changed(this.houseNumberSet)
        },
        serialize: function() {
            var e, t;
            return e = {},
            OL.Util.extend(e, this.attributes),
            e.id = this.houseNumber.id,
            e.segID = this.houseNumberSet.id,
            t = {
                _objectType: this.houseNumberSet.type,
                action: n.TYPE.UPDATE,
                attributes: e
            }
        },
        CLASS_NAME: "Waze.Action.UpdateHouseNumber"
    }),
    e.exports = s
}
, function(e, t) {
    var i, n = [].indexOf || function(e) {
        for (var t = 0, i = this.length; t < i; t++)
            if (t in this && this[t] === e)
                return t;
        return -1
    }
    ;
    i = {
        DEFAULT: 0,
        MTE: 1
    },
    i.isValid = function(e) {
        return n.call(_.values(i), e) >= 0
    }
    ,
    e.exports = i
}
, function(e, t, i) {
    var n, s;
    s = i(12),
    n = OL.Class(s, {
        ErrorMessages: {
            406: I18n.t("login.form.error")
        },
        template: "login/login-form",
        events: {
            "submit form": "_onSubmit"
        },
        ui: {
            form: "form",
            loading: ".loading",
            errorMessage: ".error-message",
            username: ".username"
        },
        render: function() {
            var e;
            return e = s.prototype.render.apply(this, arguments),
            this.reset(),
            e
        },
        reset: function() {
            return this.ui.errorMessage.hide(),
            this.ui.loading.hide(),
            this.ui.username.focus()
        },
        _onSubmit: function(e) {
            var t, i;
            return this.ui.loading.show(),
            this.ui.errorMessage.hide(),
            i = this.ui.username.val(),
            t = this.ui.form.find(".password").val(),
            W.loginManager.login(i, t).fail(function(e) {
                return function(t) {
                    return e.ui.errorMessage.text(e.ErrorMessages[t.status] || I18n.t("login.form.server_error")).show()
                }
            }(this)).always(function(e) {
                return function() {
                    return e.ui.loading.hide()
                }
            }(this)),
            W.Report.loginAction("login_tap"),
            !1
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i, n;
    n = OpenLayers.Class({
        LocalStorageKey: "keyboardShortcuts",
        shortcutToAction: null ,
        events: null ,
        _futureShortcutsByAction: {},
        SpecialKeys: {
            32: "Space",
            38: "↑",
            39: "→",
            40: "↓",
            37: "←",
            9: "Tab",
            46: "Del",
            187: "=",
            189: "-"
        },
        $element: null ,
        Modifiers: {
            C: 1,
            S: 2,
            A: 4
        },
        BitToModifier: null ,
        ModifierToBrowserEvent: null ,
        BrowserEventToModifier: {
            altKey: "A",
            metaKey: "C",
            ctrlKey: "C",
            shiftKey: "S"
        },
        Groups: {
            default: {
                members: []
            },
            navigation: {
                members: []
            },
            editing: {
                members: []
            },
            drawing: {
                members: []
            },
            layers: {
                members: []
            }
        },
        Actions: null ,
        initialize: function(e) {
            this.shortcutToAction = {},
            this.Actions = {},
            e ? this.$element = e : this.$element = $(window),
            this.events = new OpenLayers.Events(this),
            this.registerActions(),
            W.app.on("change:loggedIn", function(e) {
                return function() {
                    e._enableShortcutsByRank(W.app.get("user"))
                }
            }(this))
        },
        _enableShortcutsByRank: function(e) {
            var t;
            if (t = null != e,
            W.Config.big_junctions.enable)
                return this.setActionEnabled("drawBigJunction", t && W.loginManager.canEditBigJunctions())
        },
        activate: function() {
            return this.$element.bind("keydown.shortcuts", OpenLayers.Function.bind(this.onKeyDown, this))
        },
        addAction: function(e, t) {
            var i;
            return t = t || {},
            OpenLayers.Util.applyDefaults(t, {
                changeable: !0,
                group: "default"
            }),
            t.name = e,
            i = this.Groups[t.group],
            i.members.push(t),
            t.id = e,
            t.enabled = !0,
            this.Actions[e] = t,
            this.events.addEventType(e)
        },
        setActionEnabled: function(e, t) {
            var i;
            return i = this.Actions[e],
            i.enabled = t
        },
        registerShortcut: function(e, t, n) {
            var s, r;
            if (null != this._futureShortcutsByAction[t] && (e = this._futureShortcutsByAction[t],
            n = !0,
            delete this._futureShortcutsByAction[t]),
            r = n ? i.prototype.fromString(e) : i.prototype.fromEmacsNotation(e),
            t = this.Actions[t])
                return s = this.shortcutToAction[r],
                s && (delete this.shortcutToAction[s.shortcut],
                delete s.shortcut),
                t.shortcut && delete this.shortcutToAction[t.shortcut],
                this.shortcutToAction[r] = t,
                t.shortcut = r
        },
        _registerShortcuts: function(e) {
            return Object.forEach(e, function(e) {
                return function(t, i) {
                    return e.registerShortcut(t, i)
                }
            }(this))
        },
        registerDefaultShortcuts: function() {
            this._registerShortcuts({
                "S+191": "showShortcutsDialog",
                "C+z": "undo",
                "CS+z": "redo",
                "C+s": "save",
                "AS+r": "reloadData",
                i: "drawSegment",
                o: "drawRoundabout",
                j: "drawBigJunction",
                l: "displayLayerSwitcher",
                s: "spreadArrows",
                a: "hideArrows",
                "S+z": "showAllArrows",
                "S+d": "colorEmptyStreets",
                "S+w": "closeStreetView",
                q: "disallowAllConnections",
                w: "allowAllConnections",
                m: "toggleMultipleSelection",
                r: "toggleSegmentDirection",
                e: "editSegmentAddress",
                h: "editHouseNumbers",
                c: "editClosures",
                t: "editRestrictions",
                "C+a": "selectEntireStreet",
                "C+38": "increaseSegmentLevel",
                "C+40": "decreaseSegmentLevel",
                38: "panUp",
                39: "panRight",
                40: "panDown",
                37: "panLeft",
                "S+38": "zoomIn",
                "S+40": "zoomOut",
                f: "search",
                221: "nextFeedItem",
                219: "prevFeedItem"
            }),
            W.Config.chat.enable && this.registerShortcut("A+c", "toggleChat")
        },
        bindToMap: function(e) {
            return e.events.on({
                addlayer: function(e) {
                    return function(t) {
                        return e.registerLayerAction(t.layer),
                        e.registerLayerShortcut(t.layer)
                    }
                }(this)
            })
        },
        registerLayerShortcut: function(e) {
            var t;
            if (e.accelerator) {
                if (e.shortcutKey)
                    t = e.shortcutKey;
                else {
                    if (!e.uniqueName)
                        return;
                    t = "S+" + e.uniqueName.charAt(0).toLowerCase()
                }
                return this.registerShortcut(t, e.accelerator)
            }
        },
        onKeyDown: function(e) {
            var t, n;
            if (!$(e.target).is(":input"))
                return n = new i(e),
                t = this.shortcutToAction[n],
                t && t.enabled === !0 ? (this.events.triggerEvent(t.id),
                !1) : void 0
        },
        registerActions: function() {
            return this.addAction("undo"),
            this.addAction("redo"),
            this.addAction("save"),
            this.addAction("delete", {
                changeable: !1
            }),
            this.addAction("search"),
            this.addAction("reloadData"),
            this.addAction("drawSegment", {
                group: "drawing"
            }),
            this.addAction("drawRoundabout", {
                group: "drawing"
            }),
            W.Config.big_junctions.enable && this.addAction("drawBigJunction", {
                group: "drawing",
                enabled: !1
            }),
            this.addAction("displayLayerSwitcher", {
                group: "layers"
            }),
            this.addAction("spreadArrows", {
                group: "layers"
            }),
            this.addAction("hideArrows", {
                group: "layers"
            }),
            this.addAction("showAllArrows", {
                group: "layers"
            }),
            this.addAction("colorEmptyStreets", {
                group: "layers"
            }),
            this.addAction("closeStreetView", {
                group: "layers"
            }),
            W.Config.chat.enable && this.addAction("toggleChat", {
                group: "layers"
            }),
            this.addAction("toggleMultipleSelection", {
                group: "editing"
            }),
            this.addAction("allowAllConnections", {
                group: "editing"
            }),
            this.addAction("disallowAllConnections", {
                group: "editing"
            }),
            this.addAction("toggleSegmentDirection", {
                group: "editing"
            }),
            this.addAction("editSegmentAddress", {
                group: "editing"
            }),
            this.addAction("editHouseNumbers", {
                group: "editing"
            }),
            this.addAction("editClosures", {
                group: "editing"
            }),
            this.addAction("editRestrictions", {
                group: "editing"
            }),
            this.addAction("selectEntireStreet", {
                group: "editing"
            }),
            this.addAction("increaseSegmentLevel", {
                group: "editing"
            }),
            this.addAction("decreaseSegmentLevel", {
                group: "editing"
            }),
            this.addAction("showShortcutsDialog", {
                changeable: !1
            }),
            this.addAction("panUp", {
                group: "navigation"
            }),
            this.addAction("panDown", {
                group: "navigation"
            }),
            this.addAction("panLeft", {
                group: "navigation"
            }),
            this.addAction("panRight", {
                group: "navigation"
            }),
            this.addAction("zoomIn", {
                group: "navigation"
            }),
            this.addAction("zoomOut", {
                group: "navigation"
            }),
            this.addAction("nextFeedItem"),
            this.addAction("prevFeedItem")
        },
        registerLayersActions: function(e) {
            return e.forEach(function(e) {
                return function(t) {
                    return e.registerLayerAction(t),
                    e.registerLayerShortcut(t)
                }
            }(this))
        },
        registerLayerAction: function(e) {
            var t, i;
            if (e.displayInLayerSwitcher)
                return i = new RegExp(" ","g"),
                t = "toggle" + e.name.replace(i, ""),
                this.addAction(t, {
                    group: "layers",
                    layerToggle: !0,
                    layerKey: e.uniqueName
                }),
                e.accelerator = t
        },
        persist: function() {
            return localStorage.setItem(this.LocalStorageKey, JSON.stringify(this.serialize()))
        },
        restore: function() {
            var e, t;
            if (t = localStorage.getItem(this.LocalStorageKey),
            !t)
                return !1;
            try {
                t = JSON.parse(t)
            } catch (t) {
                return e = t,
                !1
            }
            return Object.forEach(t, function(e) {
                return function(t, i) {
                    return null != e.Actions[t] ? e.registerShortcut(i, t, !0) : e._futureShortcutsByAction[t] = i
                }
            }(this)),
            !0
        },
        serialize: function() {
            var e;
            return e = {},
            Object.values(this.Actions).forEach(function(t) {
                var n;
                return n = t.shortcut || i.getEmpty(),
                e[t.id] = n.toString()
            }),
            e
        },
        CLASS_NAME: "Waze.Control.KeyboardShortcuts"
    }),
    i = OpenLayers.Class({
        ctrlKey: !1,
        metaKey: !1,
        altKey: !1,
        shiftKey: !1,
        keyCode: null ,
        initialize: function(e) {
            if (e)
                return this.ctrlKey = e.ctrlKey,
                this.altKey = e.altKey,
                this.shiftKey = e.shiftKey,
                this.metaKey = e.metaKey,
                this.keyCode = e.which
        },
        toString: function() {
            var e;
            return e = 0,
            Object.forEach(n.prototype.BrowserEventToModifier, function(t) {
                return function(i, s) {
                    if (t[i])
                        return e |= n.prototype.Modifiers[s]
                }
            }(this)),
            e + "," + this.keyCode
        },
        isEmpty: function() {
            return this.keyCode === -1 || "-1" === this.keyCode
        },
        fromString: function(e) {
            var t, s, r, o;
            return r = e.split(","),
            s = r.first(),
            t = r.last(),
            o = new i,
            Object.forEach(n.prototype.BrowserEventToModifier, function(e, t) {
                if (n.prototype.Modifiers[t] & s)
                    return o[e] = !0
            }),
            o.keyCode = t,
            o
        },
        fromEmacsNotation: function(e) {
            var t, s, r, o;
            return r = e.split("+"),
            s = r.first(),
            t = r.last(),
            o = new i,
            1 === r.length && (s = ""),
            1 === t.length && (t = t.toUpperCase().charCodeAt()),
            o.keyCode = t,
            s.split("").forEach(function(e) {
                var t;
                return t = n.prototype.ModifierToBrowserEvent[e],
                o[t] = !0
            }),
            o
        }
    }),
    i.getEmpty = function() {
        var e;
        return e = new i,
        e.keyCode = -1,
        e
    }
    ,
    n.prototype.BitToModifier = {},
    Object.forEach(n.prototype.Modifiers, function(e, t) {
        return n.prototype.BitToModifier[t] = e
    }),
    n.prototype.ModifierToBrowserEvent = {},
    Object.forEach(n.prototype.BrowserEventToModifier, function(e, t) {
        return n.prototype.ModifierToBrowserEvent[t] = e
    }),
    n.KeyStroke = i,
    e.exports = n
}
, function(e, t, i) {
    var n, s, r;
    n = i(4),
    s = i(8),
    r = OpenLayers.Class(n, {
        nested: {
            geometry: OL.Geometry,
            fractionPoint: OL.Geometry
        },
        isLeft: !1,
        projectionLonLat: null ,
        closestSegment: null ,
        calculateProjection: function(e) {
            var t, i, n, s, r, o;
            return r = new OL.Geometry.Point(this.geometry.x,this.geometry.y),
            t = e.distanceTo(r, {
                details: !0
            }),
            i = t.line,
            n = {
                x: i.x1,
                y: i.y1
            },
            s = {
                x: i.x2,
                y: i.y2
            },
            s.y > n.y && (o = [s, n],
            n = o[0],
            s = o[1]),
            this.isLeft = (s.x - n.x) * (r.y - n.y) - (s.y - n.y) * (r.x - n.x) <= 0,
            this.projectionLonLat = new OL.LonLat(t.x0,t.y0),
            this.closestSegment = t.model
        },
        getFractionFromProjection: function() {
            return new OL.Geometry.Point(this.projectionLonLat.lon,this.projectionLonLat.lat)
        },
        changedSegment: function() {
            return this.parent.id !== this.closestSegment.getID()
        },
        clone: function() {
            var e, t;
            return e = new r({
                fractionPoint: this.fractionPoint.clone(),
                projectionLonLat: null != (t = this.projectionLonLat) ? t.clone() : void 0,
                number: this.number,
                valid: this.valid,
                forced: this.forced,
                id: this.id,
                side: this.side,
                version: this.version,
                geometry: this.geometry.clone()
            }),
            e.parent = this.parent,
            e
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    s = i(4),
    o = i(16),
    l = i(563),
    a = i(119),
    n = i(57),
    r = OL.Class(o, {
        defaults: {
            name: "",
            rank: 0,
            permissions: s.ALL_PERMISSIONS
        },
        nested: {
            geometry: OL.Geometry,
            connections: a
        },
        _pathCache: null ,
        initialize: function(e) {
            o.prototype.initialize.apply(this, arguments),
            _.defaults(this.attributes, this.defaults)
        },
        merge: function() {
            return this._pathCache = null ,
            o.prototype.merge.apply(this, arguments)
        },
        getAddress: function() {
            return n.fromCityID(this.attributes.cityID, this.model)
        },
        getSegmentCount: function() {
            return this.attributes.segIDs.length
        },
        getPossiblePaths: function() {
            return null != this._pathCache ? this._pathCache : this._pathCache = l.for(this).getAllPaths()
        },
        getLegalPaths: function() {
            return _.reject(this.getPossiblePaths(), function(e) {
                return !e.isLegal()
            })
        },
        _getAccessPoints: function(e) {
            var t, i, n, s, r, o, a, l;
            for (i = {},
            a = _.sortBy(this.getPossiblePaths(), function(e) {
                return e.getEntryPoint().getID()
            }),
            r = this.attributes.connections,
            n = 0,
            s = a.length; n < s; n++)
                o = a[n],
                t = o[e](),
                l = i[t.getID()],
                null != l ? t = l : i[t.getID()] = t,
                o = o.clone(),
                o.set({
                    navigable: _.any(r, function(e) {
                        return e.equals(o)
                    })
                }),
                t.get("paths").push(o);
            return _.values(i)
        },
        getEntryPoints: function() {
            return this._getAccessPoints("getEntryPoint")
        },
        getExitPoints: function() {
            return this._getAccessPoints("getExitPoint")
        },
        getShortSegments: function() {
            return W.model.segments.getByIds(this.attributes.segIDs)
        },
        PERMISSIONS: {
            EDIT_GEOMETRY: 1,
            EDIT_PROPERTIES: 2,
            DELETE: 4
        },
        CLASS_NAME: "Waze.Feature.FeatureVector.BigJunction"
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o, a;
    o = i(134),
    s = i(556),
    r = i(8),
    n = ["fromSegID", "fromSegFwd", "toSegID", "toSegFwd", "junctionID"],
    a = Backbone.Model.extend({
        defaults: function() {
            return {
                navigable: !1,
                segmentPath: []
            }
        },
        getGraphNodes: function() {
            var e, t;
            return t = this.getEntryGraphNode(),
            e = this.get("segmentPath").map(function(e) {
                var i, n;
                return n = W.model.segments.get(e),
                i = o.oppositeOf(n, t.node),
                t = i,
                i
            }),
            [this.getEntryGraphNode()].concat(e).concat([this.getExitGraphNode()])
        },
        getEntryGraphNode: function() {
            return this._getGraphNodeForDirection("from")
        },
        getExitGraphNode: function() {
            return this._getGraphNodeForDirection("to")
        },
        getEntryPoint: function() {
            return new s({
                graphNode: this.getEntryGraphNode(),
                type: s.prototype.TYPE.ENTRY
            })
        },
        getExitPoint: function() {
            return new s({
                graphNode: this.getExitGraphNode(),
                type: s.prototype.TYPE.EXIT
            })
        },
        _getGraphNodeForDirection: function(e) {
            var t;
            return t = W.model.segments.get(this.get(e + "SegID")),
            e = this.get(e + "SegFwd"),
            o.forSegmentInDirection(t, e)
        },
        getGeometry: function(e) {
            var t;
            return t = this._getVerticeArrays(),
            (null != e ? e.includeEntryPoint : void 0) || t.shift(),
            (null != e ? e.includeExitPoint : void 0) || t.pop(),
            new OL.Geometry.LineString(Array.prototype.concat.apply([], t))
        },
        getStenciledGeometry: function(e) {
            var t, i, n, s, o;
            return o = this._getVerticeArrays(),
            t = new OL.Geometry.LineString(_.first(o)),
            n = new OL.Geometry.LineString(_.last(o)),
            i = r.splitLineStringWithPolygon(t, e),
            s = r.splitLineStringWithPolygon(n, e),
            null != i && (o[0] = i[1].components),
            null != s && (o[o.length - 1] = s[0].components),
            new OL.Geometry.LineString(Array.prototype.concat.apply([], o))
        },
        _getVerticeArrays: function() {
            var e;
            return e = this.getGraphNodes(),
            e.map(function(e) {
                var t;
                return t = e.segment.geometry.clone().components,
                e.isForward || t.reverse(),
                t
            })
        },
        hasRestrictions: function() {
            return this.getGraphNodes().some(function(e, t, i) {
                var n, s, r;
                return s = !1,
                n = !1,
                t > 0 && t < i.length - 1 && (s = e.hasRestrictions()),
                t < i.length - 1 && (r = i[t + 1].segment,
                n = e.hasRestrictionsToSegment(r)),
                s || n
            })
        },
        trivialConnectionExists: function() {
            var e, t;
            return e = this.getEntryGraphNode(),
            t = this.getExitGraphNode(),
            e.segment.isTurnAllowed(t.segment, e.node) && e.node.isTurnAllowedBySegDirections(e.segment, t.segment)
        },
        isLegal: function() {
            return !this.hasRestrictions() && !this.trivialConnectionExists()
        },
        equals: function(e) {
            var t, i, s, r, o, a, l, u, c;
            for (s = 0,
            o = n.length; s < o; s++)
                if (t = n[s],
                this.attributes[t] !== e.attributes[t])
                    return !1;
            if (l = e.attributes.segmentPath,
            c = this.attributes.segmentPath,
            l.length !== c.length)
                return !1;
            for (i = r = 0,
            a = c.length; r < a; i = ++r)
                if (u = c[i],
                u !== l[i])
                    return !1;
            return !0
        },
        clone: function() {
            var e, t;
            return e = Backbone.Model.prototype.clone.apply(this, arguments),
            t = this.get("segmentPath"),
            e.set({
                segmentPath: _.clone(t)
            })
        }
    }),
    e.exports = a
}
, function(e, t) {
    var i;
    i = {
        FIXED: 0,
        NOT_A_PROBLEM: 1,
        AUTO: 2
    },
    e.exports = i
}
, function(e, t) {
    var i;
    i = {
        SPEED_CAMERA: 1
    },
    e.exports = {
        FWD: i,
        REV: i,
        FLAGS: {
            TUNNEL: 1,
            BRIDGE: 2,
            PRIVATE: 4,
            FERRY: 8,
            UNPAVED: 16
        }
    }
}
, function(e, t, i) {
    var n, s, r, o;
    n = i(11),
    r = i(120),
    o = {
        open: "open",
        solved: "solved",
        rejected: "rejected"
    },
    s = OL.Class(OL.Marker, {
        model: null ,
        initialize: function(e) {
            var t, i, s;
            this.model = e,
            t = new n("map-problem"),
            i = this.model.getLocation(),
            s = new OL.LonLat(i.x,i.y),
            OL.Marker.prototype.initialize.call(this, s, t),
            this.render(),
            this.icon.$div.data("model", this.model)
        },
        render: function() {
            var e, t;
            return e = this.icon.$div,
            e.attr("data-id", this.model.getID()),
            t = e.hasClass("selected"),
            e.removeClass(),
            e.addClass("map-problem"),
            e.toggleClass("selected", t),
            e.toggleClass("uneditable", !this.model.editable),
            e.toggleClass("recently-closed", this.model.isRecentlyClosed()),
            e.addClass(this.model.attributes.severity),
            e.addClass(this._getState())
        },
        _getState: function() {
            return this.model.attributes.open ? o.open : this.model.attributes.resolution === r.FIXED ? o.solved : o.rejected
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o;
    o = i(21),
    r = i(83),
    n = OL.Class(o, {
        getSenderID: function() {
            return this.get("from").id
        },
        addLine: function(e) {
            var t;
            return t = this.get("body") + "\n" + e,
            this.set("body", t)
        },
        getType: function() {
            return this.get("type") || "normal"
        },
        isSystem: function() {
            return "normal" !== this.getType()
        }
    }),
    s = OL.Class(r, {
        model: n,
        _beforeAdd: function(e) {
            var t;
            return t = this.last(),
            null == t || t.getSenderID() !== e.getSenderID() || (this.trigger("beforeMessageUpdated", t),
            t.addLine(e.get("body")),
            this.trigger("messageUpdated", t),
            !1)
        }
    }),
    e.exports = {
        ChatMessage: n,
        Collection: s
    }
}
, function(e, t, i) {
    var n, s;
    s = i(21),
    n = OL.Class(s, {
        getCenter: function() {
            var e;
            return e = this.get("center"),
            null != e ? new OL.LonLat(e.lon,e.lat) : null
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i;
    i = {},
    i.prototype = {
        _getEvents: function() {
            return this._events || (this._events = new OpenLayers.Events(this))
        },
        on: function(e, t, i) {
            return null == i && (i = null ),
            this._getEvents().register(e, i, t)
        },
        off: function(e, t, i) {
            var n;
            return null != (n = this._events) ? n.unregister(e, i, t) : void 0
        },
        trigger: function() {
            var e;
            return e = this._getEvents(),
            e.triggerEvent.apply(e, arguments)
        }
    },
    e.exports = i
}
, function(e, t, i) {
    var n, s, r = {}.hasOwnProperty;
    s = i(6),
    n = function() {
        function e(e) {
            var t, i;
            this.events = new OL.Events;
            for (t in e)
                r.call(e, t) && (i = e[t],
                this[t] = i);
            this.Codes.contains(this.code) || (this.code = null ),
            this.code || (this.code = this.abbrToLocation[this.abbr],
            this.code || (this.code = "row")),
            this.locale || (this.locale = this.DefaultLocale),
            this.Locales[this.locale] && (this.locale = this.Locales[this.locale])
        }
        return e.prototype.storeKey = "editorLocation",
        e.prototype.abbrToLocation = {
            US: "usa",
            CA: "usa",
            IL: "il"
        },
        e.prototype.Codes = ["row", "usa", "il"],
        e.prototype.DefaultLocale = "en",
        e.prototype.Locales = {
            iw: "he",
            ji: "yi",
            in: "id",
            "en-UK": "en-GB",
            "en-US": "en"
        },
        e.prototype.persist = function() {
            return s.localStorage.set(this.storeKey, {
                code: this.code,
                locale: this.locale
            })
        }
        ,
        e.prototype.change = function(e) {
            if (e !== this.code)
                return this.code = e,
                this.persist(),
                this.events.triggerEvent("change")
        }
        ,
        e.prototype.changeAndRemovePermalink = function(e) {
            return this.change(e),
            window.location = window.location.pathname
        }
        ,
        e.prototype.setLocale = function(e) {
            if (e !== this.locale)
                return this.locale = e,
                this.persist()
        }
        ,
        e.prototype.redirectToLocale = function() {
            var e;
            if (this._shouldRedirectToLocle())
                return e = this.locale === this.DefaultLocale ? "/editor" + window.location.search : "/" + this.locale + "/editor" + window.location.search,
                window.location = e
        }
        ,
        e.prototype._shouldRedirectToLocle = function() {
            return this.locale !== I18n.locale && _.contains(I18n.availableLocales, this.locale)
        }
        ,
        e.getFromIP = function() {
            var t;
            return null != this._promise ? this._promise : (t = $.Deferred(),
            $.get("/WAS/country_by_ip").done(function(i) {
                var n;
                return n = new e(i),
                n.persist(),
                t.resolve(n)
            }).error(function() {
                var i;
                return i = new e,
                i.persist(),
                t.resolve(i)
            }),
            this._promise = t.promise())
        }
        ,
        e.getCurrent = function() {
            return this.restore() || this.getFromIP()
        }
        ,
        e.restore = function() {
            var t;
            return t = s.localStorage.get(this.prototype.storeKey),
            t ? new e(t) : null
        }
        ,
        e.normalizeCode = function(e) {
            return e = e.toLowerCase(),
            "na" === e && (e = "usa"),
            e
        }
        ,
        e
    }(),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    n = i(4),
    s = OL.Class(n, {
        TYPE: {
            MANAGED: "managed",
            DRIVE: "drive"
        },
        nested: {
            geometry: OL.Geometry
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        defaults: {
            uuid: null ,
            name: null
        },
        initialize: function() {
            if (null === this.get("uuid"))
                return this.set({
                    uuid: this.id
                })
        },
        getName: function() {
            var e, t;
            return e = this.get("name"),
            null != e ? e : (t = this._getNameFromUuid(this.get("uuid")),
            t.then(function(e) {
                return function(t) {
                    return e.set({
                        name: t
                    })
                }
            }(this), function(e) {
                return function() {
                    return e.set({
                        name: e.get("uuid")
                    }),
                    $.Deferred().resolve()
                }
            }(this)).then(function(e) {
                return function() {
                    return e.get("name")
                }
            }(this)))
        },
        _getNameFromUuid: function(e) {
            var t;
            return t = $.get(W.Config.places_api.url.details, {
                placeid: e,
                key: W.Config.places_api.key
            }),
            t.then(function(e) {
                return "OK" === e.status ? e.result.name + ", " + e.result.formatted_address : $.Deferred().reject()
            })
        },
        toJSON: function() {
            return this.get("uuid")
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o;
    n = i(16),
    s = i(126),
    o = {
        INVALID_ENV: "INVALID_ENV",
        GENERAL: "GENERAL",
        TEMP_FREEZE: "TEMP_FREEZE"
    },
    r = OL.Class(n, {
        nested: {
            geometry: OL.Geometry
        },
        parse: function(e) {
            return null != e.env && (e.env = s.normalizeCode(e.env)),
            n.prototype.parse.apply(this, arguments)
        }
    }),
    r.TYPE = o,
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    n = i(4),
    s = OL.Class(n, {
        nested: {
            geometry: OL.Geometry
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    s = i(81),
    n = Backbone.Model.extend({
        defaults: {
            ignorable: !1,
            code: 700,
            description: null ,
            geometry: null
        },
        nested: {
            geometry: OL.Geometry
        }
    }),
    _.extend(n.prototype, s),
    e.exports = n
}
, function(e, t) {
    var i, n;
    n = Backbone.Model.extend({
        ALL_DAY_FROM: "00:00",
        ALL_DAY_TO: "00:00",
        defaults: function() {
            return {
                fromHour: "09:00",
                toHour: "17:00",
                days: this.defaultDays.clone()
            }
        },
        defaultDays: [1, 2, 3, 4, 5],
        isAllDay: function() {
            return this.get("fromHour") === this.ALL_DAY_FROM && this.get("toHour") === this.ALL_DAY_TO
        },
        setAllDay: function() {
            return this.set("fromHour", this.ALL_DAY_FROM),
            this.set("toHour", this.ALL_DAY_TO)
        }
    }),
    i = Backbone.Collection.extend({
        model: n
    }),
    e.exports = {
        OpeningHour: n,
        Collection: i
    }
}
, function(e, t, i) {
    var n, s, r = {}.hasOwnProperty;
    n = i(84),
    s = n.extend({
        __setSuggestedValue: function(e) {
            var t;
            return e.categoryAttributes = {
                PARKING_LOT: (t = {},
                t["" + this.get("fieldName")] = this.get("suggestedValue"),
                t)
            }
        }
    }),
    s.build = function(e, t) {
        var i, n, o, a, l, u;
        l = [];
        for (n in e)
            r.call(e, n) && (u = e[n],
            i = null != (o = t.attributes.categoryAttributes) && null != (a = o.PARKING_LOT) ? a[n] : void 0,
            _.isEqual(u, i) || l.push(new s({
                fieldName: n,
                suggestedValue: u,
                venue: t
            },{
                parse: !0
            })));
        return l
    }
    ,
    e.exports = s
}
, function(e, t) {
    var i;
    i = OL.Class({
        segment: null ,
        node: null ,
        isForward: !0,
        initialize: function(e, t) {
            if (this.segment = e,
            this.node = t,
            this.segment.attributes.fromNodeID === this.node.getID())
                return this.isForward = !1
        },
        getConnectedGraphNodes: function() {
            var e, t;
            return e = W.model.segments.getByIds(this.node.attributes.segIDs),
            t = e.filter(function(e) {
                return function(t) {
                    return e.segment.isTurnAllowed(t, e.node) && e.node.isTurnAllowedBySegDirections(e.segment, t)
                }
            }(this)),
            t.map(function(e) {
                return function(t) {
                    return i.oppositeOf(t, e.node)
                }
            }(this))
        },
        getOpposite: function() {
            return i.forSegmentInDirection(this.segment, !this.isForward)
        },
        hasRestrictions: function() {
            var e;
            return e = this.getDirectedAttribute("Restrictions"),
            null != e && e.length > 0
        },
        hasRestrictionsToSegment: function(e) {
            var t;
            return t = this.segment.getRestrictionsAtNode(this.node) || {},
            null != t[e.getID()]
        },
        getDirectedAttribute: function(e) {
            var t;
            return t = this.isForward ? "fwd" : "rev",
            this.segment.attributes[t + e]
        },
        toString: function() {
            return this.getID()
        },
        getID: function() {
            return "segment: " + this.segment.getID() + ", node: " + this.node.getID() + ", isForward: " + this.isForward
        }
    }),
    i.for = function(e, t) {
        return new i(e,t)
    }
    ,
    i.oppositeOf = function(e, t) {
        return i.for(e, t).getOpposite()
    }
    ,
    i.forSegmentInDirection = function(e, t) {
        var n, s;
        return s = t ? e.attributes.toNodeID : e.attributes.fromNodeID,
        n = W.model.nodes.get(s),
        new i(e,n)
    }
    ,
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    a = i(32),
    l = i(568),
    n = i(566),
    o = i(571),
    r = i(569),
    s = Marionette.LayoutView.extend({
        compositeSegment: null ,
        regions: {
            main: ".main"
        },
        template: "Waze/Modules/Closures/templates/layout",
        initialize: function(e) {
            return this.pannable = e.pannable,
            this.listViewConfig = e.listViewConfig,
            this.editViewConfig = e.editViewConfig,
            this.allClosures = e.allClosures,
            this.compositeSegment = e.compositeSegment,
            this.segments = this.compositeSegment.children.clone(),
            this.dataModel = e.dataModel,
            this._reverseSegments = _.clone(this.compositeSegment.reverseSegments)
        },
        onBeforeShow: function() {
            return this._showClosures()
        },
        _showClosures: function(e) {
            var t, i, n;
            return null == e && (e = {}),
            n = l.getSharedClosures(this.segments, this._reverseSegments, this.allClosures),
            i = _.extend({
                dataModel: this.dataModel,
                collection: n,
                showActivateRepoMessage: !this.options.repoActive,
                showSaveMessage: !this.options.canSaveClosures,
                canEdit: this._areClosuresEditable(),
                canAdd: this.options.canAdd
            }, this.listViewConfig, e),
            t = new o(i),
            t.on("add", function(e) {
                return function() {
                    return e.newClosure()
                }
            }(this)),
            t.on("edit", function(e) {
                return function(t) {
                    return e.editClosure(t)
                }
            }(this)),
            t.on("delete", function(e) {
                return function(t) {
                    return e.deleteClosure(t)
                }
            }(this)),
            t.on("applyToAll", function(e) {
                return function(t) {
                    return e.applyClosureToAllSegments(t)
                }
            }(this)),
            t.on("locate", function(e) {
                return function(t) {
                    var i, n;
                    return i = _.first(t.attributes.segments),
                    n = i.geometry.getBounds().getCenterLonLat(),
                    e.pannable.panTo(n)
                }
            }(this)),
            this._show(t)
        },
        _areClosuresEditable: function() {
            return this.compositeSegment.canEditClosures() && this.options.repoActive && this.options.canSaveClosures
        },
        newClosure: function() {
            var e;
            return e = this.createSharedClosure(),
            this._createEditView(e, {
                newClosure: !0
            }).on("save", function(t) {
                return function() {
                    return t.saveNewClosure(e)
                }
            }(this))
        },
        editClosure: function(e) {
            return this._createEditView(e).on("save", function(t) {
                return function() {
                    return t.saveExistingClosure(e)
                }
            }(this))
        },
        _createEditView: function(e, t) {
            var i;
            return null == t && (t = {}),
            _.defaults(t, {
                newClosure: !1
            }),
            _.extend(t, this.editViewConfig),
            t.model = e,
            t.availableEvents = this.dataModel.majorTrafficEvents.getObjectArray(),
            i = new r(t),
            i.on("editCancelled", function(e) {
                return function() {
                    return i.destroy(),
                    e._showClosures()
                }
            }(this)),
            this._show(i),
            i
        },
        applyClosureToAllSegments: function(e) {
            var t;
            return t = n.applyToAllSegments(e, this.segments, this._reverseSegments),
            this._runAction(t, {
                loadingMessage: I18n.t("closures.loading.apply_to_all"),
                successMessage: I18n.t("closures.success.apply_to_all")
            })
        },
        _show: function(e) {
            return this.view = e,
            this.main.show(this.view)
        },
        deleteClosure: function(e) {
            var t, i;
            if (i = e.isPresent("reason") ? I18n.t("closures.delete_confirm", {
                info: e.get("reason")
            }) : I18n.t("closures.delete_confirm_no_reason"),
            confirm(i))
                return t = n.delete(e),
                this._runAction(t, {
                    loadingMessage: I18n.t("closures.loading.delete"),
                    successMessage: I18n.t("closures.success.delete")
                })
        },
        saveNewClosure: function(e) {
            var t;
            return t = n.add(e),
            this._runAction(t, {
                loadingMessage: I18n.t("closures.loading.add"),
                successMessage: I18n.t("closures.success.add")
            })
        },
        saveExistingClosure: function(e) {
            var t;
            return t = n.update(e),
            this._runAction(t, {
                loadingMessage: I18n.t("closures.loading.update"),
                successMessage: I18n.t("closures.success.update")
            })
        },
        _runAction: function(e, t) {
            return null == t && (t = {}),
            this.view.message.showLoading(t.loadingMessage),
            this._disableControls(),
            t.actions = [e],
            W.controller.save(t).done(function(i) {
                return function(n) {
                    var s, r;
                    return s = !_.isEmpty(null != (r = n.unsavedFeatures) ? r.roadClosures : void 0),
                    s ? i._handlePartialSuccess(n.unsavedFeatures.roadClosures, e) : i._showClosures({
                        successMessage: t.successMessage
                    })
                }
            }(this)).fail(function(t) {
                return function(i) {
                    return t._onError(i, e)
                }
            }(this)).always(function(e) {
                return function() {
                    return e._enableControls()
                }
            }(this))
        },
        _enableControls: function() {
            return this._getControls().removeClass("disabled")
        },
        _disableControls: function() {
            return this._getControls().addClass("disabled")
        },
        _getControls: function() {
            return this.main.$el.find("a, .btn, button, input, textarea, select")
        },
        _handlePartialSuccess: function(e, t) {
            var i, n;
            return this._undoFailedActions(e, t),
            n = _(e).map(function(e) {
                return e.details
            }),
            i = I18n.t("closures.partial_error") + ": " + n.join(",\n"),
            this._showClosures({
                errorMessage: i
            })
        },
        _undoFailedActions: function(e, t) {
            var i, n, s, r, o, a;
            if (null != t.subActions) {
                for (r = t.subActions,
                o = [],
                n = 0,
                s = r.length; n < s; n++)
                    a = r[n],
                    null != a.subActions ? o.push(this._undoFailedActions(e, a)) : null != a.closure ? (i = a.closure.getID(),
                    e[i] ? o.push(a.undoAction()) : o.push(void 0)) : o.push(void 0);
                return o
            }
        },
        _onError: function(e, t) {
            var i;
            return i = e[0],
            t.undoAction(),
            this.view.message.showError(i.get("details"))
        },
        createSharedClosure: function() {
            var e, t, i, n;
            return i = this.segments.clone(),
            e = this.compositeSegment.getAddressDetails(),
            t = null != e ? e.streetName + ", " + e.cityName : "",
            n = {
                location: t,
                segments: i,
                reverseSegments: this._reverseSegments
            },
            this.compositeSegment.mixed.direction || (n.direction = this.compositeSegment.attributes.direction),
            new a(n)
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = {
        SEGMENT: {
            canEditMTE: !0
        },
        MTE: {
            canEditMTE: !1
        }
    },
    e.exports = i
}
, function(e, t) {
    var i;
    i = {
        SEGMENT: {
            showPartialClosuresHeader: !0,
            extendedChildViewOptions: {
                allowApplyToAll: !0,
                showLocateButton: !1,
                showEventName: !0,
                getDescription: function(e) {
                    return null
                }
            }
        },
        MTE: {
            showPartialClosuresHeader: !1,
            extendedChildViewOptions: {
                allowApplyToAll: !1,
                showLocateButton: !0,
                showEventName: !1,
                getDescription: function(e) {
                    return e.get("location")
                }
            }
        }
    },
    e.exports = i
}
, function(e, t, i) {
    var n, s;
    n = i(575),
    s = Marionette.CompositeView.extend({
        childView: n,
        className: "conversation-view",
        childViewContainer: ".comment-list",
        template: "Waze/Modules/Conversation/templates/list",
        bindings: {
            "[name=follow]": {
                observe: "following",
                attributes: [{
                    observe: "disableFollowing",
                    name: "disabled"
                }]
            },
            ".no-comments": {
                observe: "commentCount",
                visible: !0,
                onGet: function(e) {
                    return 0 === e
                }
            },
            ".new-comment-form": {
                observe: "enabled",
                visible: !0
            },
            ".new-comment-text": {
                observe: "commentText",
                attributes: [{
                    observe: "submitting",
                    name: "disabled"
                }]
            },
            ".send-button": {
                attributes: [{
                    observe: "submitting",
                    name: "disabled"
                }]
            }
        },
        ui: {
            commentList: ".comment-list"
        },
        events: {
            "submit .new-comment-form": "_onSubmit"
        },
        initialize: function() {
            return this.commentable = this.options.commentable,
            this.collection = this.commentable.getComments(),
            this.viewModel = new Backbone.Model({
                following: this.commentable.isFollowing(),
                commentCount: this.collection.length,
                commentText: "",
                enabled: this.options.enabled,
                disableFollowing: !1,
                submitting: !1
            }),
            this.listenTo(this.viewModel, "change:following", this._onFollowingChanged),
            this.listenTo(this.collection, "add", this._updateCommentCount)
        },
        _updateCommentCount: function() {
            return this.viewModel.set({
                commentCount: this.collection.length
            })
        },
        onRender: function() {
            return this.stickit(this.viewModel),
            this._scrollToLastComment()
        },
        _onFollowingChanged: function(e, t, i) {
            if (i.stickitChange)
                return this.viewModel.set({
                    disableFollowing: !0
                }),
                this.commentable.setFollowing(t).error(function(e) {
                    return function() {
                        return e.viewModel.set({
                            following: !t
                        })
                    }
                }(this)).always(function(e) {
                    return function() {
                        return e.viewModel.set({
                            disableFollowing: !1
                        })
                    }
                }(this))
        },
        _onSubmit: function(e) {
            var t;
            if (e.preventDefault(),
            t = this.viewModel.get("commentText").trim(),
            t.length > 0)
                return this.viewModel.set({
                    submitting: !0
                }),
                this.commentable.addComment(t).done(function(e) {
                    return function(t) {
                        return e.viewModel.set({
                            commentText: ""
                        }),
                        e.collection.add(t),
                        e.viewModel.set({
                            following: e.commentable.isFollowing()
                        }),
                        e._scrollToLastComment()
                    }
                }(this)).fail(function() {
                    return window.alert(I18n.t("conversation.send_error"))
                }).always(function(e) {
                    return function() {
                        return e.viewModel.set({
                            submitting: !1
                        })
                    }
                }(this))
        },
        _scrollToLastComment: function() {
            var e;
            return e = this.ui.commentList.get(0),
            e.scrollTop = e.scrollHeight
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i, n = {}.hasOwnProperty;
    i = Marionette.Behavior.extend({
        _eventsRegistered: !1,
        onShow: function() {
            return this._registerEvents()
        },
        onDestroy: function() {
            return this._unregisterEvents()
        },
        _registerEvents: function() {
            var e, t, i;
            if (!this._eventsRegistered) {
                i = this.view.accelerators;
                for (t in i)
                    n.call(i, t) && (e = i[t],
                    W.accelerators.events.register(t, this.view, this.view[e]));
                return this._eventsRegistered = !0
            }
        },
        _unregisterEvents: function() {
            var e, t, i;
            if (this._eventsRegistered) {
                i = this.view.accelerators;
                for (t in i)
                    n.call(i, t) && (e = i[t],
                    W.accelerators.events.unregister(t, this.view, this.view[e]));
                return this._eventsRegistered = !1
            }
        },
        onEditingEnabled: function() {
            return this._registerEvents()
        },
        onEditingDisabled: function() {
            return this._unregisterEvents()
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        template: "templates/venue/venue-edit-more-info",
        serializeData: function() {
            return {
                landmark: this.model,
                serviceTypes: this.options.serviceTypes,
                serviceSet: this.options.serviceSet
            }
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Marionette.Behavior.extend({
        _lastTabId: null ,
        events: {
            "show.bs.tab a[data-toggle=tab]": "_onTabShown"
        },
        _onTabShown: function(e) {
            return this._lastTabId = $(e.target).attr("href").replace("#", "")
        },
        _restoreLastTab: function() {
            var e;
            if (null != this._lastTabId)
                return e = this.$("a[href=" + this._lastTabId + "]"),
                e.tab("show")
        },
        onRender: function() {
            return this._restoreLastTab()
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        defaults: {
            selected: !1
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    r = i(31),
    n = i(61),
    s = Backbone.Collection.extend({
        model: n,
        initialize: function() {
            return this.serializer = new r
        },
        url: function() {
            return W.Config.paths.notifications
        },
        parse: function(e) {
            return this.serializer.read(e),
            _.filter(e.notifications.objects, function(e) {
                return !e.isForumMessage()
            })
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r;
    n = 3,
    r = i(146),
    s = Marionette.CompositeView.extend({
        className: "feed-group",
        template: "Waze/Modules/Feed/templates/feed_group",
        childView: r,
        childViewContainer: ".feed-list",
        childViewEventPrefix: "notifications",
        moreItemsMessage: "feed.notifications.more_items",
        events: {
            "click .toggle": "toggleGrouping"
        },
        bindings: {
            ":el": {
                classes: {
                    grouped: "grouped",
                    groupable: {
                        observe: "length",
                        onGet: function(e) {
                            return e > n
                        }
                    }
                }
            },
            ".toggle": {
                observe: "length",
                visible: function(e) {
                    return e > n
                }
            },
            ".counter": {
                observe: "length",
                onGet: function(e) {
                    return I18n.t(this.moreItemsMessage, {
                        count: e - 1
                    })
                }
            }
        },
        initialize: function() {
            return this.model = new Backbone.Model({
                length: 0,
                grouped: !1
            }),
            this.collection.on("reset sync", function(e) {
                return function() {
                    var t;
                    return t = e.collection.length,
                    e.model.set({
                        length: t,
                        grouped: t > n
                    })
                }
            }(this)),
            this.collection.on("reset add remove", function(e) {
                return function() {
                    return e.model.set({
                        length: e.collection.length
                    })
                }
            }(this)),
            this.collection.on("remove", function(e) {
                return function() {
                    if (e.collection.length <= n)
                        return e.model.set({
                            grouped: !1
                        })
                }
            }(this))
        },
        onRender: function() {
            return this.stickit()
        },
        toggleGrouping: function() {
            return this.model.set({
                grouped: !this.model.get("grouped")
            })
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h, p;
    r = i(146),
    u = I18n.t("internal.wiki_best_practices_link"),
    c = I18n.t("internal.wiki_area_manager"),
    d = I18n.t("internal.wiki_country_manager"),
    h = I18n.t("internal.wiki_mentoring"),
    p = I18n.t("internal.wiki_rank_link"),
    n = I18n.t("internal.editing_local_forum_link"),
    l = {
        FLAGGED_USER: u,
        BLOCKED_USER: u,
        ACTIVATED_USER: u,
        WELCOME_NEW_EDITOR: n,
        WELCOME_TO_WME: u,
        SOON_TO_BE_UPGRADED: p,
        LEVEL_UPGRADE: p,
        LEVEL_UPGRADE_3: p,
        LEVEL_UPGRADE_4: p,
        LEVEL_UPGRADE_5: p
    },
    o = {
        MEET_FELLOW_EDITORS: n,
        LEVEL_UPGRADE_2: p,
        LEVEL_UPGRADE_3: c,
        LEVEL_UPGRADE_4: h,
        LEVEL_UPGRADE_5: d
    },
    a = {
        LEVEL_UPGRADE_2: i(984),
        LEVEL_UPGRADE_3: i(985),
        LEVEL_UPGRADE_4: i(986),
        LEVEL_UPGRADE_5: i(987),
        LEVEL_UPGRADE_6: i(988)
    },
    s = r.extend({
        tagName: "div",
        template: "Waze/Modules/Feed/templates/notification_detail",
        className: "notification-detail",
        triggers: {
            "click .next": "nextClicked"
        },
        initialize: function() {
            return this.model.on("destroy", this.destroy, this)
        },
        _onClickDelete: function() {
            return this.$el.addClass("deleting"),
            this.model.trigger("delegate:delete")
        },
        serializeData: function() {
            return _.extend(r.prototype.serializeData.apply(this, arguments), {
                hasNext: this.options.hasNext,
                subject: this._getValueOrTemplate("subject"),
                message: this._getValueOrTemplate("message"),
                linkText: this._getValueOrTemplate("linkText"),
                buttonText: this._getValueOrTemplate("buttonText"),
                linkURL: this._getLinkURL(),
                buttonURL: this._getButtonURL(),
                imageURL: this._getImageURL()
            })
        },
        setMaxHeight: function(e) {
            return this.$el.css({
                maxHeight: e
            })
        },
        _getLinkURL: function() {
            var e;
            return e = this.model.getParameter("linkURL"),
            e || (e = l[this.model.get("type")]),
            e
        },
        _getButtonURL: function() {
            var e;
            return e = this.model.getParameter("buttonURL"),
            e || (e = o[this.model.get("type")]),
            e
        },
        _getImageURL: function() {
            var e;
            return e = this.model.getParameter("imageURL"),
            e || (e = a[this.model.get("type")]),
            e
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(87),
    s = n.extend({
        className: "feed-item feed-notification",
        template: "Waze/Modules/Feed/templates/notification_item",
        serializeData: function() {
            return _.extend(n.prototype.serializeData.apply(this, arguments), {
                title: this._getValueOrTemplate("title"),
                shortMessage: this._getValueOrTemplate("shortMessage")
            })
        },
        _getValueOrTemplate: function(e) {
            var t, i;
            return i = this.model.getParameter(e),
            null == i && (t = "feed.notifications.type." + this.model.attributes.type + "." + e,
            void 0 !== I18n.lookup(t) && (i = I18n.translate(t, this.model.attributes.parameters))),
            i
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r;
    s = i(605),
    r = i(31),
    n = Marionette.Object.extend({
        initialize: function(e) {
            return this.dataModel = e.dataModel
        },
        getMTEDetails: function(e) {
            var t;
            return t = {
                id: e,
                mapVersionID: this.dataModel.lastTransactionID
            },
            $.get(Waze.Config.paths.mteDetails, t).then(function(e) {
                return function(t) {
                    var i, n, o;
                    return n = _.omit(t, "extendedDetails"),
                    o = (new r).read(n),
                    e.dataModel.putPersistent(o),
                    i = _.extend(t.extendedDetails, {
                        segments: o.segments.objects,
                        closures: o.roadClosures.objects
                    }),
                    new s(i)
                }
            }(this))
        },
        submit: function(e) {
            return $.post(Waze.Config.paths.mteReady, {
                id: e.getID()
            }).then(function(t, i, n) {
                return e.set(n.responseJSON.majorTrafficEvents.objects[0]),
                e
            }, function(e, t, i) {
                return e.responseJSON
            })
        },
        publish: function(e) {
            return $.post(Waze.Config.paths.mtePublish, {
                id: e.getID()
            }).then(function(t, i, n) {
                return e.set(n.responseJSON.majorTrafficEvents.objects[0]),
                e
            }, function(e, t, i) {
                return e.responseJSON
            })
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i;
    i = {
        OPEN: "open",
        SOLVED: "solved",
        NOT_IDENTIFIED: "not-identified"
    },
    e.exports = i
}
, function(e, t, i) {
    var n, s;
    s = i(131),
    n = s.extend(),
    n.prototype.deafults = _.extend({
        collatedCount: null
    }, s.prototype.defaults),
    e.exports = n
}
, function(e, t) {
    var i;
    i = Marionette.Region.extend({
        constructor: function() {
            return this.el || this._createContainer(),
            Marionette.Region.prototype.constructor.apply(this, arguments)
        },
        initialize: function(e) {
            if (null == e && (e = {}),
            this.saveButtonSelector = e.saveButtonSelector,
            !this.saveButtonSelector)
                throw new Error("Popover region initialized without the saveButtonSelector options");
            return this.$container.on("click", ".close-popover", function(e) {
                return function() {
                    return e.empty()
                }
            }(this))
        },
        show: function(e) {
            return e.$el.addClass("save-popover"),
            this.$container.addClass("shrunk"),
            Marionette.Region.prototype.show.apply(this, arguments)
        },
        onShow: function() {
            return this._positionContainer(),
            this.$container.removeClass("shrunk")
        },
        _createContainer: function() {
            return this.$container = this.el = $("<div />").attr({
                class: "save-popover-container"
            }).appendTo("body")
        },
        _positionContainer: function() {
            var e, t, i;
            return e = $(this.saveButtonSelector),
            i = e[0].getBoundingClientRect(),
            t = this.$container[0],
            this.$container.css({
                top: i.top + i.height,
                left: i.left - t.offsetWidth + i.width
            })
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o, a, l = {}.hasOwnProperty;
    r = i(646),
    n = i(645),
    s = i(648),
    a = i(649),
    o = Marionette.Controller.extend({
        ignoredErrors: {
            100: !0
        },
        errorCollection: null ,
        _editingLock: null ,
        initialize: function() {
            return this.mediator = this.options.mediator,
            this._lockEditing(),
            this.overlayRenderer = new r(this.options.map),
            this.overlayRenderer.drawOverlay(),
            this.options.saveResult.done(_.bind(this._onSaveSuccess, this)),
            this.options.saveResult.fail(_.bind(this._onSaveFail, this))
        },
        onDestroy: function() {
            var e, t, i;
            return this._releaseEditing(),
            null != (e = this.overlayRenderer) && e.destroy(),
            null != (t = this.errorListView) && t.destroy(),
            null != (i = this.successView) && i.destroy(),
            W.accelerators.events.unregister("save", this, this._onSaveClicked)
        },
        _onSaveSuccess: function(e) {
            return this._releaseEditing(),
            this.overlayRenderer.destroy(),
            this.trigger("saveSuccess"),
            this.trigger("done"),
            this._showSuccessMessage(e),
            this.listenTo(this.successView, "destroy", function(e) {
                return function() {
                    return e.destroy()
                }
            }(this))
        },
        _onSaveFail: function(e) {
            return this.ignoredErrors[e[0].get("code")] ? void this.overlayRenderer.destroy() : (1 === e.length && this._showErrorPoint(e[0]),
            e = this._collateErrors(e),
            this.errorCollection = new n(e),
            this.errorListView = new s({
                collection: this.errorCollection
            }),
            this.listenTo(this.errorListView, "click:save", this._onSaveClicked),
            this.listenTo(this.errorListView, "destroy", function(e) {
                return function() {
                    return e.trigger("done"),
                    e.destroy()
                }
            }(this)),
            this.listenTo(this.errorListView, "click:focus", this._showErrorPoint),
            W.accelerators.events.register("save", this, this._onSaveClicked),
            this.options.popoverRegion.show(this.errorListView))
        },
        _collateErrors: function(e) {
            var t, i, n, s;
            n = [],
            t = _.groupBy(e, function(e) {
                return e.get("code")
            });
            for (i in t)
                l.call(t, i) && (e = t[i],
                s = e[0],
                e.length > 1 && s.set({
                    geometry: null ,
                    collatedCount: e.length,
                    ignorable: _.every(e, function(e) {
                        return e.get("ignorable")
                    })
                }),
                n.push(s));
            return n
        },
        _releaseEditing: function() {
            return this.mediator.set({
                navigation: !0
            }),
            this.mediator.releaseEditing(this._editingLock),
            this._editingLock = null
        },
        _lockEditing: function() {
            return this.mediator.set({
                navigation: !1
            }),
            this._editingLock = this.mediator.lockEditing()
        },
        _showErrorPoint: function(e) {
            var t;
            if (t = e.get("geometry"),
            null !== t)
                return this.overlayRenderer.drawAndFocusSpotlightAtPoint(t)
        },
        _onSaveClicked: function() {
            if (this.errorCollection.isIgnorable())
                return this.trigger("resave")
        },
        _showSuccessMessage: function(e) {
            return this.successView = new a({
                model: e
            }),
            this.options.popoverRegion.show(this.successView)
        }
    }),
    e.exports = o
}
, function(e, t, i) {
    var n, s, r;
    s = i(656),
    r = i(660),
    n = Marionette.Object.extend({
        initialize: function(e) {
            return this.map = e.map,
            this.actionManager = e.actionManager,
            this.layerAttributes = e.layerAttributes || function(e) {
                return {}
            }
            ,
            this.layerSwitcherLayout = new s,
            this.listenTo(this.layerSwitcherLayout, "show", this._onShow)
        },
        _onShow: function() {
            return this._initAccelerators(),
            this._bindMapEvents(),
            this._renderLayerSwitcher()
        },
        destroy: function() {
            return this._destroyAccelerators(),
            this._unbindMapEvents()
        },
        getLayout: function() {
            return this.layerSwitcherLayout
        },
        _bindMapEvents: function() {
            return this.map.events.on({
                addlayer: this._renderLayerSwitcher,
                changelayer: this._renderLayerSwitcher,
                removelayer: this._renderLayerSwitcher,
                changebaselayer: this._renderLayerSwitcher,
                scope: this
            })
        },
        _unbindMapEvents: function() {
            return this.map.events.un({
                addlayer: this._renderLayerSwitcher,
                changelayer: this._renderLayerSwitcher,
                removelayer: this._renderLayerSwitcher,
                changebaselayer: this._renderLayerSwitcher,
                scope: this
            })
        },
        _renderLayerSwitcher: function() {
            var e;
            return e = this.map.layers.filter(function(e) {
                return e.displayInLayerSwitcher
            }).map(function(e) {
                return function(t) {
                    return new Backbone.Model(_.extend({
                        layer: t
                    }, e.layerAttributes(t)))
                }
            }(this)),
            this.layerSwitcherListView = new r({
                map: this.map,
                actionManager: this.actionManager,
                collection: new Backbone.Collection(e)
            }),
            this.layerSwitcherLayout.layersList.show(this.layerSwitcherListView)
        },
        _initAccelerators: function() {
            var e, t, i, n, s;
            for (n = this.map.layers,
            s = [],
            e = 0,
            i = n.length; e < i; e++)
                t = n[e],
                s.push(this._registerLayerAccelerator(t));
            return s
        },
        _destroyAccelerators: function() {
            var e, t, i, n, s;
            for (n = this.map.layers,
            s = [],
            e = 0,
            i = n.length; e < i; e++)
                t = n[e],
                s.push(this._unregisterLayerAccelerator(t));
            return s
        },
        _registerLayerAccelerator: function(e) {
            if (e.accelerator)
                return W.accelerators.events.register(e.accelerator, e, this._setLayerVisibility)
        },
        _unregisterLayerAccelerator: function(e) {
            if (e.accelerator)
                return W.accelerators.events.unregister(e.accelerator, e, this._setLayerVisibility)
        },
        _setLayerVisibility: function() {
            return this.setVisibility(!this.visibility)
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i;
    i = Marionette.LayoutView.extend({
        template: "Waze/Modules/Toolbar/templates/toolbar",
        className: "toolbar",
        events: {
            "click .mode-item": "_onModeItemClick"
        },
        bindings: {
            ":el": {
                observe: "mode",
                update: function(e, t) {
                    return e.find(".mode-item").removeClass("active").filter("[data-mode='" + t + "']").addClass("active")
                }
            }
        },
        regions: {
            search: "#search",
            layerSwitcher: "#layer-switcher",
            toolbar: "#edit-buttons"
        },
        onRender: function() {
            return this.stickit()
        },
        _onModeItemClick: function(e) {
            var t, i;
            if (t = $(e.target).data("mode"),
            i = this.model.requestModeChange(t),
            !i.success)
                return alert(i.error)
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s;
    s = i(657),
    n = Backbone.Collection.extend({
        model: s
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    n = i(89),
    s = n.extend({
        template: "Waze/Modules/Toolbar/templates/layer-switcher-filter",
        events: {
            "click .closed-filter": "_onFilterClicked"
        },
        initialize: function() {
            return this.layer = this.model.get("layer"),
            this.repo = this.layer.repo[0],
            this.filter = this.repo.FILTERS[this.options.filterName]
        },
        serializeData: function() {
            var e;
            return e = n.prototype.serializeData.apply(this, arguments),
            e.filter = this.repo.isFilterBitSet(this.filter),
            e.onText = this.options.translations.active,
            e.offText = this.options.translations.inactive,
            e
        },
        _onFilterClicked: function() {
            return this.repo.toggleFilterBit(this.filter),
            W.controller.updateModel(!0),
            this.render()
        }
    }),
    s.prototype.events = _.extend(s.prototype.events, n.prototype.events),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(8),
    s = Marionette.ItemView.extend({
        template: "Waze/Modules/Toolbar/templates/search",
        ui: {
            searchField: "input",
            searchForm: "form"
        },
        initialize: function(e) {
            var t;
            return this.map = e.map,
            t = new OL.StyleMap({
                default: new OL.Style({
                    externalGraphic: i(181),
                    graphicYOffset: -53,
                    graphicWidth: 37,
                    graphicHeight: 53
                })
            }),
            this.layerView = new OL.Layer.Vector("Search",{
                styleMap: t,
                displayInLayerSwitcher: !1
            }),
            this.layerView.events.on({
                moveend: this._onMapMove,
                scope: this
            }),
            this.map.addLayer(this.layerView),
            W.accelerators.events.register("search", this, function(e) {
                return function() {
                    return e.ui.searchForm.data("searchbox").focus()
                }
            }(this))
        },
        onRender: function() {
            return this.ui.searchForm.searchbox({
                url: Waze.Config.search.server,
                map: this.map,
                remoteProjection: new OL.Projection("EPSG:4326"),
                maxDistance: Waze.Config.search.maxDistance,
                options: Waze.Config.search.options,
                onselect: this._onResultSelect.bind(this),
                onsearch: this._onSearch.bind(this)
            })
        },
        onDestroy: function() {
            return this.layerView.events.un({
                moveend: this._onMapMove
            })
        },
        enable: function() {
            return this.ui.searchField.removeAttr("disabled")
        },
        disable: function() {
            return this.ui.searchField.attr("disabled", "disabled")
        },
        _onMapMove: function(e) {
            e.zoomChanged || this.layerView.removeAllFeatures()
        },
        _onSearch: function(e) {},
        _onResultSelect: function(e, t, i, s) {
            var r, o, a;
            o = n.project(new OL.LonLat(e.location.lon,e.location.lat)),
            r = new OL.Geometry.Point(o.lon,o.lat),
            a = new OL.Feature.Vector(r),
            this.layerView.removeAllFeatures(),
            this.map.setCenter(o, Waze.Config.search.resultZoom),
            this.map.focus(),
            this.layerView.addFeatures(a)
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        template: "Waze/Modules/Toolbar/templates/toolbar-item",
        control: null ,
        enabled: !0,
        parent: null ,
        className: function() {
            var e, t, i;
            return e = this.model.get("control"),
            t = null != this.parent ? "toolbar-group-item" : "toolbar-button",
            i = this.enabled && e.enabled ? this.isActive() ? "ItemActive" : "ItemInactive" : "ItemDisabled",
            t + " " + e.displayClass + " " + i
        },
        events: {
            click: "_onToolbarButtonClick",
            "click .secondary-control": "_onSecondaryControlClick"
        },
        initialize: function(e) {
            return this.control = this.model.get("control"),
            this.secondaryControl = this.model.get("secondaryControl"),
            this.parent = e.parent,
            this.map = e.map,
            this.control && this._addControlToMap(this.control),
            this.secondaryControl && this._addControlToMap(this.secondaryControl),
            this._addEventListeners()
        },
        onDestroy: function() {
            return this._removeEventListeners(),
            this.control.deactivate(),
            this.control.destroy()
        },
        _addControlToMap: function(e) {
            return e.autoActivate === !0 ? (e.autoActivate = !1,
            this.map.addControl(e),
            e.autoActivate = !0) : (this.map.addControl(e),
            e.deactivate())
        },
        _addEventListeners: function() {
            return this.control.events.on({
                activate: this.syncModelAndRender,
                deactivate: this.syncModelAndRender,
                visibilitychanged: this.render,
                enablechanged: this.render,
                scope: this
            })
        },
        _removeEventListeners: function() {
            return this.control.events.un({
                activate: this.syncModelAndRender,
                deactivate: this.syncModelAndRender,
                visibilitychanged: this.render,
                enablechanged: this.render,
                scope: this
            })
        },
        syncModelAndRender: function() {
            return this.model.set("active", this.isActive()),
            this.render()
        },
        isActive: function() {
            var e, t;
            return (null != (e = this.control) ? e.active : void 0) || (null != (t = this.secondaryControl) ? t.active : void 0)
        },
        onRender: function() {
            if (this.$el.attr({
                class: _.result(this, "className")
            }),
            null == this.parent && this.$el.attr("title", this.model.get("title")),
            null != this.control.onRender)
                return this.control.onRender(this.$el)
        },
        _onToolbarButtonClick: function() {
            return this._triggerControl(this.control)
        },
        _onSecondaryControlClick: function(e) {
            return e.stopPropagation(),
            this._triggerControl(this.secondaryControl)
        },
        _triggerControl: function(e) {
            var t;
            if (e) {
                if (!e.enabled)
                    return !1;
                switch (e.type) {
                case OL.Control.TYPE_BUTTON:
                    e.trigger();
                    break;
                case OL.Control.TYPE_TOGGLE:
                    t = this.model.get("active"),
                    t ? e.deactivate() : e.activate();
                    break;
                default:
                    return e.activate(),
                    !1
                }
                this.trigger("controlTriggered")
            }
        },
        enable: function() {
            return this.enabled = !0,
            this.render()
        },
        disable: function() {
            return this.enabled = !1,
            this.render()
        },
        serializeData: function() {
            return {
                title: this.model.get("title"),
                control: this.control,
                secondaryControl: this.secondaryControl,
                showDrawingControls: this.model.get("showDrawingControls"),
                featureName: this.model.get("featureName")
            }
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        HOVER_DELAY_MS: 200,
        tagName: "li",
        template: "Waze/Modules/Topbar/templates/area-managers/item",
        events: {
            "mouseenter .area-manager-item": "_onAreaMouseEnter",
            "mouseleave .area-manager-item": "_onAreaMouseLeave"
        },
        triggers: {
            "click .area-manager-item": "onAreaClicked"
        },
        _hoverTimeoutId: null ,
        _hovered: !1,
        _onAreaMouseEnter: function() {
            if (null == this._hoverTimeoutId)
                return this._hoverTimeoutId = window.setTimeout(this._onHoverTimeout.bind(this), this.HOVER_DELAY_MS)
        },
        _onAreaMouseLeave: function() {
            return this._clearHoverTimeout(),
            this._hovered = !1,
            this.trigger("onAreaMouseLeave", {
                model: this.model
            })
        },
        _onHoverTimeout: function() {
            return this._hovered = !0,
            this.trigger("onAreaMouseEnter", {
                model: this.model
            }),
            this._clearHoverTimeout()
        },
        _clearHoverTimeout: function() {
            return this._hoverTimeoutId && window.clearTimeout(this._hoverTimeoutId),
            this._hoverTimeoutId = null
        },
        onBeforeDestroy: function() {
            return this._hovered && (this._hovered = !1,
            this.trigger("onAreaMouseLeave", {
                model: this.model
            })),
            this._clearHoverTimeout()
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        template: "Waze/Modules/Topbar/templates/loading-indicator",
        className: "loading-indicator",
        initialize: function() {
            return this.globalVent = this.options.globalVent,
            this.operations = [],
            this.globalVent.on("operationPending", this._onOperationPending, this),
            this.globalVent.on("operationDone", this._onOperationDone, this)
        },
        onDestroy: function() {
            return this.globalVent.off("operationPending", this._onOperationPending, this),
            this.globalVent.off("operationDone", this._onOperationDone, this)
        },
        _onOperationPending: function(e) {
            return this.operations.push(e.operation),
            this.render()
        },
        _onOperationDone: function(e) {
            return OL.Util.removeItem(this.operations, e.operation),
            this.render()
        },
        _hasOperations: function() {
            return this.operations.length > 0
        },
        serializeData: function() {
            var e, t;
            return this._hasOperations() ? (e = _.last(this.operations),
            t = e.text || I18n.t(e.id)) : t = "",
            {
                operationText: t
            }
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o;
    o = i(9),
    r = i(167),
    s = i(11),
    n = Marionette.ItemView.extend({
        tagName: "li",
        template: "templates/place_updates/changed_field",
        events: {
            "mouseover .location-button.current": "_onCurrentOver",
            "mouseover .location-button.suggested": "_onSuggestedOver",
            "mouseout .location-button.current": "_onLocationOut",
            "mouseout .location-button.suggested": "_onLocationOut"
        },
        _layersAdded: !1,
        _suggestedLocationDrawn: !1,
        _currentLocationDrawn: !1,
        _markerLayer: null ,
        _vectorLayer: null ,
        _createTooltip: function(e, t, i) {
            var n;
            return this._ensureLayers(),
            n = new OL.Marker(e,new s("location-tooltip " + i)),
            n.icon.$div.text(t),
            this._markerLayer.addMarker(n)
        },
        _onCurrentOver: function() {
            var e;
            if (!this._currentLocationDrawn)
                return e = this._getValue(this.model.get("venue")).getBounds().getCenterLonLat(),
                this._createTooltip(e, I18n.t("venues.update_requests.panel.change.current_location"), ""),
                this._currentLocationDrawn = !0
        },
        _onSuggestedOver: function() {
            var e, t, i;
            if (!this._suggestedLocationDrawn)
                return this._ensureLayers(),
                t = this._getValue(this.model.get("suggestedVenue")),
                e = new OL.Feature.Vector(t),
                this._vectorLayer.addFeatures(e),
                i = t.getBounds().getCenterLonLat(),
                this._createTooltip(i, I18n.t("venues.update_requests.panel.change.suggested_location"), "suggested"),
                this._suggestedLocationDrawn = !0
        },
        _onLocationOut: function() {
            return this._ensureLayers(),
            this._vectorLayer.removeAllFeatures(),
            this._markerLayer.clearMarkers(),
            this._currentLocationDrawn = !1,
            this._suggestedLocationDrawn = !1
        },
        _ensureLayers: function() {
            if (!this._layersAdded)
                return this._vectorLayer = new OL.Layer.Vector("",{
                    displayInLayerSwitcher: !1,
                    styleMap: r
                }),
                this._markerLayer = new OL.Layer.Markers("",{
                    displayInLayerSwitcher: !1
                }),
                W.map.addLayers([this._vectorLayer, this._markerLayer]),
                $(this._vectorLayer.div).addClass("suggested-geometry-layer"),
                this._layersAdded = !0
        },
        _destroyLayers: function() {
            var e, t;
            return null != (e = this._vectorLayer) && e.destroy(),
            null != (t = this._markerLayer) && t.destroy(),
            this._layersAdded = !1
        },
        onDestroy: function() {
            return this._destroyLayers()
        },
        _getValue: function(e) {
            var t;
            return t = this.model.get("fieldName"),
            this.valueGetters[t] ? this.valueGetters[t](e) : e.attributes[t]
        },
        serializeData: function() {
            var e, t, i;
            return e = this._getValue(this.model.get("venue")),
            i = this._getValue(this.model.get("suggestedVenue")),
            t = _.isArray(e) || _.isArray(i),
            {
                showChangeList: t,
                changeList: t ? this.getChangeList() : null ,
                currentValue: e,
                suggestedValue: i,
                fieldName: this.model.get("fieldName"),
                removing: !i,
                isGeometry: this.model.isGeometry(),
                model: this.model
            }
        },
        templateHelpers: {
            getRemovedImages: function() {
                var e, t, i, n;
                return n = this.model.get("venue"),
                e = _(n.attributes.images),
                t = _(this.model.get("suggestedVenue").attributes.images),
                i = _.difference(e.pluck("id"), t.pluck("id")),
                i.map(function(t) {
                    return e.find(function(e) {
                        return e.get("id") === t
                    })
                })
            }
        },
        valueGetters: {
            streetID: function(e) {
                return o.formatAddress(e.getAddress())
            },
            entryExitPoints: function(e) {
                return e.getNavigationPoint().point
            },
            openingHours: function(e) {
                var t;
                return t = e.getOpeningHours().map(o.formatOpeningHour),
                t.join(", ")
            },
            services: function(e) {
                return e.attributes.services.map(function(e) {
                    return I18n.t("venues.services." + e)
                })
            },
            categories: function(e) {
                return e.attributes.categories.map(function(e) {
                    return I18n.t("venues.categories." + e)
                })
            }
        },
        getChangeList: function() {
            var e, t;
            return e = this._getValue(this.model.get("venue")),
            t = this._getValue(this.model.get("suggestedVenue")),
            this.model._getChangeList(e, t)
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r;
    n = i(42),
    r = i(9),
    s = Marionette.ItemView.extend({
        template: "templates/place_updates/image_dialog",
        image: null ,
        initialize: function() {
            return this.venue = this.options.venue,
            this.image = this.venue.getImageById(this.options.imageId)
        },
        serializeData: function() {
            return {
                imageUrl: this.image.getUrl(n.SIZE.BIG),
                dateAdded: this.image.get("date"),
                addingUserId: this.image.get("creatorUserId"),
                venueName: this.venue.attributes.name
            }
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    n = i(690),
    o = i(495),
    r = i(59),
    s = i(161),
    l = i(9),
    a = Marionette.ItemView.extend({
        APPROVE_ACTION_NAMES: {
            default: I18n.t("venues.update_requests.panel.action.approve"),
            ADD_VENUE: I18n.t("venues.update_requests.panel.action.add_to_map")
        },
        HIDE_PLACE_DETAILS: {
            ADD_VENUE: !0
        },
        template: "templates/place_updates/item",
        events: {
            "change [name=approved]": "_onApproveChanged",
            "click .image-preview": "_onImagePreviewClicked",
            "click .focus": "_onFocusClicked"
        },
        ui: {
            approvedDropdown: "[name=approved]",
            header: ".header",
            scrollable: ".scrollable",
            actions: ".actions"
        },
        fieldChangeView: null ,
        imageDialogView: null ,
        bodyScrollPosition: null ,
        rendered: !1,
        maxHeight: null ,
        initialize: function() {
            return this.listenTo(this.model, "change:approved", this._onModelChanged)
        },
        serializeData: function() {
            return {
                model: this.model,
                venue: this.options.venue,
                hidePlaceDetails: !!this.HIDE_PLACE_DETAILS[this.model.get("updateType")],
                showDebug: this.options.showDebug
            }
        },
        _onModelChanged: function() {
            return this.render()
        },
        _onApproveChanged: function() {
            var e, t;
            return t = this.ui.approvedDropdown.filter(":checked").booleanVal(),
            e = new o(this.options.venue,this.model,t),
            this.options.venue.model.actionManager.add(e)
        },
        _onImagePreviewClicked: function(e) {
            var t, i;
            return i = $(e.target).data("image-id"),
            t = new s({
                venue: this.options.venue,
                imageId: i
            }),
            W.app.layout.dialogRegion.show(t),
            e.preventDefault()
        },
        _onFocusClicked: function() {
            return this.trigger("focusClicked")
        },
        onRender: function() {
            var e;
            return "UPDATE_VENUE" === this.model.get("updateType") && (null != (e = this.fieldChangeView) && e.destroy(),
            this.fieldChangeView = new n({
                collection: new Backbone.Collection(this.model.get("changedFields"),{
                    sort: !1
                }),
                el: this.$(".changed-fields")
            }),
            this.fieldChangeView.render()),
            this._setBodyHeight(),
            this.ui.scrollable.scrollTop(this.bodyScrollPosition)
        },
        onDestroy: function() {
            var e;
            return null != (e = this.fieldChangeView) ? e.destroy() : void 0
        },
        onShow: function() {
            return this.rendered = !0
        },
        render: function() {
            return this.rendered && (this.bodyScrollPosition = this.ui.scrollable.scrollTop()),
            Marionette.ItemView.prototype.render.apply(this, arguments)
        },
        setMaxHeight: function(e) {
            return this.maxHeight = e,
            this._setBodyHeight()
        },
        _setBodyHeight: function() {
            var e, t;
            return t = this.ui.header.outerHeight(),
            e = this.ui.actions.outerHeight(),
            this.ui.scrollable.css({
                maxHeight: this.maxHeight - t - e
            })
        },
        templateHelpers: {
            getTitle: function() {
                return I18n.t("venues.update_requests.panel.title." + this.model.get("updateType"))
            },
            getApproveActionName: function() {
                var e, t;
                return t = this.model.get("updateType"),
                e = a.prototype.APPROVE_ACTION_NAMES,
                e[t] || e.default
            },
            getChangesTemplate: function() {
                var e;
                return e = this.model.get("updateType").toLowerCase(),
                "templates/place_updates/" + e
            },
            getApproveActionIntent: function() {
                return "default"
            },
            getRejectActionName: function() {
                return I18n.t("venues.update_requests.panel.action.reject")
            },
            getNoPermissionsMessage: function() {
                var e, t;
                return this.model.get("isInEditArea") ? (t = this.model.getRequiredEditRank(),
                e = l.formatRank(t),
                I18n.t("venues.update_requests.panel.uneditable", {
                    level: e
                })) : I18n.t("venues.update_requests.panel.out_of_edit_area")
            },
            getNewPlaceImages: function() {
                return this.model.get("place").getImagesByUserId(this.model.get("createdBy"))
            },
            shouldShowCarousel: function() {
                return this.getNewPlaceImages().length > 1
            },
            shouldShowName: function() {
                return !this.model.get("place").attributes.residential
            },
            getCarouselUniqueId: function() {
                var e;
                return e = this.model.get("id").replace(/[^\d\w]/g, ""),
                "place-update-carousel-" + e
            }
        }
    }),
    e.exports = a
}
, function(e, t, i) {
    var n, s, r, o, a;
    r = i(695),
    o = i(696),
    s = i(58),
    n = i(12),
    a = OL.Class(n, {
        template: "restriction/layout",
        events: {
            "click .add-restriction": "addRestrictionClicked",
            "click .done": "onDoneClicked",
            "click .cancel-edit": "onCancelClicked",
            keydown: "onKeyDown"
        },
        listView: null ,
        editView: null ,
        model: null ,
        editable: !1,
        features: null ,
        showDifficultToggle: !1,
        initialize: function() {
            n.prototype.initialize.apply(this, arguments),
            this.listView = new o({
                showDifficultToggle: this.showDifficultToggle
            }),
            this.editView = new r,
            this.editView.on("done", this.onEditDone, this),
            this.editView.on("cancel", this.onEditCancel, this),
            this.listView.on("editClicked", this.onEditClicked, this)
        },
        onKeyDown: function(e) {
            return e.stopPropagation()
        },
        render: function() {
            return n.prototype.render.apply(this, arguments),
            this.$content = this.$el.find(".content"),
            this.$modal = this.$el.find(".modal"),
            this.$modal.on("hide.bs.modal", function(e) {
                return function() {
                    return e.destroy()
                }
            }(this)),
            this.$el.appendTo("body")
        },
        setModel: function(e, t, i, n) {
            return this.model = e,
            this.features = t,
            this.editable = i,
            this.listView.setModel(this.model, this.features, this.editable, n, this.showDifficultToggle)
        },
        setSelectedGroup: function(e) {
            return this.listView.selectedGroup = e
        },
        insertInnerView: function(e) {
            return this.$content.find(":first").detach(),
            this.$content.append(e.$el)
        },
        show: function() {
            return this.render(),
            this.listView.render(),
            this.insertInnerView(this.listView),
            this.$modal.modal({
                keyboard: !0,
                backdrop: "static"
            })
        },
        hide: function() {
            return this.$modal.modal("hide")
        },
        showEditViewFor: function(e, t, i) {
            return null == i && (i = !1),
            this.editView.model = e,
            this.editView.group = t,
            this.editView.isNewRestriction = i,
            this.editView.render(),
            this.insertInnerView(this.editView)
        },
        addRestrictionClicked: function(e) {
            var t;
            return t = new s({
                days: s.prototype.allDays,
                vehicleTypes: s.prototype.allVehicleTypes
            }),
            this.showEditViewFor(t, this.getGroupFromEvent(e), !0)
        },
        onEditClicked: function(e) {
            return this.showEditViewFor(e.restriction, e.group)
        },
        getGroupFromEvent: function(e) {
            var t;
            return t = $(e.target).parents(".tab-pane").data("group"),
            this.model[t]
        },
        onEditDone: function(e) {
            var t, i, n;
            if (i = e.model,
            t = e.group,
            e.isNewRestriction && (n = t.restrictions.some(function(e) {
                return e.equals(i)
            }),
            n || (t.restrictions.push(i),
            i.models = this.features.clone())),
            this.insertInnerView(this.listView),
            !n)
                return this.listView.render()
        },
        onEditCancel: function(e) {
            return this.insertInnerView(this.listView)
        },
        onDoneClicked: function() {
            return this.fire("done")
        },
        onCancelClicked: function() {
            return this.fire("cancel")
        },
        destroy: function() {
            var e;
            if (this.$el)
                return e = this.$el,
                n.prototype.destroy.apply(this, arguments),
                this.editView.destroy(),
                this.listView.destroy(),
                this.$modal.removeData("modal"),
                e.remove()
        }
    }),
    e.exports = a
}
, function(e, t) {
    var i;
    i = OL.Class({
        $el: null ,
        copied: null ,
        events: null ,
        clipboardActive: !1,
        $clipboardEl: null ,
        $clipboardContainer: null ,
        initialize: function(e) {
            return this.$el = e,
            this.events = new OL.Events(this),
            this
        },
        setEl: function(e) {
            return this.$el = e,
            this.$el.on({
                mouseover: $.proxy(this._onMouseOver, this),
                mouseout: $.proxy(this._onMouseOut, this),
                scope: this
            })
        },
        _onMouseOver: function() {
            return $(document).on({
                keydown: $.proxy(this._onKeyDown, this),
                keyup: $.proxy(this._onKeyUp, this)
            })
        },
        _onMouseOut: function() {
            return $(document).off({
                keydown: $.proxy(this._onKeyDown, this),
                keyup: $.proxy(this._onKeyUp, this)
            }),
            this._detachClipboard()
        },
        _onKeyDown: function(e) {
            if (this.copied = !1,
            this.value && (e.ctrlKey || e.metaKey) && (67 === e.keyCode && (this.copied = !0),
            !$(e.target).is("input:visible,textarea:visible")))
                return _.defer(function(e) {
                    return function() {
                        return null == e.$clipboardContainer && (e.$clipboardContainer = $("<div class='clipboard-container'></div>")),
                        e.$clipboardContainer.appendTo($(document.body)),
                        e.$clipboardContainer.empty().show(),
                        e.$clipboardEl = $("<textarea />").val(e.value).appendTo(e.$clipboardContainer).focus().select(),
                        e.clipboardActive = !0
                    }
                }(this))
        },
        _onKeyUp: function(e) {
            return $(e.target).is(this.$clipboardEl) && (this.copied && this.events.triggerEvent("copied", this.$clipboardEl.val()),
            this._detachClipboard()),
            this.copied = !1
        },
        _detachClipboard: function() {
            if (this.clipboardActive)
                return this.$clipboardContainer.empty().detach(),
                this.clipboardActive = !1
        },
        set: function(e) {
            this.value = e
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = {
        bfs: function(e, t, i) {
            var n, s, r, o, a, l, u, c, d, h, p, g, m;
            for (null == t && (t = function() {
                return !0
            }
            ),
            h = [e],
            m = {},
            m[e.getID()] = e.getID(); !h.isEmpty(); )
                for (s = h.shift(),
                d = ["from", "to"],
                r = 0,
                a = d.length; r < a; r++)
                    for (c = d[r],
                    u = s.attributes[c + "NodeID"],
                    n = function() {
                        var e, i, n, r;
                        for (n = s.getConnectedSegments(c),
                        r = [],
                        e = 0,
                        i = n.length; e < i; e++)
                            p = n[e],
                            p.getID() !== s.getID() && t(p) && r.push(p);
                        return r
                    }(),
                    o = 0,
                    l = n.length; o < l; o++)
                        if (g = n[o],
                        !m[g.getID()]) {
                            if (m[g.getID()] = s.getID(),
                            i(g, u, c, n, s))
                                return [g, m];
                            h.push(g)
                        }
            return [null , m]
        },
        getReversedSegments: function(e) {
            var t, i, n, s;
            return i = {
                multipleConnectedComponents: !1,
                numReversed: 0
            },
            e.isEmpty() ? i : (i[e[0].getID()] = !1,
            t = this.bfs(e[0], function(t) {
                return e.contains(t)
            }, function(e, t, n, s, r) {
                var o, a, l;
                return a = "from" === n && e.attributes.toNodeID !== t || "to" === n && e.attributes.fromNodeID !== t,
                l = i[r.getID()],
                o = a ? !l : l,
                i[e.getID()] = o,
                o && i.numReversed++,
                !1
            }),
            n = t[0],
            s = t[1],
            Object.keys(s).length < e.length && (i = {
                multipleConnectedComponents: !0,
                numReversed: 0
            }),
            i)
        }
    },
    e.exports = i
}
, function(e, t) {
    e.exports = new OpenLayers.StyleMap({
        default: new OpenLayers.Style({
            fillOpacity: .3,
            strokeOpacity: .7,
            strokeWidth: 2,
            strokeColor: "#333",
            label: "${getLabel}",
            fontColor: "#333",
            labelOutlineColor: "white",
            labelOutlineWidth: 2,
            fontSize: 14,
            fontWeight: "bold",
            fillColor: "${getFillColor}"
        },{
            context: {
                getLabel: function(e) {
                    return e.model.getUserName()
                },
                getFillColor: function(e) {
                    var t, i;
                    return t = e.model.userID % 16777216,
                    i = t.toString(16),
                    "#" + i
                }
            }
        }),
        highlight: new OpenLayers.Style({
            strokeOpacity: 1,
            strokeWidth: 3,
            fontSize: 18
        })
    })
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h, p, g, m, f, v, y, b, w, S, E;
    l = i(704),
    o = "#c290c6",
    n = "#00ece3",
    a = "#ca9ace",
    s = "#ff8383",
    r = "#ff9292",
    v = {
        strokeColor: a,
        fillColor: o,
        strokeDashstyle: "solid",
        strokeOpacity: 1,
        strokeWidth: 2,
        fillOpacity: .3,
        graphicZIndex: "${getZIndex}"
    },
    f = {
        pointRadius: 6,
        strokeWidth: 2,
        strokeColor: "white",
        fillColor: o,
        graphicZIndex: 0,
        fillOpacity: 1
    },
    u = {
        CAR_SERVICES: l.toUnicode("waze-icon-place-car"),
        CULTURE_AND_ENTERTAINEMENT: l.toUnicode("waze-icon-place-culture"),
        FOOD_AND_DRINK: l.toUnicode("waze-icon-place-food-drink"),
        LODGING: l.toUnicode("waze-icon-place-lodging"),
        NATURAL_FEATURES: l.toUnicode("waze-icon-place-natural"),
        OTHER: l.toUnicode("waze-icon-place-other"),
        OUTDOORS: l.toUnicode("waze-icon-place-outdoors"),
        PROFESSIONAL_AND_PUBLIC: l.toUnicode("waze-icon-place-professional"),
        SHOPPING_AND_SERVICES: l.toUnicode("waze-icon-place-shopping"),
        TRANSPORTATION: l.toUnicode("waze-icon-place-transportation")
    },
    E = function(e) {
        var t;
        return t = W.defaultRule({
            Point: f,
            Polygon: v
        }),
        new OL.Style(null ,{
            rules: [t].concat(e),
            context: {
                getZIndex: function(e) {
                    var t;
                    return t = e.geometry.getBounds(),
                    -Math.floor(t.getHeight() * t.getWidth())
                },
                getCategoryIcon: function(e) {
                    var t, i;
                    return t = null != (i = e.model) ? i.getMainCategory() : void 0,
                    u[t] || ""
                }
            }
        })
    }
    ,
    b = W.defaultRule({
        Point: {
            fillColor: n,
            strokeColor: n,
            fontFamily: "FontAwesome",
            label: "",
            labelOutlineWidth: 0,
            fontColor: "white",
            fontSize: 11,
            labelYOffset: 0,
            pointRadius: 12,
            strokeOpacity: 1,
            fillOpacity: .3
        },
        Polygon: {
            strokeColor: n,
            fillColor: n
        }
    }),
    h = W.defaultRule({
        Point: {
            fillColor: s,
            strokeDashstyle: "dot",
            fillOpacity: .3
        },
        Polygon: {
            strokeDashstyle: "dash",
            strokeColor: "white",
            fillColor: s
        }
    }),
    d = W.rule("isUnchanged", !1, {
        Point: {
            fillColor: s
        },
        Polygon: {
            fillColor: s,
            strokeColor: s
        }
    }),
    c = W.rule("isUnchanged", !1, {
        Point: {
            fillColor: r
        },
        Polygon: {
            fillColor: r,
            strokeColor: r
        }
    }),
    S = W.rule("isApproved", !1, {
        Point: {
            pointRadius: 6,
            fillColor: o,
            strokeWidth: 3,
            strokeColor: n
        },
        Polygon: {
            fillColor: a,
            strokeColor: n,
            strokeDashstyle: "dash"
        }
    }),
    w = W.rule("_sketch", !0, {
        externalGraphic: null ,
        strokeWidth: 3,
        strokeColor: "#00ece3",
        strokeOpacity: 1,
        pointRadius: 6,
        fillColor: "white",
        fillOpacity: 1,
        graphicZIndex: 0
    }),
    y = W.rule("isResidential", !0, {
        graphicName: "triangle"
    }),
    m = {
        stroke: !1,
        pointRadius: 12,
        fillColor: "white",
        fillOpacity: .6,
        graphicZIndex: 0,
        fontSize: 16,
        labelYOffset: 0,
        fontColor: "#3d3d3d",
        labelOutlineWidth: 0,
        fontFamily: "FontAwesome",
        label: ""
    },
    g = W.rule("dragPoint", !0, m),
    p = W.rule("dragPoint", !0, _.defaults({
        fillColor: "#25d7fd",
        fillOpacity: .3
    }, m)),
    e.exports = new OL.StyleMap({
        default: E([w, g, d, S, y]),
        highlight: E([W.defaultRule({
            Point: {
                fontFamily: l.fontFamily,
                label: "${getCategoryIcon}",
                labelOutlineWidth: 0,
                fontColor: "white",
                fontSize: 16,
                pointRadius: 12,
                fillColor: a,
                fillOpacity: 1,
                strokeOpacity: 1
            },
            Polygon: {
                strokeColor: a,
                fillColor: a
            }
        }), w, p, c, y]),
        select: E([b]),
        highlightselected: E([b]),
        delete: E([h]),
        highlightdeleted: E([h])
    })
}
, function(e, t) {
    e.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")
}
, function(e, t, i) {
    e.exports = i(19).document && document.documentElement
}
, function(e, t, i) {
    var n = i(63);
    e.exports = Object("z").propertyIsEnumerable(0) ? Object : function(e) {
        return "String" == n(e) ? e.split("") : Object(e)
    }
}
, function(e, t, i) {
    "use strict";
    var n = i(172)
      , s = i(34)
      , r = i(747)
      , o = i(35)
      , a = i(66)
      , l = i(36)
      , u = i(734)
      , c = i(97)
      , d = i(742)
      , h = i(15)("iterator")
      , p = !([].keys && "next"in [].keys())
      , g = "@@iterator"
      , m = "keys"
      , f = "values"
      , v = function() {
        return this
    };
    e.exports = function(e, t, i, y, b, _, w) {
        u(i, t, y);
        var S, E, C, L = function(e) {
            if (!p && e in D)
                return D[e];
            switch (e) {
            case m:
                return function() {
                    return new i(this,e)
                }
                ;
            case f:
                return function() {
                    return new i(this,e)
                }
            }
            return function() {
                return new i(this,e)
            }
        }, A = t + " Iterator", M = b == f, I = !1, D = e.prototype, x = D[h] || D[g] || b && D[b], T = x || L(b), O = b ? M ? L("entries") : T : void 0, k = "Array" == t ? D.entries || x : x;
        if (k && (C = d(k.call(new e)),
        C !== Object.prototype && (c(C, A, !0),
        n || a(C, h) || o(C, h, v))),
        M && x && x.name !== f && (I = !0,
        T = function() {
            return x.call(this)
        }
        ),
        n && !w || !p && !I && D[h] || o(D, h, T),
        l[t] = T,
        l[A] = v,
        b)
            if (S = {
                values: M ? T : L(f),
                keys: _ ? T : L(m),
                entries: O
            },
            w)
                for (E in S)
                    E in D || r(D, E, S[E]);
            else
                s(s.P + s.F * (p || I), t, S);
        return S
    }
}
, function(e, t) {
    e.exports = !0
}
, function(e, t) {
    t.f = {}.propertyIsEnumerable
}
, function(e, t) {
    e.exports = function(e, t) {
        return {
            enumerable: !(1 & e),
            configurable: !(2 & e),
            writable: !(4 & e),
            value: t
        }
    }
}
, function(e, t, i) {
    var n = i(19)
      , s = "__core-js_shared__"
      , r = n[s] || (n[s] = {});
    e.exports = function(e) {
        return r[e] || (r[e] = {})
    }
}
, function(e, t, i) {
    var n, s, r, o = i(64), a = i(731), l = i(169), u = i(96), c = i(19), d = c.process, h = c.setImmediate, p = c.clearImmediate, g = c.MessageChannel, m = 0, f = {}, v = "onreadystatechange", y = function() {
        var e = +this;
        if (f.hasOwnProperty(e)) {
            var t = f[e];
            delete f[e],
            t()
        }
    }, b = function(e) {
        y.call(e.data)
    };
    h && p || (h = function(e) {
        for (var t = [], i = 1; arguments.length > i; )
            t.push(arguments[i++]);
        return f[++m] = function() {
            a("function" == typeof e ? e : Function(e), t)
        }
        ,
        n(m),
        m
    }
    ,
    p = function(e) {
        delete f[e]
    }
    ,
    "process" == i(63)(d) ? n = function(e) {
        d.nextTick(o(y, e, 1))
    }
    : g ? (s = new g,
    r = s.port2,
    s.port1.onmessage = b,
    n = o(r.postMessage, r, 1)) : c.addEventListener && "function" == typeof postMessage && !c.importScripts ? (n = function(e) {
        c.postMessage(e + "", "*")
    }
    ,
    c.addEventListener("message", b, !1)) : n = v in u("script") ? function(e) {
        l.appendChild(u("script"))[v] = function() {
            l.removeChild(this),
            y.call(e)
        }
    }
    : function(e) {
        setTimeout(o(y, e, 1), 0)
    }
    ),
    e.exports = {
        set: h,
        clear: p
    }
}
, function(e, t, i) {
    var n = i(99)
      , s = Math.min;
    e.exports = function(e) {
        return e > 0 ? s(n(e), 9007199254740991) : 0
    }
}
, function(e, t) {
    var i = 0
      , n = Math.random();
    e.exports = function(e) {
        return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++i + n).toString(36))
    }
}
, function(e, t, i) {
    var n = i(94)
      , s = i(15)("iterator")
      , r = i(36);
    e.exports = i(14).getIteratorMethod = function(e) {
        if (void 0 != e)
            return e[s] || e["@@iterator"] || r[n(e)]
    }
}
, function(e, t, i) {
    e.exports = i.p + "img/one-way-standard36b7901c37f65cd4308d73998cb62a94.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/location-pin9ec58e180e175fd30652e4c15b957a95.png"
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t, i) {
    var n, s, r = i(3), o = i(5), a = i(2);
    _.defer(function() {
        n = i(52)
    }),
    s = OpenLayers.Class(r, {
        node: null ,
        prevNodeState: null ,
        changedSegAttributes: null ,
        changedSegStates: null ,
        dontSerialize: !0,
        hidNode: !1,
        initialize: function(e, t) {
            r.prototype.initialize.apply(this, [t]),
            this.node = e,
            this.changedSegAttributes = {},
            this.changedSegStates = []
        },
        destroy: function() {
            this.model.nodes.get(this.node.getID()) || this.node.destroy(),
            this.node = null ,
            this.changedSegAttributes = null ,
            this.prevNodeState = null ,
            this.changedSegStates = null ,
            r.prototype.destroy.apply(this)
        },
        doAction: function() {
            return this.node.state !== OpenLayers.State.DELETE && (this.node.attributes.segIDs.forEach(function(e) {
                var t = this.model.segments.get(e);
                this.doSubAction(new n(t,this.node))
            }, this),
            this.node.hidden || (this.hidNode = !0),
            this.node.hidden = !0,
            this.prevNodeState = this.node.state,
            void (this.node.state === OpenLayers.State.INSERT ? this.model.nodes.remove(this.node) : (this.node.state = OpenLayers.State.DELETE,
            this.model.nodes.changed(this.node))))
        },
        undoAction: function() {
            this.hidNode && delete this.node.hidden,
            this.node.state === OpenLayers.State.INSERT ? this.model.nodes.put(this.node) : (this.node.state = this.prevNodeState,
            this.model.nodes.changed(this.node)),
            r.prototype.undoAction.apply(this)
        },
        redoAction: function() {
            this.node.getID(),
            this.hidNode && (this.node.hidden = !0),
            this.node.state === OpenLayers.State.INSERT ? this.model.nodes.remove(this.node) : (this.node.state = OpenLayers.State.DELETE,
            this.model.nodes.changed(this.node)),
            r.prototype.redoAction.apply(this)
        },
        serialize: function() {
            var e = {
                _objectType: a.NODE,
                action: o.TYPE.DELETE,
                attributes: {
                    id: this.node.getID()
                }
            };
            return e
        },
        CLASS_NAME: "Waze.Action.DeleteNode"
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s = i(5);
    n = OpenLayers.Class(s, {
        object: null ,
        repo: null ,
        origState: null ,
        initialize: function(e, t) {
            s.prototype.initialize.apply(this, [t]),
            this.object = e
        },
        destroy: function() {
            null !== this.repo && null !== this.object && null === this.repo.get(this.object.getID()) && this.object.destroy(),
            this.object = null ,
            s.prototype.destroy.apply(this)
        },
        doAction: function() {
            return this.repo = this.model.getRepository(this.object.type),
            null !== this.repo && (this.origState = this.object.state,
            this.removeObjct(),
            !0)
        },
        removeObjct: function() {
            this.object.state === OpenLayers.State.INSERT ? this.repo.remove(this.object) : (this.object.state = OpenLayers.State.DELETE,
            this.repo.changed(this.object))
        },
        undoAction: function() {
            this.object.state = this.origState,
            this.object.state === OpenLayers.State.INSERT ? this.repo.put(this.object) : this.repo.changed(this.object)
        },
        redoAction: function() {
            this.removeObjct()
        },
        serialize: function() {
            var e = {
                _objectType: this.object.type,
                action: s.TYPE.DELETE,
                attributes: {
                    id: this.object.getID()
                }
            };
            return e
        },
        CLASS_NAME: "Waze.Action.DeleteObject"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = (i(5),
    i(3)), r = i(25), o = i(27), a = i(47), l = i(6), u = i(110), c = i(20);
    n = OpenLayers.Class(s, {
        segments: null ,
        node: null ,
        fromNode: null ,
        toNode: null ,
        mergedSegment: null ,
        firstSegReversed: !1,
        secondSegReversed: !1,
        keepLevel: !1,
        initialize: function(e, t, i) {
            s.prototype.initialize.apply(this, [i]),
            this.segments = e,
            this.node = t,
            this.previousNodeStates = {}
        },
        destroy: function() {
            this.previousNodeStates = null ,
            this.fromNode = null ,
            this.toNode = null ,
            s.prototype.destroy.apply(this)
        },
        createMergedSegment: function(e, t) {
            var i, n, s = e[0].geometry.clone().getVertices(), r = e[1].geometry.clone().getVertices(), o = this.segments.first();
            return this.fromNode = e[0].attributes.fromNodeID,
            e[0].attributes.fromNodeID === t.getID() && (s.reverse(),
            this.fromNode = e[0].attributes.toNodeID,
            this.firstSegReversed = !0),
            this.toNode = e[1].attributes.toNodeID,
            e[1].attributes.toNodeID === t.getID() && (r.reverse(),
            this.toNode = e[1].attributes.fromNodeID,
            this.secondSegReversed = !0),
            s.pop(),
            s = s.concat(r),
            i = new OpenLayers.Geometry.LineString(s),
            n = new c($.extend({}, o.attributes)),
            n.copyAttributes(o),
            n.geometry = i,
            n.setID(null ),
            n
        },
        doAction: function() {
            if (l.defined(this.segments) || (this.keepLevel = !0,
            this.segments = this.node.attributes.segIDs.map(function(e) {
                return this.model.segments.get(e)
            }, this)),
            !this.node.areSegmentsBridgable(this.segments))
                return !1;
            this.mergedSegment = this.createMergedSegment(this.segments, this.node);
            var e = this.mergedSegment.attributes;
            e.fwdDirection = this.segments[0].attributes.fwdDirection,
            e.revDirection = this.segments[0].attributes.revDirection,
            e.fwdToll = this.segments[0].attributes.fwdToll,
            e.revToll = this.segments[0].attributes.revToll;
            var t = this.segments[0]
              , i = this.segments[1];
            this.firstSegReversed ? (e.fromConnections = _.clone(t.attributes.toConnections),
            e.fromRestrictions = t.cloneRestrictions(t.attributes.toRestrictions)) : (e.fromConnections = _.clone(t.attributes.fromConnections),
            e.fromRestrictions = t.cloneRestrictions(t.attributes.fromRestrictions)),
            this.secondSegReversed ? (e.toConnections = _.clone(i.attributes.fromConnections),
            e.toRestrictions = i.cloneRestrictions(i.attributes.fromRestrictions)) : (e.toConnections = _.clone(i.attributes.toConnections),
            e.toRestrictions = i.cloneRestrictions(i.attributes.toRestrictions)),
            this.firstSegReversed && this.mergedSegment.reverseDirection();
            var s = this.level;
            if (void 0 === this.level && (s = this.node.attributes.segIDs.map(function(e) {
                var t = this.model.segments.get(e);
                return t.attributes.level
            }, this).max(),
            void 0 === s && (s = 0),
            this.keepLevel || s++),
            e.level = s,
            e.streetIDs = (this.segments[0].attributes.streetIDs || []).union(this.segments[1].attributes.streetIDs || []),
            e.origIDs = [this.segments[0].getID(), this.segments[1].getID()],
            this.mergedSegment.attributes.toNodeID = this.toNode,
            this.mergedSegment.attributes.fromNodeID = this.fromNode,
            this.setLockLevel(this.mergedSegment),
            this.doSubAction(new a(this.mergedSegment)),
            this.mergedSegment.attributes.permissions = this.segments[0].attributes.permissions & this.segments[1].attributes.permissions,
            this.fromNode = this.model.nodes.get(this.fromNode),
            this.toNode = this.model.nodes.get(this.toNode),
            this.doSubAction(new u(this.fromNode,t,this.mergedSegment,{
                dontSerialize: !0
            })),
            this.doSubAction(new u(this.toNode,i,this.mergedSegment,{
                dontSerialize: !0
            })),
            this.fromNode && this.doSubAction(new r(this.fromNode,this.mergedSegment)),
            this.toNode && this.doSubAction(new r(this.toNode,this.mergedSegment)),
            this.doSubAction(new o(this.segments[0],{
                hide: !0
            })),
            this.doSubAction(new o(this.segments[1],{
                hide: !0
            })),
            2 === this.node.attributes.segIDs.length) {
                var c = this.node.attributes.segIDs.map(function(e) {
                    return this.model.segments.get(e)
                }, this);
                this.doSubAction(new n(c,this.node,{
                    level: s - 1
                }))
            }
        },
        setLockLevel: function(e) {
            var t = [this.segments[0].attributes.lockRank, this.segments[1].attributes.lockRank]
              , i = [this.segments[0].attributes.rank, this.segments[1].attributes.rank];
            null === t[0] && null === t[1] ? e.attributes.lockRank = null : e.attributes.lockRank = Math.max.apply(null , t),
            e.attributes.rank = Math.max.apply(null , i)
        },
        CLASS_NAME: "Waze.Action.MergeSegments"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = (i(5),
    i(72)), r = i(103), o = i(25), a = i(52), l = i(3), u = i(2);
    n = OpenLayers.Class(l, {
        segment: null ,
        initialize: function(e, t) {
            l.prototype.initialize.apply(this, [t]),
            this.segment = e,
            this.analyzeSnappedFeatures()
        },
        destroy: function() {
            l.prototype.destroy.apply(this)
        },
        analyzeSnappedFeatures: function() {
            if (this.touching = {},
            this.snappedFeatures) {
                this.snappedFeatures instanceof Array || (this.snappedFeatures = [this.snappedFeatures]),
                this.snappedFeatures = this.snappedFeatures.filter(function(e) {
                    return e
                });
                var e, t = this.segment.geometry.getVertices(!0), i = t.first(), n = t.last();
                this.snappedFeatures.forEach(function(t) {
                    e = null ,
                    t.point.equals(i) ? (this.touching.fromVertex = {},
                    e = this.touching.fromVertex) : t.point.equals(n) && (this.touching.toVertex = {},
                    e = this.touching.toVertex),
                    e && (e.feature = t.feature,
                    e.point = t.point,
                    e.distance = t.distance,
                    t.feature.type === u.SEGMENT ? "edge" === t.type || "vertex" === t.type ? e.segmentEdge = !0 : "node" === t.type && (e.segmentNode = !0) : t.feature.type === u.NODE && (e.node = !0))
                }, this)
            }
        },
        connectToExistingNode: function(e, t) {
            t !== e.getID() && (t && this.doSubAction(new a(this.segment,this.model.nodes.get(t))),
            this.doSubAction(new o(e,this.segment)))
        },
        updateEndPoint: function(e, t, i) {
            if (t)
                t.node ? this.connectToExistingNode(t.feature, e) : t.segmentNode ? (e && this.doSubAction(new a(this.segment,this.model.nodes.get(e))),
                this.doSubAction(new r(t.point,[this.segment, t.feature]))) : t.segmentEdge && (e && this.doSubAction(new a(this.segment,this.model.nodes.get(e))),
                this.doSubAction(new s(t.feature,{
                    splitAtPoint: t.point,
                    splitWithSegment: this.segment,
                    splittingPointDistance: t.distance
                })));
            else if (e && this.doSubAction(new a(this.segment,this.model.nodes.get(e))),
            this.createNodes) {
                var n;
                n = i ? this.segment.geometry.components[0] : this.segment.geometry.components[this.segment.geometry.components.length - 1],
                this.doSubAction(new r(n,[this.segment]))
            }
            return !0
        },
        CLASS_NAME: "Waze.Action.SegmentAction"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(5), r = i(27), o = i(294), a = i(2);
    n = OpenLayers.Class(o, {
        segment: null ,
        oldGeometry: null ,
        newGeometry: null ,
        changedState: !1,
        createNodes: !1,
        initialize: function(e, t, i, n) {
            o.prototype.initialize.apply(this, [e, n]),
            this.segment = e,
            this.changedState = !1,
            this.oldGeometry = t === e.geometry ? t.clone() : t,
            this.newGeometry = i === e.geometry ? i.clone() : i
        },
        destroy: function() {
            this.segment = null ,
            this.oldGeometry.destroy(),
            this.newGeometry.destroy(),
            this.oldGeometry = null ,
            this.newGeometry = null ,
            o.prototype.destroy.apply(this)
        },
        doAction: function() {
            var e, t = this.oldGeometry.getVertices(!0);
            return this.replaceGeometry(),
            this.segment.isSingular() ? void this.doSubAction(new r(this.segment)) : (e = this.segment.geometry.getVertices(!0),
            t[0].equals(e[0]) || this.updateEndPoint(this.segment.attributes.fromNodeID, this.touching.fromVertex, !0),
            t[1].equals(e[1]) || this.updateEndPoint(this.segment.attributes.toNodeID, this.touching.toVertex, !1),
            this.segment.state || (this.changedState = !0,
            this.segment.state = OpenLayers.State.UPDATE),
            void this.model.segments.changed(this.segment))
        },
        replaceGeometry: function() {
            this.segment.geometry.components.length = 0,
            this.newGeometry.components.forEach(function(e) {
                this.segment.geometry.addComponent(e.clone())
            }, this),
            this.segment.geometry.calculateBounds(),
            this.segment.bounds = this.segment.geometry.bounds
        },
        undoAction: function() {
            this.changedState && (this.segment.state = null ),
            this.segment.geometry.components.length = 0,
            this.oldGeometry.components.forEach(function(e) {
                this.segment.geometry.addComponent(e.clone())
            }, this),
            this.segment.geometry.calculateBounds(),
            this.segment.bounds = this.segment.geometry.bounds,
            this.model.segments.changed(this.segment),
            o.prototype.undoAction.apply(this)
        },
        redoAction: function() {
            this.segment.geometry.components.length = 0,
            this.newGeometry.components.forEach(function(e) {
                this.segment.geometry.addComponent(e.clone());
            }, this),
            this.segment.geometry.calculateBounds(),
            this.segment.bounds = this.segment.geometry.bounds,
            this.changedState && (this.segment.state = OpenLayers.State.UPDATE),
            this.model.segments.changed(this.segment),
            o.prototype.redoAction.apply(this)
        },
        serialize: function() {
            var e = {};
            e.id = this.segment.getID(),
            e.geometry = this.newGeometry;
            var t = {
                _objectType: a.SEGMENT,
                action: s.TYPE.UPDATE,
                attributes: e
            };
            return t
        },
        getBounds: function() {
            return this.newGeometry.getBounds().clone()
        },
        CLASS_NAME: "Waze.Action.UpdateSegmentGeometry"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(1068), r = i(28), o = i(59);
    n = OpenLayers.Class({
        COOKIE_NAME: "_web_session",
        CSRF_COOKIE_NAME: "_csrf_token",
        CSRF_HTTP_METHODS: /^(post|delete)$/,
        NOT_LOGGED_IN_CODE: 100,
        INVALID_CSRF_CODE: 103,
        UNAUTHORIZED_CODE: 403,
        events: null ,
        expired: !1,
        returningUser: !1,
        user: null ,
        getLoggedInUser: function() {
            var e = this;
            return null !== this.user ? this.user : $.get(Waze.Config.paths.auth, {
                language: I18n.locale
            }).then(function(t) {
                e.user = new s(t,{
                    parse: !0
                })
            }).always(function(t) {
                e.events.triggerEvent("loginStatus", {
                    user: e.user,
                    automatic: !0
                })
            }).promise()
        },
        initialize: function() {
            this.events = new OpenLayers.Events(this),
            $(document).ajaxError($.proxy(this._onServerResponse, this)),
            $.ajaxPrefilter($.proxy(this._addCsrfToken, this))
        },
        _addCsrfToken: function(e, t, i) {
            var n = e.type || "";
            n = n.toLowerCase(),
            this.CSRF_HTTP_METHODS.test(n) && !e.crossDomain && i.setRequestHeader("X-CSRF-Token", $.cookie(this.CSRF_COOKIE_NAME))
        },
        _onServerResponse: function(e, t) {
            if (this.hasUser() && !this.expired && t.status === this.UNAUTHORIZED_CODE)
                try {
                    var i = JSON.parse(t.responseText)
                      , n = i.errorList[0];
                    n.code !== this.INVALID_CSRF_CODE && n.code !== this.NOT_LOGGED_IN_CODE || (this.previousUser = this.user,
                    this.expired = !0,
                    this.returningUser = !1,
                    this.events.triggerEvent("sessionExpired"))
                } catch (e) {}
        },
        hasUser: function() {
            return null !== this.user
        },
        isLoggedIn: function() {
            return null !== this.user && !this.expired
        },
        getUserRank: function() {
            return this.isLoggedIn() ? this.user.rank : r.prototype.MaxLevel
        },
        isAdOperator: function() {
            return !!this.isLoggedIn() && this.user.adOperator
        },
        canEditPlaceUpdates: function() {
            return this.getUserRank() >= o.MIN_EDIT_RANK || this.isAdOperator()
        },
        canEditAdLockedPlaceUpdates: function() {
            return this.getUserRank() >= r.prototype.StaffRank || this.isAdOperator()
        },
        canEditBigJunctions: function() {
            return this.getUserRank() >= W.Config.big_junctions.minRank
        },
        login: function(e, t) {
            var i = this;
            return this.expired && e !== this.user.userName && this.events.triggerEvent("beforeloginchanged") === !1 ? $.Deferred().resolve().promise() : this.doLogin(e, t).done(function(e) {
                var t = new s(e,{
                    parse: !0
                });
                i.returningUser = i.hasUser() && i.user.userName === t.userName,
                i.user = t,
                i.expired = !1,
                i.events.triggerEvent("login", {
                    user: i.user
                })
            }).fail(function(e) {
                i.events.triggerEvent("loginfailed", e)
            }).promise()
        },
        getCsrfToken: function() {
            var e = $.cookie(this.CSRF_COOKIE_NAME);
            return null !== e ? e : $.get("/login/get")
        },
        doLogin: function(e, t) {
            var i = $.Deferred()
              , n = function() {
                return $.post(Waze.Config.loginPath, {
                    user_id: e,
                    password: t
                })
            };
            return $.when(this.getCsrfToken()).then(n).done(function(e) {
                e.reply && e.reply.login ? (i.resolve(),
                W.Report.loginAction("login_success")) : (i.reject({
                    status: 406
                }),
                W.Report.loginAction("login_invalid"))
            }).fail(function() {
                i.reject({
                    status: 500
                })
            }),
            i.then(function() {
                return $.get(Waze.Config.paths.auth)
            })
        },
        logout: function() {
            null !== this.user && this.events.triggerEvent("beforeloginchanged") !== !1 && (this.user = null ,
            this.expired = !1,
            this.returningUser = !1,
            $.cookie(this.COOKIE_NAME, null , {
                path: "/"
            }),
            $.cookie(this.CSRF_COOKIE_NAME, null , {
                path: "/"
            }),
            this.events.triggerEvent("logout", {
                user: null ,
                logout: !0
            }))
        },
        CLASS_NAME: "Waze.LoginManager"
    }),
    e.exports = n
}
, function(e, t) {
    var i = OpenLayers.Class(OpenLayers.Control, {
        DEFAULTS: {
            tolerance: 15,
            node: !0,
            edge: !0,
            vertex: !0
        },
        greedy: !0,
        precedence: ["node", "vertex", "edge"],
        resolution: null ,
        geoToleranceCache: null ,
        layer: null ,
        feature: null ,
        snappedFeature: null ,
        point: null ,
        initialize: function(e) {
            OpenLayers.Control.prototype.initialize.apply(this, [e]),
            this.options = e || {},
            this.options.layer && this.setLayer(this.options.layer);
            var t = OpenLayers.Util.extend({}, this.options.defaults);
            this.defaults = OpenLayers.Util.applyDefaults(t, this.DEFAULTS),
            this.setTargets(this.options.targets),
            0 === this.targets.length && this.layer && this.addTargetLayer(this.layer),
            this.geoToleranceCache = {}
        },
        setLayer: function(e) {
            this.active ? (this.deactivate(),
            this.layer = e,
            this.activate()) : this.layer = e
        },
        setTargets: function(e) {
            if (this.targets = [],
            e && e.length)
                for (var t, i = 0, n = e.length; i < n; ++i)
                    t = e[i],
                    t instanceof OpenLayers.Layer.Vector ? this.addTargetLayer(t) : this.addTarget(t)
        },
        addTargetLayer: function(e) {
            this.addTarget({
                layer: e
            })
        },
        addTarget: function(e) {
            e = OpenLayers.Util.applyDefaults(e, this.defaults),
            e.nodeTolerance = e.nodeTolerance || e.tolerance,
            e.vertexTolerance = e.vertexTolerance || e.tolerance,
            e.edgeTolerance = e.edgeTolerance || e.tolerance,
            this.targets.push(e)
        },
        removeTargetLayer: function(e) {
            for (var t, i = this.targets.length - 1; i >= 0; --i)
                t = this.targets[i],
                t.layer === e && this.removeTarget(t)
        },
        removeTarget: function(e) {
            return OpenLayers.Util.removeItem(this.targets, e)
        },
        activate: function() {
            var e = OpenLayers.Control.prototype.activate.call(this);
            return e && this.layer && this.layer.events && this.layer.events.on({
                sketchstarted: this.onSketchModified,
                sketchmodified: this.onSketchModified,
                vertexmodified: this.onVertexModified,
                scope: this
            }),
            e
        },
        deactivate: function() {
            var e = OpenLayers.Control.prototype.deactivate.call(this);
            return e && this.layer && this.layer.events && this.layer.events.un({
                sketchstarted: this.onSketchModified,
                sketchmodified: this.onSketchModified,
                vertexmodified: this.onVertexModified,
                scope: this
            }),
            this.feature = null ,
            this.snappedFeature = null ,
            this.point = null ,
            e
        },
        onSketchModified: function(e) {
            this.feature = e.feature,
            this.considerSnapping(e.vertex, e.vertex)
        },
        onVertexModified: function(e) {
            this.feature = e.feature;
            var t = this.layer.map.getLonLatFromViewPortPx(e.pixel);
            this.considerSnapping(e.vertex, new OpenLayers.Geometry.Point(t.lon,t.lat))
        },
        considerSnapping: function(e, t) {
            for (var i, n, s = {
                rank: Number.POSITIVE_INFINITY,
                dist: Number.POSITIVE_INFINITY,
                x: null ,
                y: null
            }, r = !1, o = 0, a = this.targets.length; o < a; ++o)
                if (n = this.targets[o],
                i = this.testTarget(n, t)) {
                    if (this.greedy) {
                        s = i,
                        s.target = n,
                        r = !0;
                        break
                    }
                    (i.rank < s.rank || i.rank === s.rank && i.dist < s.dist) && (s = i,
                    s.target = n,
                    r = !0)
                }
            if (r) {
                var l = this.events.triggerEvent("beforesnap", {
                    point: e,
                    x: s.x,
                    y: s.y,
                    distance: s.dist,
                    layer: s.target.layer,
                    snapType: this.precedence[s.rank]
                });
                l !== !1 ? (this.snappedFeature = {
                    feature: s.feature,
                    distance: s.dist,
                    type: this.precedence[s.rank],
                    point: new OpenLayers.Geometry.Point(s.x,s.y)
                },
                e.x = s.x,
                e.y = s.y,
                this.point = e,
                this.events.triggerEvent("snap", {
                    point: e,
                    feature: s.feature,
                    snapType: this.precedence[s.rank],
                    layer: s.target.layer,
                    distance: s.dist
                })) : r = !1
            }
            this.point && !r && (e.x = t.x,
            e.y = t.y,
            this.point = null ,
            this.snappedFeature = null ,
            this.events.triggerEvent("unsnap", {
                point: e
            }))
        },
        testTarget: function(e, t) {
            for (var i, n, s, r, o, a, l, u = {
                node: this.getGeoTolerance(e.nodeTolerance),
                vertex: this.getGeoTolerance(e.vertexTolerance),
                edge: this.getGeoTolerance(e.edgeTolerance)
            }, c = Math.max(u.node, u.vertex, u.edge), d = {
                rank: Number.POSITIVE_INFINITY,
                dist: Number.POSITIVE_INFINITY
            }, h = !1, p = e.layer.features, g = this.precedence.length, m = new OpenLayers.LonLat(t.x,t.y), f = 0, v = p.length; f < v; ++f)
                if (i = p[f],
                i !== this.feature && !i._sketch && i.state !== OpenLayers.State.DELETE && i.model && !i.model.isDeleted() && (!e.filter || e.filter.evaluate(i)) && i.atPoint(m, c, c))
                    for (var y = 0, b = Math.min(d.rank + 1, g); y < b; ++y)
                        if (n = this.precedence[y],
                        e[n])
                            if ("edge" === n) {
                                if (o = i.geometry.distanceTo(t, {
                                    details: !0
                                }),
                                a = o.distance,
                                a <= u[n] && a < d.dist) {
                                    d = {
                                        feature: i,
                                        rank: y,
                                        dist: a,
                                        x: o.x0,
                                        y: o.y0
                                    },
                                    h = !0;
                                    break
                                }
                            } else {
                                s = i.geometry.getVertices("node" === n),
                                l = !1;
                                for (var _ = 0, w = s.length; _ < w; ++_)
                                    r = s[_],
                                    a = r.distanceTo(t),
                                    a <= u[n] && (y < d.rank || y === d.rank && a < d.dist) && (d = {
                                        feature: i,
                                        rank: y,
                                        dist: a,
                                        x: r.x,
                                        y: r.y
                                    },
                                    h = !0,
                                    l = !0);
                                if (l)
                                    break
                            }
            return h ? d : null
        },
        getGeoTolerance: function(e) {
            var t = this.layer.map.getResolution();
            t !== this.resolution && (this.resolution = t,
            this.geoToleranceCache = {});
            var i = this.geoToleranceCache[e];
            return void 0 === i && (i = e * t,
            this.geoToleranceCache[e] = i),
            i
        },
        destroy: function() {
            this.active && this.deactivate(),
            delete this.layer,
            delete this.targets,
            OpenLayers.Control.prototype.destroy.call(this)
        },
        CLASS_NAME: "Waze.Control.Snapping"
    });
    e.exports = i
}
, function(e, t, i) {
    var n, s = i(1055);
    n = OpenLayers.Class(OL.Feature.Vector, {
        initialize: function(e, t, i) {
            OL.Feature.Vector.prototype.initialize.apply(this, [new s(e), t, i])
        },
        getID: function() {
            return this.id
        },
        clone: function() {
            return new n(this.geometry ? this.geometry.clone() : null ,this.attributes,this.style)
        },
        CLASS_NAME: "Waze.Feature.AggregatePointVector"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(16), r = i(6), o = i(29);
    n = OpenLayers.Class(s, {
        nested: {
            geometry: OL.Geometry
        },
        eachSegmentPair: function(e, t, i) {
            Object.forEach(e, function(e, n) {
                var s = e.split(",");
                t.call(i, parseInt(s[0], 10), parseInt(s[1], 10), n, e)
            })
        },
        allConnectionKeys: function(e) {
            var t = []
              , i = [];
            return this.attributes.segIDs.forEach(function(n) {
                var s = this.model.segments.get(n);
                this.attributes.segIDs.forEach(function(n) {
                    var r = this.model.segments.get(n);
                    s && r && (s !== r || e) && (t.push({
                        from: s,
                        to: r
                    }),
                    this.isTurnAllowedBySegDirections(s, r) && i.push({
                        from: s,
                        to: r
                    }))
                }, this)
            }, this),
            {
                all: t,
                legal: i
            }
        },
        isTurnAllowedBySegDirections: function(e, t) {
            if (!e || !t)
                return !1;
            var i = e.attributes.toNodeID === this.getID() ? e.attributes.fwdDirection : e.attributes.revDirection
              , n = t.attributes.fromNodeID === this.getID() ? t.attributes.fwdDirection : t.attributes.revDirection;
            return i && n
        },
        getAngleToSegment: function(e) {
            var t, i, n, s = e.geometry.getVertices();
            return e.attributes.fromNodeID === this.getID() ? (t = s[0],
            i = s[1]) : (t = s[s.length - 1],
            i = s[s.length - 2]),
            n = Math.atan2(i.y - t.y, i.x - t.x).toDeg(),
            n < 0 && (n = 360 + n),
            n
        },
        getDirectionBetweenSegments: function(e, t) {
            var i, n, s, r = e.geometry.components, o = r.length;
            return e.attributes.toNodeID === this.getID() ? (i = r[o - 2],
            n = r[o - 1]) : (i = r[1],
            n = r[0]),
            s = t.attributes.fromNodeID === this.getID() ? t.geometry.components[1] : t.geometry.components[t.geometry.components.length - 2],
            (n.x - i.x) * (s.y - i.y) - (n.y - i.y) * (s.x - i.x) > 0
        },
        isDisconnected: function() {
            return this.attributes.segIDs.isEmpty()
        },
        isConnectedToSegment: function(e) {
            return this.attributes.segIDs.contains(e.getID())
        },
        isConnectedToBigJunction: function() {
            var e = this.model.segments.getByIds(this.attributes.segIDs);
            return e.some(function(e) {
                return e.isBigJunctionShort()
            }, this)
        },
        isAllowedToMoveNode: function() {
            return this.attributes.segIDs.every(function(e) {
                var t = this.model.segments.get(e);
                return t && t.isAllowed(o.Segments.EDIT_GEOMETRY) && !t.isBigJunctionShort()
            }, this)
        },
        isDeleteable: function(e) {
            var t = this.attributes.segIDs.map(function(t) {
                return e.segments.get(t)
            });
            return t = t.filter(function(e) {
                return r.defined(e)
            }),
            t.length === this.attributes.segIDs.length && this.areSegmentsBridgable(t) && s.prototype.isDeletable.apply(this)
        },
        areSegmentsBridgable: function(e) {
            if (!e || 2 !== e.length)
                return !1;
            if (!this.attributes.segIDs.contains(e[0].getID()) || !this.attributes.segIDs.contains(e[1].getID()))
                return !1;
            if (!this.isTurnAllowedBySegDirections(e[0], e[1]) && !this.isTurnAllowedBySegDirections(e[1], e[0]))
                return !1;
            if (e[0].attributes.primaryStreetID !== e[1].attributes.primaryStreetID)
                return !1;
            var t = ["fwdMaxSpeed", "revMaxSpeed"]
              , i = t;
            e[0].attributes.toNodeID !== e[1].attributes.fromNodeID && (i = t.concat().reverse());
            var n = t.every(function(t, n) {
                return e[0].attributes[t] === e[1].attributes[i[n]]
            });
            return !!n
        },
        allSegmentsPresent: function(e) {
            return this.attributes.segIDs.every(function(t) {
                return e.segments.get(t)
            })
        },
        connectionsExist: function() {
            return !this.allConnectionKeys().legal.isEmpty()
        },
        areConnectionsEditable: function() {
            var e = this.model.segments.getByIds(this.attributes.segIDs);
            return e.length === this.attributes.segIDs.length && e.every(function(e) {
                return e.canEditConnections()
            })
        },
        areAllConnectionsEnabled: function() {
            var e = this.allConnectionKeys().legal;
            return !e.isEmpty() && e.every(function(e) {
                var t = this.model.segments.get(e.from.getID());
                return t.attributes.toNodeID === this.getID() ? t.attributes.toConnections[e.to.getID()] : t.attributes.fromConnections[e.to.getID()]
            }, this)
        },
        areAllConnectionsDisabled: function() {
            var e = this.allConnectionKeys().legal;
            return !e.isEmpty() && e.every(function(e) {
                var t = this.model.segments.get(e.from.getID());
                return t.attributes.toNodeID === this.getID() ? !t.attributes.toConnections[e.to.getID()] : !t.attributes.fromConnections[e.to.getID()]
            }, this)
        },
        PERMISSIONS: {
            EDIT_GEOMETRY: 1,
            DELETE: 2,
            EDIT_OPEN_TURNS: 4,
            EDIT_CLOSE_TURNS: 8
        },
        CLASS_NAME: "Waze.Feature.Vector.Node"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(16), r = i(4), o = i(44).UNIT;
    n = OpenLayers.Class(s, {
        nested: {
            geometry: OL.Geometry
        },
        initialize: function(e) {
            s.prototype.initialize.apply(this, arguments),
            _.defaults(this.attributes, this.defaults)
        },
        isValidationStateEditable: function() {
            return this.state === OpenLayers.State.UPDATE || !this.attributes.validated
        },
        PERMISSIONS: {
            EDIT_GEOMETRY: 1,
            EDIT_PROPERTIES: 2,
            DELETE: 4
        },
        UNITS: {
            speed: o.KILOMETER
        },
        TYPES: {
            SPEED_CAMERA: 2,
            DUMMY: 3,
            RED_LIGHT: 4
        },
        CLASS_NAME: "Waze.Feature.Vector.SpeedCamera"
    }),
    n.prototype.defaults = {
        type: n.prototype.TYPES.SPEED_CAMERA,
        validated: !0,
        speed: 0,
        azymuth: 0,
        permissions: r.ALL_PERMISSIONS
    },
    e.exports = n
}
, function(e, t) {
    var i = OpenLayers.Class(OpenLayers.Handler.Keyboard, {
        initialize: function(e, t, i) {
            OpenLayers.Handler.Keyboard.prototype.initialize.apply(this, arguments)
        },
        destroy: function() {
            OpenLayers.Handler.Keyboard.prototype.destroy.apply(this, arguments)
        },
        handleKeyEvent: function(e) {
            $(e.target).is(":input") || OpenLayers.Handler.Keyboard.prototype.handleKeyEvent.apply(this, arguments)
        },
        CLASS_NAME: "Waze.Handler.KeyboardShortcut"
    });
    e.exports = i
}
, function(e, t, i) {
    var n, s = i(57), r = i(9);
    n = Marionette.ItemView.extend({
        className: "location-info",
        template: "Waze/Modules/Topbar/templates/location-info",
        bindings: {
            ".full-address": "fullAddress"
        },
        initialize: function() {
            this._dataModel = this.options.dataModel,
            this._map = this.options.map,
            this.model = new Backbone.Model({
                fullAddress: ""
            }),
            this._dataModel.events.register("mergeend", this, this._update),
            this._dataModel.events.register("zoomend", this, this._update)
        },
        onDestroy: function() {
            this._dataModel.events.unregister("mergeend", this, this._update),
            this._dataModel.events.unregister("zoomend", this, this._update)
        },
        _update: function() {
            var e = this._getAddressFromTopCity() || this._getAddressFromMainCountry() || "";
            this.model.set({
                fullAddress: e
            })
        },
        _getAddressFromTopCity: function() {
            if (this._shouldShowTopCity()) {
                var e = s.fromCityID(this._dataModel.segments.topCityID, this._dataModel);
                return r.formatAddress(e)
            }
            return null
        },
        _getAddressFromMainCountry: function() {
            var e = this._dataModel.countries.top;
            return null === e ? null : e.name
        },
        _shouldShowTopCity: function() {
            return this._map.getZoom() >= W.Config.segments.minDisplayZoom && null !== this._dataModel.segments.topCityID
        },
        onRender: function() {
            this.stickit()
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(6);
    n = OpenLayers.Class({
        visit: function(e) {
            var t = this[e.CLASS_NAME.split(".").last()];
            return s.defined(t) || (t = this._default),
            t.call(this, e)
        },
        _default: function() {},
        CLASS_NAME: "Waze.Util.Visitor"
    }),
    n.Order = {
        PRE: 0,
        POST: 1,
        IN: 2
    },
    e.exports = n
}
, , , , , , function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o, a;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='controls-container'>\n<div class='entry-point-paths'>"),
                a = this.paths,
                s = n = 0,
                r = a.length; n < r; s = ++n)
                    o = a[s],
                    i.push("<div class='clearfix path-item' data-path-index='" + t(e(s)) + "'>\n<input class='navigable-checkbox' id='" + t(e(this.getCheckboxID(o, s))) + "' type='checkbox' name='navigable" + t(e(s)) + "' checked='" + t(e(o.get("navigable"))) + "' disabled='" + t(e(!this.enableEditing || !o.isLegal())) + "' data-path-index='" + t(e(s)) + "'>\n<label for='" + t(e(this.getCheckboxID(o, s))) + "'>\n<div class='entry path-access-point'>" + t(e(this.getFromName(o))) + "</div>\nto\n<div class='exit path-access-point'>" + t(e(this.getToName(o))) + "</div>"),
                    o.isLegal() || i.push("" + e(this.renderPartial("Waze/Modules/BigJunction/templates/validation_errors", o))),
                    i.push("</label>\n</div>");
                return i.push("</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='errors'>"),
                this.hasRestrictions() && i.push("" + t(e(this.t("edit.big_junction.validation_errors.has_restrictions")))),
                this.trivialConnectionExists() && i.push("" + t(e(this.t("edit.big_junction.validation_errors.trivial_connection_exists")))),
                i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='city-feature-editor'>\n<div class='feature-editor-header'>\n<div class='selection'>\n<span class='text'>" + t(e(this.t("edit.city.title"))) + "</span>\n</div>\n<div class='preview'>\n<span class='city-name'>"),
                i.push("" + t(e(this.city.attributes.name))),
                i.push("</span>"),
                this.canEdit && i.push("<a class='edit-button'>\n<i class='waze-icon-edit'></i>\n</a>"),
                i.push("</div>\n</div>\n<form class='attributes-form inner-form'>\n<div class='form-group'>\n<label class='control-label'>"),
                i.push("" + t(e(this.t("edit.address.city")))),
                i.push("</label>\n<div class='controls'>\n<input class='city-name form-control' type='text' autocomplete='off'>\n</div>\n</div>\n<div class='action-buttons'>\n<button class='btn btn-default cancel-button' type='button'>" + t(e(this.t("edit.cancel"))) + "</button>\n<button class='btn btn-primary save-button' type='button'>" + t(e(this.t("edit.apply"))) + "</button>\n</div>\n<div class='loading waze-loader-sm'></div>\n</form>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='" + ["edit-closure", "" + t(e(this.newClosure ? "new" : void 0))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>"),
                this.showHeader && i.push("<div class='header'>\n<a class='cancel-button pull-right'>" + t(e(this.t("edit.cancel"))) + "</a>\n<h4 class='title'>" + t(e(this.t("closures.add"))) + "</h4>\n</div>"),
                i.push("<form class='form' action='#' method='post'>\n<div class='form-group'>\n<label class='control-label' for='closure_reason'>" + t(e(this.t("closures.fields.reason"))) + "</label>\n<div class='controls'>\n<input class='form-control' type='text' name='closure_reason'>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label' for='closure_direction'>" + t(e(this.t("closures.fields.direction"))) + "</label>\n<div class='controls'>\n<select class='form-control' name='closure_direction'>"),
                r = [1, 2, 3],
                n = 0,
                s = r.length; n < s; n++)
                    o = r[n],
                    i.push("<option value='" + t(e(o)) + "'>" + t(e(this.t("segment.direction." + o))) + "</option>");
                return i.push("</select>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label' for='closure_startDate'>" + t(e(this.t("closures.fields.startDate"))) + "</label>\n<div class='controls'>\n<div class='date date-input-group input-group pull-left'>\n<input class='form-control start-date' type='text' name='closure_startDate'>\n<span class='input-group-addon'>\n<i class='fa fa-calendar'></i>\n</span>\n</div>\n<div class='bootstrap-timepicker input-group'>\n<input class='form-control start-time' type='text' name='closure_startTime'>\n<span class='input-group-addon'>\n<i class='fa fa-clock-o'></i>\n</span>\n</div>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label' for='closure_endDate'>" + t(e(this.t("closures.fields.endDate"))) + "</label>\n<div class='controls'>\n<div class='date date-input-group input-group pull-left'>\n<input class='end-date form-control' type='text' name='closure_endDate'>\n<span class='input-group-addon'>\n<i class='fa fa-calendar'></i>\n</span>\n</div>\n<div class='bootstrap-timepicker input-group'>\n<input class='end-time form-control' type='text' name='closure_endTime'>\n<span class='input-group-addon'>\n<i class='fa fa-clock-o'></i>\n</span>\n</div>\n</div>\n</div>"),
                this.canEditMTE && (i.push("<div class='form-group'>\n<label class='control-label control-label-inline' for='closure_eventId'>" + t(e(this.t("closures.fields.event"))) + "</label>\n<i class='mte-tooltip waze-tooltip' data-toggle='tooltip' title='" + t(e(I18n.t("closures.tooltip.mte"))) + "'></i>\n<div class='controls'>\n<div class='mte-message mte-message-empty'>"),
                i.push("" + t(e(this.t("closures.no_events_empty_dates")))),
                i.push("</div>\n<select class='form-control' name='closure_eventId' required='" + t(e(this.newClosure)) + "'></select>\n</div>\n</div>")),
                i.push("<div class='checkbox'>\n<label class='control-label control-label-inline'>\n<input type='checkbox' name='closure_permanent'>"),
                i.push("" + t(e(this.t("closures.fields.permanent")))),
                i.push("</label>\n<i class='permanent-tooltip waze-tooltip' data-toggle='tooltip' title='" + t(e(I18n.t("closures.tooltip.permanent"))) + "'></i>\n</div>\n<input type='submit' style='display: none;'>\n<ul class='additional-attributes list-unstyled'>"),
                i.push("" + e(this.renderPartial("templates/add_update_details", this.closures[0]))),
                null != this.getProvider() && i.push("<li>" + t(e(this.t("closures.fields.provider", {
                    provider: this.getProvider()
                }))) + "</li>"),
                i.push("</ul>\n<div class='message' style='display: none'></div>\n<div class='action-buttons'>\n<div class='btn btn-primary save-button'>\n<i class='fa fa-save'></i>"),
                i.push("" + t(e(this.t("toolbar.save.title")))),
                i.push("</div>"),
                this.showFooterCancelButton && i.push("<div class='btn btn-default cancel-button'>" + t(e(this.t("edit.cancel"))) + "</div>"),
                i.push("</div>\n</form>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='details section'>"),
                this.canEdit && (i.push("<div class='buttons pull-right'>"),
                this.showLocateButton && i.push("<a class='locate'>\n<i class='waze-icon-crosshair'></i>\n</a>"),
                i.push("<a class='delete'>\n<i class='waze-icon-trash'></i>\n</a>\n<a class='edit'>\n<i class='waze-icon-edit'></i>\n</a>\n</div>"),
                this.showApplyToAll && i.push("<a class='apply-to-all' href='#'>" + t(e(this.t("closures.apply_to_all"))) + "</a>")),
                i.push("<div class='direction'>"),
                this.direction === this.DIRECTION.A_TO_B ? i.push("<div class='dir-icon'>A</div>\n<div class='dir-sep'></div>\n<div class='dir-icon'>B</div>") : this.direction === this.DIRECTION.B_TO_A ? i.push("<div class='dir-icon'>B</div>\n<div class='dir-sep'></div>\n<div class='dir-icon'>A</div>") : (i.push("<div class='dir-label span'>"),
                i.push("" + t(e(this.t("segment.direction.label." + this.direction)))),
                i.push("</div>")),
                i.push("</div>\n<div class='description'>" + t(e(this.description)) + "</div>"),
                this.eventName && (i.push("<div class='event-name'>\n<i class='waze-icon-event'></i>"),
                i.push("" + e(this.eventName)),
                i.push("</div>")),
                i.push("</div>\n<div class='dates row section'>\n<div class='col-xs-6 start-date'>\n<div class='date-label'>" + t(e(this.t("closures.headers.start"))) + "</div>"),
                this.isStartDateSet ? i.push("<div class='date'>" + t(e(this.l("date.formats.default", this.startDate))) + "</div>\n<div class='time'>" + t(e(this.formatTime(this.startDate))) + "</div>") : i.push("<div class='date'>" + t(e(this.t("closures.date_not_set"))) + "</div>"),
                i.push("</div>\n<div class='col-xs-6 end-date'>\n<div class='date-label'>" + t(e(this.t("closures.headers.end"))) + "</div>"),
                this.isEndDateSet ? i.push("<div class='date'>" + t(e(this.l("date.formats.default", this.endDate))) + "</div>\n<div class='time'>" + t(e(this.formatTime(this.endDate))) + "</div>") : i.push("<div class='date'>" + t(e(this.t("closures.date_not_set"))) + "</div>"),
                i.push("</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div class='main'></div>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                this.canEdit && this.canAdd ? (i.push("<div class='add-closure-button btn btn-pastrama btn-positive'>\n<i class='fa fa-plus'></i>"),
                i.push("" + t(e(this.t("closures.add")))),
                i.push("</div>")) : this.showSaveMessage ? i.push("<div class='alert alert-danger'>" + t(e(this.t("closures.save_your_changes"))) + "</div>") : this.showActivateRepoMessage && i.push("<div class='alert alert-danger'>" + t(e(this.t("closures.enable_layer"))) + "</div>"),
                i.push("<ul class='full-closures list-unstyled'></ul>"),
                this.showPartialClosuresHeader && i.push("<div class='partial-closures-header' style='display: none;'>" + t(e(this.t("closures.partial_header"))) + "</div>"),
                i.push("<ul class='list-unstyled partial-closures'></ul>\n<div class='message' style='display: none'></div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                if (t = this.__htmlEscape,
                e = this.__cleanValue,
                n = function(e) {
                    return e.replace(/\n/g, "&#x000A;")
                }
                ,
                i = [],
                i.push("<div class='selection'>\n<span class='text'>" + t(e(this.t("edit.map_comment.title"))) + "</span>\n</div>\n<div class='tab-content'>\n<div class='active tab-pane'></div>\n<div class='name-editor-region'></div>\n<div class='conversation-region'></div>\n<form class='attributes-form side-panel-section'>"),
                this.comment.isNew() && i.push("<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.map_comment.fields.subject"))) + "</label>\n<div class='controls'>\n<input class='form-control' type='text' name='subject' value='" + t(e(this.comment.attributes.subject)) + "'>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.map_comment.fields.body"))) + "</label>\n<div class='controls'>\n<textarea class='form-control' name='body'>" + n(t(e(this.comment.attributes.body))) + "</textarea>\n</div>\n</div>"),
                i.push("<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.map_comment.fields.lock"))) + "</label>\n<div class='controls'>\n<select class='form-control' data-type='numeric' name='lockRank'>"),
                this.editable)
                    for (r = s = 0,
                    o = this.userRank; 0 <= o ? s <= o : s >= o; r = 0 <= o ? ++s : --s)
                        i.push("" + e(this.h.option(this.h.formatRank(r), r, this.comment.attributes.lockRank)));
                else
                    i.push("<option>" + t(e(this.h.formatRank(this.comment.attributes.lockRank))) + "</option>");
                return i.push("</select>\n</div>\n</div>\n<div class='end-date-form-group form-group'>\n<label class='control-label'>" + t(e(this.t("edit.map_comment.fields.endDate"))) + "</label>\n<div class='controls'>\n<div class='date date-input-group input-group pull-left'>\n<span class='input-group-addon'>\n<input class='no-end-date' type='checkbox'>\n</span>\n<input class='end-date form-control' type='text'>\n<span class='input-group-addon open-calendar-button'>\n<i class='fa fa-calendar'></i>\n</span>\n</div>\n<div class='bootstrap-timepicker input-group'>\n<input class='end-time form-control' type='text'>\n<span class='input-group-addon'>\n<i class='fa fa-clock-o'></i>\n</span>\n</div>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.map_comment.fields.type"))) + "</label>\n<div class='controls'>\n<div class='btn-group' data-toggle='buttons'>\n<label class='" + ["btn", "btn-default", "" + t(e(this.comment.isPoint() ? "active" : void 0))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "' disabled='" + t(e(!this.comment.arePropertiesEditable())) + "'>\n<input type='radio' name='isPoint' checked='" + t(e(this.comment.isPoint())) + "' value='true'>"),
                i.push("" + t(e(this.t("edit.map_comment.type.point")))),
                i.push("</label>\n<label class='" + ["btn", "btn-default", "" + t(e(this.comment.isPoint() ? void 0 : "active"))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "' disabled='" + t(e(!this.comment.arePropertiesEditable())) + "'>\n<input type='radio' name='isPoint' checked='" + t(e(!this.comment.isPoint())) + "' value='false'>"),
                i.push("" + t(e(this.t("edit.map_comment.type.area")))),
                i.push("</label>\n</div>\n</div>\n</div>\n</form>\n<ul class='additional-attributes list-unstyled side-panel-section'>"),
                i.push("" + e(this.renderPartial("templates/add_update_details", this.comment.attributes))),
                i.push("<li>" + t(e(this.t("edit.id", {
                    num: this.comment.getID()
                }))) + "</li>\n</ul>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='preview'>\n<h3 class='subject-preview'></h3>\n<div class='body-preview'></div>\n<div class='edit-button'>\n<i class='waze-icon-edit'></i>\n</div>\n</div>\n<form class='edit'>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.map_comment.fields.subject"))) + "</label>\n<div class='controls'>\n<input class='form-control subject-input' type='text'>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.map_comment.fields.body"))) + "</label>\n<div class='controls'>\n<textarea class='body-textarea form-control'></textarea>\n</div>\n</div>\n<button class='apply-button btn btn-block btn-primary' type='button'>"),
                i.push("" + t(e(this.t("edit.map_comment.name_edit.apply")))),
                i.push("</button>\n</form>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='" + ["comment-content", "" + t(e(this.isByReporter() ? "reporter" : void 0))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>\n<div class='comment-title'>\n<span class='username'>" + t(e(this.getUserName())) + "</span>\n<span class='date'>" + t(e(I18n.l("date.formats.long", this.createdOn))) + "</span>\n</div>\n<div class='text'>"),
                o = this.getCommentLines(),
                n = 0,
                s = o.length; n < s; n++)
                    r = o[n],
                    i.push("" + t(e(r))),
                    i.push("<br>");
                return i.push("</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='no-comments'>"),
                i.push("" + t(e(this.t("conversation.no_comments")))),
                i.push("<br>"),
                i.push("" + t(e(this.t("conversation.ask")))),
                i.push("</div>\n<ul class='comment-list list-unstyled'></ul>\n<form class='clearfix new-comment-form'>\n<div class='controls-container'>\n<textarea class='form-control new-comment-text' placeholder='" + t(e(this.t("conversation.enter"))) + "' required></textarea>\n<button class='btn btn-default send-button' type='submit'>" + t(e(this.t("conversation.send"))) + "</button>"),
                i.push("" + e(this.h.checkbox(this.t("conversation.follow"), "follow", "on"))),
                i.push("</div>\n</form>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='feed-loading sidebar-loader'>\n<div class='fa-spin spinner'></div>\n</div>\n<div class='feed-empty'>\n<div class='feed-empty-message'>"),
                i.push("" + t(e(this.t("feed.empty")))),
                i.push("</div>\n<div class='feed-empty-image'></div>\n</div>\n<div class='feed-content'>\n<div class='feed-notifications'></div>\n<div class='feed-messages'></div>\n<div class='feed-issues'></div>\n</div>\n<div class='feed-more'>\n<div class='btn btn-block btn-default feed-load-more'>"),
                i.push("" + t(e(this.t("feed.load_more")))),
                i.push("</div>\n<div class='feed-loading-more sidebar-loader'>\n<div class='fa-spin spinner'></div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<ul class='feed-list'></ul>\n<div class='toggle'>\n<a class='counter' href='#'></a>\n<span class='icon-toggle'></span>\n</div>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='banner'></div>\n<div class='inner'>\n<div class='delete'></div>\n<div class='save-alert'></div>\n<div class='content'>"),
                this.motivation && (i.push("<div class='motivation'>\n<i class='waze-icon-star'></i>"),
                i.push("" + t(e(this.motivation))),
                i.push("</div>")),
                i.push("<div class='title'>\n<span class='type'>" + t(e(this.type)) + "</span>\n<span class='timestamp'>"),
                i.push("      " + t(e(this.timestamp))),
                i.push("</span>\n</div>\n<div class='subtext'>"),
                this.place && i.push("<span class='place'>" + t(e("" + this.place)) + "</span>"),
                this.street && (this.place && i.push("<span>" + t(e(", ")) + "</span>"),
                i.push("<span class='street'>" + t(e("" + this.street)) + "</span>")),
                this.city && i.push("<span class='city'>" + t(e(", " + this.city)) + "</span>"),
                this.state && i.push("<span class='state'>" + t(e(", " + this.state)) + "</span>"),
                this.country && i.push("<span class='country'>" + t(e(", " + this.country)) + "</span>"),
                i.push("</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "").replace(/[\s\n]*\u0091/gm, "").replace(/\u0092[\s\n]*/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='inner'>\n<div class='delete'></div>\n<div class='image'></div>\n<div class='content'>\n<div class='title'>"),
                i.push("" + t(e(this.title))),
                i.push("</div>\n<div class='from'>"),
                i.push("" + t(e(this.t("feed.messages.from")))),
                i.push("<div class='sender'>"),
                i.push("" + t(e(this.sender))),
                i.push("</div>\n</div>\n<div class='timestamp'>"),
                i.push("    " + t(e(this.timestamp))),
                i.push("</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "").replace(/[\s\n]*\u0091/gm, "").replace(/\u0092[\s\n]*/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='header'>\n<div class='buttons'>\n<div class='close-panel'>×</div>\n<div class='delete'></div>\n</div>\n<div class='title'>"),
                i.push("" + t(e(this.title))),
                i.push("</div>\n<div class='timestamp'>"),
                i.push("" + t(e(this.timestamp))),
                i.push("</div>\n</div>\n<div class='body'>"),
                this.imageURL && i.push("<section class='image'>\n<img src='" + t(e(this.imageURL)) + "'>\n</section>"),
                this.subject && i.push("<section class='heading'>\n<h2>" + t(e(this.subject)) + "</h2>\n</section>"),
                this.sender && (i.push("<section class='sender'>"),
                i.push("" + t(e(this.t("feed.messages.from")))),
                i.push("<a href='" + t(e(this.senderURL)) + "' target='_blank'>" + t(e(this.sender)) + "</a>\n</section>")),
                i.push("<section class='content'>"),
                i.push("" + t(e(this.message))),
                i.push("</section>"),
                this.linkText && i.push("<section class='link'>\n<a href='" + t(e(this.linkURL)) + "' target='_blank'>" + t(e(this.linkText)) + "</a>\n</section>"),
                i.push("</div>\n<div class='footer'>\n<section class='buttons'>"),
                this.buttonText && (i.push("<a class='btn btn-block btn-primary' href='" + t(e(this.buttonURL)) + "' target='_blank'>"),
                i.push("" + t(e(this.buttonText))),
                i.push("</a>")),
                this.hasNext ? (i.push("<div class='btn btn-block btn-default next'>"),
                i.push("" + t(e(this.t("feed.details.next")))),
                i.push("</div>")) : (i.push("<div class='btn btn-block btn-default done'>"),
                i.push("" + t(e(this.t("feed.details.done")))),
                i.push("</div>")),
                i.push("</section>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='inner'>\n<div class='delete'></div>\n<div class='image'></div>\n<div class='content'>\n<div class='title'>"),
                i.push("" + t(e(this.title))),
                i.push("</div>\n<div class='subtext'>"),
                i.push("" + t(e(this.shortMessage))),
                i.push("</div>\n<div class='timestamp'>"),
                i.push("    " + t(e(this.timestamp))),
                i.push("</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "").replace(/[\s\n]*\u0091/gm, "").replace(/\u0092[\s\n]*/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<button class='btn btn-default pan-button'>\n<span></span>\n</button>\n<button class='btn btn-default loading' disabled='" + t(e(!0)) + "'>\n<span class='fa-spin'></span>\n</button>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='name'>" + t(e(this.h.formatUserName(this.userID))) + "</div>"),
                this.isPartner && (i.push("<div class='partner'>" + t(e(this.t("mte.edit.contributors.partner"))) + "</div>"),
                this.editable && i.push("<div class='remove-button'>\n<i class='fa fa-remove'></i>\n</div>")),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='add-partner-section'>\n<button class='add-partner-button btn btn-block btn-positive btn-primary'>\n<i class='fa fa-plus'></i>"),
                i.push("" + t(e(this.t("mte.edit.contributors.add_partner")))),
                i.push("</button>\n<form class='add-partner-form'>\n<div class='header'>\n<a class='cancel-button pull-right'>" + t(e(this.t("mte.edit.contributors.cancel"))) + "</a>\n<h4 class='title'>" + t(e(this.t("mte.edit.contributors.add_partner"))) + "</h4>\n</div>\n<div class='content'>\n<div class='form-group'>\n<select class='form-control partner-select' required></select>\n</div>\n<button class='add-button btn btn-block btn-primary' type='submit'>"),
                i.push("" + t(e(this.t("mte.edit.contributors.add")))),
                i.push("</button>\n</div>\n</form>\n</div>\n<div class='list'></div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div class='closures'></div>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='loading'>"),
                i.push("" + t(e(this.loadingMessage))),
                i.push("</div>\n<div class='error'>"),
                i.push("" + t(e(this.errorMessage))),
                i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='preview'>\n<h3 class='english-name-preview'>\n<button class='btn-link edit-names-button'>\n<span class='name'></span>\n<span class='language-preview'>en</span>\n<i class='waze-icon-edit'></i>\n</button>\n</h3>\n<h3 class='local-name-preview'>\n<button class='btn-link edit-names-button'>\n<span class='name'></span>\n<span class='language-preview local-language-preview'>en</span>\n<i class='waze-icon-edit'></i>\n</button>\n</h3>\n</div>\n<form class='edit-form inner-form side-panel-section'>\n<div class='english-name form-group'>\n<div class='controls'>\n<input class='english-name form-control' required autocomplete='off' maxlength='100' type='text'>\n<select class='form-control language-select' disabled>\n<option>English</option>\n</select>\n</div>\n</div>\n<div class='form-group local-name'>\n<div class='controls'>\n<button class='btn-link remove-local-name-button' type='button'>\n<i class='fa fa-remove'></i>\n</button>\n<input class='form-control local-name' autocomplete='off' maxlength='100' type='text'>\n<select class='form-control language-select locale'></select>\n</div>\n</div>\n<button class='add-local-name-button btn-link' type='button'>\n<i class='fa fa-plus'></i>"),
                i.push("" + t(e(this.t("mte.edit.name_list.add_language")))),
                i.push("</button>\n<button class='apply-button btn btn-primary'>Apply</button>\n</form>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                if (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='edit-panel flex-parent mte-edit-view'>\n<div class='flex-noshrink navigation'>\n<button class='back-button btn-link' type='button'>\n&#60;"),
                i.push("" + t(e(this.t("mte.edit.back_to_search")))),
                i.push("</button>\n</div>\n<div class='contents'>\n<div class='no-outer-padding panel-header'>\n<div class='title'>\n<label class='control-label'>"),
                this.newModel ? i.push("" + t(e(this.t("mte.edit.add_event_title")))) : i.push("" + t(e(this.t("mte.edit.edit_event_title")))),
                i.push("</label>"),
                this.newModel || i.push("<div class='submit-buttons'>\n<button class='btn btn-defaults submit-button'>" + t(e(this.t("mte.edit.submit"))) + "</button>\n<div class='submitted-indication'>" + t(e(this.t("mte.edit.submitted"))) + "</div>\n</div>\n<div class='publish-buttons'>\n<button class='btn btn-default publish-button'>" + t(e(this.t("mte.edit.publish"))) + "</button>\n<div class='published-indication'>" + t(e(this.t("mte.edit.published"))) + "</div>\n</div>"),
                i.push("</div>\n<div class='names-container'>\n<div class='names-region'></div>\n<div class='validation-error' for='names'></div>\n</div>\n<ul class='nav nav-tabs'>\n<li class='active'>\n<a data-toggle='tab' href='#mte-edit-general'>"),
                i.push("" + t(e(this.t("mte.edit.tabs.general")))),
                i.push("</a>\n</li>\n<li class='closures-tab'>"),
                this.newModel ? (i.push("<a disabled title='" + t(e(this.t("mte.edit.tabs.closures_disabled"))) + "'>"),
                i.push("" + t(e(this.t("mte.edit.tabs.closures")))),
                i.push("</a>")) : (i.push("<a data-toggle='tab' href='#mte-edit-closures'>"),
                i.push("" + t(e(this.t("mte.edit.tabs.closures")))),
                i.push("</a>")),
                i.push("</li>\n<li class='contributors-tab'>"),
                this.newModel ? (i.push("<a disabled title='" + t(e(this.t("mte.edit.tabs.partners_disabled"))) + "'>"),
                i.push("" + t(e(this.t("mte.edit.tabs.contributors")))),
                i.push("</a>")) : (i.push("<a data-toggle='tab' href='#mte-edit-contributors'>"),
                i.push("" + t(e(this.t("mte.edit.tabs.contributors")))),
                i.push("</a>")),
                i.push("</li>\n</ul>\n</div>\n<div class='tab-content'>\n<div class='active tab-pane' id='mte-edit-general'>\n<form class='attributes-form'>"),
                i.push("<button class='form-submit-button hidden'></button>\n<div class='form-group side-panel-section'>\n<label class='control-label required-field'>" + t(e(this.t("mte.edit.fields.category"))) + "</label>\n<div class='controls'>\n<select class='category form-control' required></select>\n</div>\n</div>\n<div class='side-panel-section'>\n<label class='control-label control-label-inline required-field'>" + t(e(this.t("mte.edit.fields.location"))) + "</label>\n<i class='location-tooltip waze-tooltip' data-toggle='tooltip' title='" + t(e(I18n.t("mte.edit.location_tooltip"))) + "'></i>\n<div class='address-edit-region'></div>\n<div class='validation-error' for='cityID'></div>\n</div>\n<div class='side-panel-section'>\n<div class='form-group start-date-group'>\n<label class='control-label required-field'>" + t(e(this.t("mte.edit.fields.start_date"))) + "</label>\n<div class='controls'>\n<div class='date date-input-group input-group pull-left'>\n<input class='date form-control start-date' type='text'>\n<span class='input-group-addon'>\n<i class='fa fa-calendar'></i>\n</span>\n</div>\n<div class='bootstrap-timepicker input-group'>\n<input class='form-control start-time' type='text'>\n<span class='input-group-addon'>\n<i class='fa fa-clock-o'></i>\n</span>\n</div>\n</div>\n<div class='validation-error' for='startDate'></div>\n</div>\n<div class='end-date-group form-group'>\n<label class='control-label required-field'>" + t(e(this.t("mte.edit.fields.end_date"))) + "</label>\n<div class='controls'>\n<div class='date date-input-group input-group pull-left'>\n<input class='date end-date form-control' type='text'>\n<span class='input-group-addon'>\n<i class='fa fa-calendar'></i>\n</span>\n</div>\n<div class='bootstrap-timepicker input-group'>\n<input class='end-time form-control' type='text'>\n<span class='input-group-addon'>\n<i class='fa fa-clock-o'></i>\n</span>\n</div>\n</div>\n<div class='validation-error' for='endDate'></div>\n</div>\n</div>\n<div class='form-group side-panel-section'>\n<label class='control-label'>" + t(e(this.t("mte.edit.fields.url"))) + "</label>\n<div class='controls'>\n<input class='form-control url' type='text'>\n</div>\n</div>"),
                this.showTweetControls) {
                    if (i.push("<div class='side-panel-section'>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("mte.edit.tweet_text"))) + "</label>\n<textarea class='form-control' name='tweetText' maxlength='" + t(e(140)) + "'></textarea>\n</div>"),
                    this.modelAttributes.twitterAccountsUrls.length) {
                        for (i.push("<div class='form-group twitter-accounts-urls'>\n<label class='control-label'>" + t(e(this.t("mte.edit.twitter_accounts_urls"))) + "</label>\n<ul>"),
                        r = this.modelAttributes.twitterAccountsUrls,
                        n = 0,
                        s = r.length; n < s; n++)
                            o = r[n],
                            i.push("<li>\n<a href='" + t(e(o)) + "' target='_blank'>" + t(e(o)) + "</a>\n</li>");
                        i.push("</ul>\n</div>")
                    }
                    i.push("</div>")
                }
                return i.push("<div class='event-page form-group side-panel-section'>\n<a class='btn btn-block btn-primary' target='_blank'>"),
                i.push("" + t(e(this.t("mte.edit.waze_event_page")))),
                i.push("</a>\n</div>\n<div class='side-panel-section'>"),
                i.push("" + e(this.renderPartial("templates/additional_details", this.modelAttributes))),
                i.push("</div>\n</form>\n</div>\n<div class='tab-pane' id='mte-edit-closures'></div>\n<div class='tab-pane' id='mte-edit-contributors'>\n<div class='contributors-region'></div>\n</div>\n</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='icon'>\n<i class='mte-icon waze-icon-event'></i>"),
                this.published && i.push("<i class='published-indication waze-icon-check'></i>"),
                i.push("</div>\n<div class='name'>"),
                i.push("" + t(e(this.name))),
                i.push("</div>\n<div class='date'>"),
                i.push("" + t(e(this.date))),
                i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        var e = {}.hasOwnProperty;
        return function(t) {
            return function() {
                var t, i, n, s, r, o;
                i = this.__htmlEscape,
                t = this.__cleanValue,
                n = [],
                n.push("<div class='flex-noshrink mte-search'>\n<div class='search-header'>\n<div class='title'>" + i(t(this.t("mte.search.title"))) + "</div>\n<div class='action date-switcher dropdown'>\n<a class='dropdown-toggle waze-dropdown' data-toggle='dropdown'>\n<span class='current-date-filter'></span>\n<i class='fa fa-angle-down'></i>\n</a>\n<ul class='dropdown-menu' role='menu'>"),
                o = this.dateFilters;
                for (r in o)
                    e.call(o, r) && (s = o[r],
                    n.push("<li class='waze-dropdown-item'>\n<a class='date-filter-item' data-filter='" + i(t(r)) + "'>" + i(t("" + s.name)) + "</a>\n</li>"));
                return n.push("</ul>\n</div>\n</div>\n<input class='form-control search-input' type='text' placeholder='" + i(t(this.t("mte.search.placeholder"))) + "'>\n</div>\n<ul class='list-unstyled mte-list'></ul>"),
                n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(t)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div class='loaderRegion'>\n<div class='feed-loading sidebar-loader'>\n<div class='fa-spin spinner'></div>\n</div>\n</div>\n<div class='mainRegion'></div>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<button class='btn-link save-button toolbar-button waze-icon-save' title='" + t(e(this.t("mte.edit.toolbar.save"))) + "'></button>\n<button class='add-button btn-link toolbar-button waze-icon-event' title='" + t(e(this.t("mte.edit.toolbar.add"))) + "'></button>\n<button class='btn-link delete-button toolbar-button waze-icon-trash' title='" + t(e(this.t("mte.edit.toolbar.delete"))) + "'></button>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='topbar topbar-mte'>\n<div class='mode-name'>"),
                i.push("" + t(e(this.t("modes.name.mte")))),
                i.push("</div>\n<div class='location-info-region'></div>\n<div class='loading-indicator-region'></div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<span class='mouse-position' data-toggle='tooltip' title='" + t(e(this.t("footer.copy_to_clipboard", {
                    button: this.h.copyShortcut()
                }))) + "'>00.00000 00.00000</span>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<a class='livemap-link' href='/livemap/' target='_blank'></a>\n<a class='fa fa-link permalink' data-toggle='tooltip' title='" + t(e(this.t("footer.copy_to_clipboard", {
                    button: this.h.copyShortcut()
                }))) + "'></a>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                this.showNext ? i.push("<div class='btn btn-block next'>" + t(e(this.adapter.getNextButtonString())) + "</div>") : i.push("<div class='btn btn-block done'>" + t(e(this.t("problems.panel.done"))) + "</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                null != this.attributes.description && (i.push("<p class='description'>"),
                i.push("" + t(e(this.attributes.description))),
                i.push("</p>")),
                null != this.attributes.extraInfo && (i.push("<p class='extraInfo'>"),
                i.push("" + t(e(this.attributes.extraInfo))),
                i.push("</p>")),
                null != this.attributes.street && (i.push("<div class='street'>\n<strong>" + t(e(this.t("problems.panel.closure.street") + ":")) + "</strong>"),
                i.push("" + t(e(this.attributes.street))),
                i.push("</div>")),
                null != this.attributes.fromCrossStreet && (i.push("<div class='fromCrossStreet'>\n<strong>" + t(e(this.t("problems.panel.closure.from_cross_street") + ":")) + "</strong>"),
                i.push("" + t(e(this.attributes.fromCrossStreet))),
                i.push("</div>")),
                null != this.attributes.toCrossStreet && (i.push("<div class='toCrossStreet'>\n<strong>" + t(e(this.t("problems.panel.closure.to_cross_street") + ":")) + "</strong>"),
                i.push("" + t(e(this.attributes.toCrossStreet))),
                i.push("</div>")),
                null != this.attributes.startTime && (i.push("<div class='startTime'>\n<strong>" + t(e(this.t("problems.panel.closure.start_time") + ":")) + "</strong>"),
                i.push("" + t(e(I18n.l("time.formats.long", this.attributes.startTime)))),
                i.push("</div>")),
                null != this.attributes.endTime && (i.push("<div class='endTime'>\n<strong>" + t(e(this.t("problems.panel.closure.end_time") + ":")) + "</strong>"),
                i.push("" + t(e(I18n.l("time.formats.long", this.attributes.endTime)))),
                i.push("</div>")),
                null != this.attributes.dailyHours && (i.push("<div class='dailyHours'>\n<strong>" + t(e(this.t("problems.panel.closure.schedule") + ":")) + "</strong>"),
                i.push("" + t(e(this.attributes.dailyHours))),
                i.push("</div>")),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                if (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='" + ["problem-edit", "" + t(e("severity-" + this.adapter.getSeverity()))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>\n<div class='header'>\n<a class='close-panel'>×</a>\n<a class='focus'>\n<i class='fa fa-crosshairs'></i>\n</a>\n<div class='type'>" + t(e(this.adapter.getTitle())) + "</div>\n<div class='reported'>" + t(e(this.adapter.getReportedString())) + "</div>"),
                this.showDebug && i.push("<div class='id'>" + t(e(this.t("edit.id", {
                    num: this.adapter.problem.getID()
                }))) + "</div>"),
                i.push("</div>\n<div class='body'>\n<div class='problem-data'>"),
                this.adapter.hasDescription() && (i.push("<div class='description section'>\n<div class='title'>" + t(e(this.t("problems.panel.section.description"))) + "</div>\n<div class='collapsible content'>"),
                null != this.adapter.getDescriptionTemplate() ? i.push("" + e(this.renderPartial(this.adapter.getDescriptionTemplate(), this.adapter.problem))) : i.push("" + t(e(this.adapter.getDescription()))),
                i.push("</div>\n</div>")),
                this.showMoreInfoSection()) {
                    for (i.push("<div class='collapsed more-info section'>\n<div class='title'>" + t(e(this.t("problems.panel.section.more_info"))) + "</div>\n<div class='collapsible loading-indicator'>\n<div class='fa fa-spin fa-spinner'></div>\n</div>\n<div class='collapsible content'>\n<form class='controls-container'>\n<div class='not-available'>" + t(e(this.t("problems.panel.more_info.not_available"))) + "</div>"),
                    r = this.adapter.getMoreInfoTypes(),
                    n = 0,
                    s = r.length; n < s; n++)
                        o = r[n],
                        o = o.get("name"),
                        i.push("<div class='" + ["more-info-checkbox", "more-info-" + t(e(o)) + "-checkbox"].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>\n<div class='" + ["legend", "more-info-" + t(e(o))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'></div>"),
                        i.push("" + e(this.h.checkbox(this.t("problems.panel.more_info." + o), o, "on"))),
                        i.push("</div>");
                    i.push("</form>\n</div>\n</div>")
                }
                return this.adapter.isConversationAvailable() && (i.push("<div class='conversation section'>\n<div class='title'>"),
                i.push("" + t(e(this.t("problems.panel.section.conversation")))),
                i.push("<span class='comment-count-badge'></span>\n</div>\n<div class='collapsible loading-indicator'>\n<div class='fa fa-spin fa-spinner'></div>\n</div>\n<div class='collapsible content'>\n<div class='conversation-region'></div>\n</div>\n</div>")),
                i.push("</div>\n<div class='actions'>"),
                this.showCloseDetails() ? (i.push("<div class='close-details section'>\n<div class='content'>\n<div class='date'>" + e(this.getCloseDate()) + "</div>\n<div class='by'>" + e(this.getClosingUser()) + "</div>\n<div class='navigation'>"),
                i.push("" + e(this.renderPartial("Waze/Modules/Problems/templates/_navigation", this))),
                i.push("</div>\n</div>\n</div>")) : (i.push("<div class='section'>\n<div class='content'>\n<form class='controls-container'>"),
                i.push("" + e(this.h.radio(this.adapter.getOpenStateString(), "state", "open", null , this.adapter.isEditable()))),
                i.push("" + e(this.h.radio(this.adapter.getSolvedStateString(), "state", "solved", null , this.adapter.isEditable()))),
                i.push("" + e(this.h.radio(this.adapter.getNotIdentifiedStateString(), "state", "not-identified", null , this.adapter.isEditable()))),
                this.adapter.isEditable() || i.push("<div class='alert alert-danger'>" + t(e(this.t("problems.panel.no_permission"))) + "</div>"),
                i.push("</form>\n<div class='navigation'>"),
                i.push("" + e(this.renderPartial("Waze/Modules/Problems/templates/_navigation", this))),
                i.push("</div>\n</div>\n</div>")),
                i.push("</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<p class='description'>"),
                i.push("" + t(e(this.title))),
                this.collated && i.push("" + t(e(" (" + this.collated + ")"))),
                this.showPanButton && i.push("<a class='focus'>\n<i class='fa fa-crosshairs'></i>\n</a>"),
                i.push("</p>\n<div class='suggestion'>\n<span class='suggestion-title'>" + t(e(this.t("save.error.suggestion"))) + "</span>"),
                i.push("" + t(e(this.solution))),
                i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='error-list'>\n<div class='arrow'></div>\n<a class='close-popover'>×</a>\n<div class='header'>\n<h4 class='title'>" + t(e(this.getTitle())) + "</h4>\n</div>\n<div class='body'>\n<ul class='list list-unstyled'></ul>\n</div>\n<div class='actions clearfix'>"),
                this.showActionTitle() && i.push("<p class='actions-title'>" + t(e(this.t("save.error.actions.title"))) + "</p>"),
                this.collection.isIgnorable() ? i.push("<button class='btn btn-default edit'>" + t(e(this.t("save.error.actions.edit"))) + "</button>\n<button class='btn btn-default save'>" + t(e(this.t("save.error.actions.save"))) + "</button>") : i.push("<button class='btn btn-default close-button'>" + t(e(this.t("save.error.actions.close"))) + "</button>"),
                i.push("</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='success'>\n<div class='arrow'></div>\n<a class='close-popover'>×</a>\n<div class='header'>\n<h4 class='title'>" + t(e(this.t("save.success.title"))) + "</h4>\n</div>\n<div class='body'>\n<div class='change-count'>"),
                i.push("" + e(this.getSaveCountTextFor("segments"))),
                i.push("" + e(this.getSaveCountTextFor("nodes"))),
                i.push("" + e(this.getSaveCountTextFor("venues"))),
                i.push("" + e(this.getSaveCountTextFor("bigJunctions"))),
                i.push("</div>"),
                this.showPendingVenues() && (i.push("<div class='pending-venues'></div>"),
                this.venueNames.length > 0 ? i.push("" + e(this.safe_t("save.success.pending_venues.with_names", {
                    names: this.h.contentTag("strong", this.venueNames)
                }))) : i.push("" + e(this.safe_t("save.success.pending_venues.no_names")))),
                i.push("</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='toggler'>"),
                this.layer.draggable && i.push("<span class='handle'>\n&#xf142;&#xf142;\n</span>"),
                i.push("<input class='toggle' id='layer-switcher-" + this.layer.id + "' type='checkbox' checked='" + t(e(this.layer.visibility)) + "'>\n<label for='layer-switcher-" + t(e(this.layer.id)) + "'>\n<span class='label-text'>" + t(e(this.layer.name)) + "</span>\n</label>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("" + e(this.renderPartial("Waze/Modules/Toolbar/templates/layer-switcher-checkbox", this))),
                i.push("<a class='closed-filter'>"),
                this.filter ? i.push("" + t(e(this.offText))) : i.push("" + t(e(this.onText))),
                i.push("</a>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "").replace(/[\s\n]*\u0091/gm, "").replace(/\u0092[\s\n]*/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div>\n<div class='fa fa-repeat reload-button'></div>\n<ul class='list-unstyled togglers'></ul>\n</div>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<ul class='layer-control list-unstyled'></ul>\n<ul class='list-unstyled parking-control'></ul>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div class='toolbar-button waze-icon-layers'></div>\n<menu class='controls-container dropdown-menu'>\n<div id='layer-switcher-list'></div>\n</menu>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<form class='form-search'>\n<div class='input-wrapper'>\n<input class='search-query' autocomplete='off' name='q' spellcheck='off' type='text' placeholder='" + t(e(this.t("toolbar.search"))) + "'>\n<i class='fa fa-spin fa-spinner input-addon input-addon-right spinner'></i>\n</div>\n</form>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<menu class='dropdown-menu'></menu>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<span class='menu-title'>" + t(e(this.title)) + "</span>"),
                this.showDrawingControls && (i.push("<div class='drawing-controls'>"),
                this.secondaryControl && i.push("<span class='" + ["drawing-control", "secondary-control", "" + t(e(this.secondaryControl.drawingType))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "' title='" + t(e(this.t("drawing." + this.secondaryControl.drawingType, {
                    name: this.featureName
                }))) + "'></span>"),
                this.control && i.push("<span class='" + ["drawing-control", "main-control", "" + t(e(this.control.drawingType))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "' title='" + t(e(this.t("drawing." + this.control.drawingType, {
                    name: this.featureName
                }))) + "'></span>"),
                i.push("</div>")),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div id='mode-switcher'>\n<div class='toolbar-button waze-icon-hive'></div>\n<menu class='dropdown-menu'>\n<ul class='list-unstyled'>\n<li class='mode-item' data-mode='" + t(e(0)) + "'>"),
                i.push("" + t(e(this.t("modes.name.default")))),
                i.push("</li>\n<li class='mode-item' data-mode='" + t(e(1)) + "'>"),
                i.push("" + t(e(this.t("modes.name.mte")))),
                i.push("</li>\n</ul>\n</menu>\n</div>\n<div id='search'></div>\n<div id='edit-buttons'></div>\n<div class='toolbar-separator'></div>\n<div id='layer-switcher'></div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='area-manager-item'>\n<a href='#'>\n<span class='username'>" + t(e(this.username)) + "</span>\n</a>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "").replace(/[\s\n]*\u0091/gm, "").replace(/\u0092[\s\n]*/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div class='main-list-region'></div>\n<div class='rest-list-region'></div>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='title'>" + t(e(this.t("area_managers_list.title") + ":")) + "</div>\n<ul class='main-list'></ul>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                this.numItems > 0 && i.push("" + t(e("+"))),
                i.push("<span class='dropdown'>\n<a class='dropdown-toggle' data-toggle='dropdown'>"),
                this.numItems > 0 && i.push("" + t(e(this.t("area_managers_list.rest", {
                    count: this.numItems
                })))),
                i.push("</a>\n<ul class='dropdown-menu'></ul>\n</span>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div class='topbar'>\n<div class='location-info-region'></div>\n<div class='area-managers-region'></div>\n<div class='loading-indicator-region'></div>\n</div>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("" + t(e(this.operationText))),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<span class='full-address'></span>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t;
                return e = this.__cleanValue,
                t = [],
                null != this.updatedBy && t.push("<li>" + e(this.safe_t("edit.updated", {
                    time: this.h.dateOnlyString(this.updatedOn),
                    user: this.h.userProfile(this.updatedBy)
                })) + "</li>"),
                null != this.createdBy && t.push("<li>" + e(this.safe_t("edit.created", {
                    time: this.h.dateOnlyString(this.createdOn),
                    user: this.h.userProfile(this.createdBy)
                })) + "</li>"),
                t.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<ul class='additional-attributes list-unstyled side-panel-section'>"),
                i.push("" + e(this.renderPartial("templates/add_update_details", {
                    createdBy: this.createdBy,
                    updatedBy: this.updatedBy
                }))),
                this.id && i.push("<li>" + t(e(this.t("edit.id", {
                    num: this.id
                }))) + "</li>"),
                i.push("</ul>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='clearfix preview'>\n<span class='full-address'></span>\n<a class='edit-button'>\n<i class='waze-icon-edit'></i>\n</a>\n</div>\n<form class='address-form clearfix inner-form'>"),
                i.push("" + e(this.renderPartial("templates/chrome_autofill_off"))),
                this.showStreetInput && (i.push("<div class='form-group toggleable-input'>\n<label class='control-label'>"),
                i.push("" + t(e(this.t("edit.address.street")))),
                i.push("<div class='controls-container in-label toggle-empty'>\n<input class='empty-street' id='empty-street' type='checkbox'>\n<label for='empty-street'>" + t(e(this.t("edit.address.none"))) + "</label>\n</div>\n</label>\n<div class='controls'>\n<input class='form-control street-name' autocomplete='off' type='text' maxlength='" + t(e(this.MAX_LENGTH.STREET_NAME)) + "'>\n</div>\n</div>")),
                this.showHouseNumberInput && i.push("<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.fields.houseNumber"))) + "</label>\n<div class='controls'>\n<input class='form-control house-number' autocomplete='off' maxlength='" + t(e(this.MAX_LENGTH.HOUSE_NUMBER)) + "' type='text'>\n</div>\n</div>"),
                i.push("<div class='form-group toggleable-input'>\n<label class='control-label'>"),
                i.push("" + t(e(this.t("edit.address.city")))),
                i.push("<div class='controls-container in-label toggle-empty'>\n<input class='empty-city' id='empty-city' type='checkbox'>\n<label for='empty-city'>" + t(e(this.t("edit.address.none"))) + "</label>\n</div>\n</label>\n<div class='controls'>"),
                this.showCitySelect ? i.push("<select class='city-id form-control' required></select>") : i.push("<input class='city-name form-control' type='text' autocomplete='off' maxlength='" + t(e(this.MAX_LENGTH.CITY_NAME)) + "'>"),
                i.push("</div>\n</div>"),
                this.showStatesSelection && i.push("<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.address.state"))) + "</label>\n<div class='controls'>\n<select class='form-control state-id' required></select>\n</div>\n</div>"),
                i.push("<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.address.country"))) + "</label>\n<div class='controls'>\n<select class='country-id form-control' required></select>\n</div>\n</div>\n<div class='action-buttons'>\n<button class='btn btn-default cancel-button' type='button'>" + t(e(this.t("edit.cancel"))) + "</button>\n<button class='btn btn-primary save-button' type='submit'>" + t(e(this.t("edit.apply"))) + "</button>\n</div>\n</form>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='archive-panel'>\n<div class='header'>\n<a class='close-panel'>×</a>"),
                i.push("" + t(e(this.t("archive_panel.title")))),
                i.push("</div>\n<div class='body'>"),
                null != this.fromAddress && (i.push("<div class='from-address'>\n<strong>" + t(e(this.t("archive_panel.from") + ":")) + "</strong>"),
                i.push("" + t(e(this.formatAddress(this.fromAddress)))),
                i.push("</div>")),
                null != this.toAddress && (i.push("<div class='to-address'>\n<strong>" + t(e(this.t("archive_panel.to") + ":")) + "</strong>"),
                i.push("" + t(e(this.formatAddress(this.toAddress)))),
                i.push("</div>")),
                i.push("</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                if (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                this.sessions.isEmpty())
                    i.push("<p class='message'>\n<strong>"),
                    i.push("" + t(e(this.t("user.drives.no_drives")))),
                    i.push("</strong>\n</p>\n<p class='message'>"),
                    i.push("" + t(e(this.t("user.drives.no_drives_explanation")))),
                    i.push("</p>");
                else {
                    for (i.push("<p class='message'>"),
                    i.push("" + t(e(this.t("user.drives.subtitle") + ":"))),
                    i.push("</p>\n<ul class='result-list'>"),
                    r = this.sessions,
                    n = 0,
                    s = r.length; n < s; n++)
                        o = r[n],
                        i.push("<li class='" + ["result", "session", "" + t(e(o.hasFullSession ? "session-available" : void 0))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "' data-id='" + t(e(o.id)) + "'>\n<p class='title'>" + t(e(this.h.dateString(o.startTime))) + "</p>\n<p class='additional-info clearfix'>\n<span>" + t(e(this.h.lengthString(o.totalRoadMeters))) + "</span>\n<span>" + t(e(this.h.durationString(o.startTime, o.endTime))) + "</span>\n</p>\n</li>");
                    i.push("</ul>")
                }
                return i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='big-junction'>\n<div class='selection'>\n<span class='text'>" + t(e(this.t("edit.big_junction.title"))) + "</span>\n</div>\n<div class='tab-content'>\n<div class='active tab-pane' id='big-junction-edit-general'>\n<form class='attributes-form side-panel-section'>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.big_junction.fields.name"))) + "</label>\n<div class='controls'>\n<input class='form-control' autocomplete='off' maxlength='100' name='name' type='text' value='" + t(e(this.bigJunction.attributes.name)) + "'>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.big_junction.fields.lock"))) + "</label>\n<div class='controls'>\n<select class='form-control' data-type='numeric' disabled='disabled' name='lockRank'>\n<option>" + t(e(this.h.formatRank(this.bigJunction.attributes.rank))) + "</option>\n</select>\n</div>\n</div>\n</form>\n<div class='address-edit side-panel-section'></div>\n<div class='path-list side-panel-section'>\n<div class='sub-section-header'>" + t(e(this.t("edit.big_junction.fields.connections"))) + "</div>\n<div class='path-list-container'></div>\n</div>\n<div class='form-group side-panel-section'>\n<div class='controls junction-actions'>\n<button class='action-button btn btn-default select-short-segments'>" + t(e(this.t("edit.big_junction.select_segments"))) + "</button>\n</div>\n</div>\n<ul class='additional-attributes list-unstyled side-panel-section'>\n<li>" + t(e(this.t("edit.big_junction.segments", {
                    segments: this.bigJunction.getSegmentCount()
                }))) + "</li>"),
                i.push("" + e(this.renderPartial("templates/add_update_details", this.bigJunction.attributes))),
                i.push("<li>" + t(e(this.t("edit.id", {
                    num: this.bigJunction.getID()
                }))) + "</li>\n</ul>\n</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='selection'>\n<span class='text'>" + t(e(this.t("edit.camera.title"))) + "</span>\n</div>\n<div class='tab-content'>\n<div class='active tab-pane' id='camera-edit-general'></div>\n<form class='attributes-form side-panel-section'>\n<div class='form-group'>\n<div class='controls'>\n<select class='form-control' data-type='numeric' name='type'>"),
                i.push("" + e(this.h.option(this.t("edit.camera.fields.type.2"), 2, this.attributes.type))),
                i.push("" + e(this.h.option(this.t("edit.camera.fields.type.3"), 3, this.attributes.type))),
                i.push("" + e(this.h.option(this.t("edit.camera.fields.type.4"), 4, this.attributes.type))),
                i.push("</select>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.camera.fields.speed")))),
                i.push("" + t(e(this.h.speedString()))),
                i.push("</label>\n<div class='controls'>\n<input class='form-control' type='number' name='speed' maxlength='4' value='" + t(e(this.h.getDisplayUnitValue(this.attributes.speed, this.UNITS.speed, !0))) + "' data-type='numeric' data-units='" + t(e(this.UNITS.speed)) + "'>\n<label class='checkbox'>\n<input type='checkbox' name='validated' checked='" + t(e(this.attributes.validated)) + "' disabled='" + t(e(!this.isValidationStateEditable)) + "'>"),
                i.push("" + t(e(this.t("edit.camera.fields.approved")))),
                i.push("</label>\n</div>\n</div>\n</form>\n<ul class='additional-attributes list-unstyled side-panel-section'>"),
                i.push("" + e(this.renderPartial("templates/add_update_details", this.attributes))),
                i.push("<li>" + t(e(this.t("edit.id", {
                    num: this.getID()
                }))) + "</li>\n</ul>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div id='chat-toggle'>\n<button class='toggle'></button>\n</div>"),
                i.push("" + e(this.h.hidableMessage("chat_intro_tip"))),
                i.push("<div id='chat'>\n<div class='header'>\n<span class='room-name single-room-label'></span>\n<div class='dropdown room-selector'>\n<a class='dropdown-toggle' data-toggle='dropdown' href='#' role='menu'>\n<span class='room-name'></span>\n<i class='fa fa-angle-down'></i>\n</a>\n<ul class='dropdown-menu rooms'></ul>\n</div>\n<div class='dropdown visibilty-menu'>\n<a class='dropdown-toggle' data-toggle='dropdown' href='#' role='menu'>\n<span class='status'>" + t(e(this.status)) + "</span>\n<i class='fa fa-angle-down'></i>\n</a>\n<ul class='dropdown-menu visibility'>\n<li class='visibility-visible'>\n<a href='#'>" + t(e(this.t("chat.visible"))) + "</a>\n</li>\n<li class='visibility-invisible'>\n<a href='#'>" + t(e(this.t("chat.invisible"))) + "</a>\n</li>\n</ul>\n</div>\n<button class='minimize' aria-hidden='true' type='button'>_</button>\n</div>\n<div class='not-connected-message'>Not Connected</div>\n<div class='chat-body'>\n<div class='messages'>\n<div class='message-list'></div>\n<a class='unread-messages-notification' href='#'></a>\n<div class='new-message'>\n<input class='message-input' placeholder='" + t(e(this.t("chat.placeholder"))) + "' data-auto-rtl>\n</div>\n</div>\n<div class='users'>\n<ul class='list-unstyled user-list'></ul>\n</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='chat-intro-tip hidable-message popover top'>\n<div class='arrow'></div>\n<div class='popover-content'>\n<button class='close' aria-hidden='true' type='button'>&times;</button>\n<h3>" + t(e(this.t("chat.tooltip.title"))) + "</h3>\n<p>" + t(e(this.t("chat.tooltip.message"))) + "</p>\n<a class='btn btn-primary go-visible' href='#' data-hide-message='chat_intro_tip'>" + t(e(this.t("chat.tooltip.great"))) + "</a>\n<a class='go-invisible' href='#' data-hide-message='chat_intro_tip'>" + t(e(this.t("chat.tooltip.go_invisible"))) + "</a>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='from'>" + t(e(this.message.from.name)) + "</div>\n<div class='body'>"),
                o = this.message.body.split("\n"),
                n = 0,
                s = o.length; n < s; n++)
                    r = o[n],
                    i.push("<div>" + t(e(r)) + "</div>");
                return i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<a class='" + ["user", "" + t(e(this.className))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "' href='#' data-id='" + t(e(this.user.id)) + "'>\n<div class='rank'>"),
                this.user.rank < 6 ? i.push("" + t(e(this.user.rank + 1))) : i.push("&nbsp;"),
                i.push("</div>\n<i class='crosshair fa fa-crosshairs'></i>\n<div class='username'>" + t(e(this.user.name)) + "</div>\n</a>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div style='display:none'>\n<input type='text' name='PreventChromeAutocomplete' autocomplete='address-level4'>\n</div>"),
                e.join("\n")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t, i) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, n, s, r, o, a, l;
                if (t = this.__htmlEscape,
                e = this.__cleanValue,
                n = [],
                s = i(127),
                this.areas.isEmpty())
                    n.push("<p class='message'>" + t(e(this.t("user.areas.no_areas"))) + "</p>");
                else {
                    for (n.push("<p class='message'>" + t(e(this.t("user.areas.subtitle") + ":")) + "</p>\n<ul class='result-list'>"),
                    l = this.areas,
                    o = 0,
                    a = l.length; o < a; o++)
                        r = l[o],
                        n.push("<li class='area result' data-index='" + t(e(r.get("num"))) + "'>"),
                        r.get("type") === s.prototype.TYPE.DRIVE ? n.push("<p class='title'>" + t(e(this.t("user.areas.area", {
                            num: r.get("num") + 1
                        }))) + "</p>") : n.push("<p class='title'>" + t(e(this.t("user.areas.managed_area"))) + "</p>"),
                        n.push("<p class='additional-info clearfix'>\n<span>" + t(e(this.h.areaString(r.get("area")))) + "</span>\n</p>\n</li>");
                    n.push("</ul>")
                }
                return n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='" + ["content", "" + t(e("valid-" + this.valid + " forced-" + this.forced))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>\n<div class='uneditable-number'>" + t(e(this.number)) + "</div>\n<div class='drag-handle'></div>\n<div class='" + ["input-wrapper", "" + t(e("side-" + (this.isLeft ? "left" : "right")))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>\n<div class='number-preview'>" + t(e(this.number)) + "</div>\n<input class='number' value='" + t(e(this.number)) + "' type='text' placeholder='" + t(e(this.t("edit.segment.house_numbers.no_number"))) + "'>\n<div class='delete-button'>x</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='header'>\n<div class='hn-toolbar'>\n<button class='cancel toolbar-btn' title='" + t(e(this.t("edit.house_numbers.toolbar.close"))) + "'></button>\n<button class='redo toolbar-btn' disabled='" + t(e(!this.model.actionManager.canRedo() || this.disabled)) + "' title='" + t(e(this.t("edit.house_numbers.toolbar.redo"))) + "'></button>\n<button class='toolbar-btn undo' disabled='" + t(e(!this.model.actionManager.canUndo() || this.disabled)) + "' title='" + t(e(this.t("edit.house_numbers.toolbar.undo"))) + "'></button>\n<button class='save toolbar-btn' disabled='" + t(e(!this.model.actionManager.canSave() || this.disabled)) + "' title='" + t(e(this.t("edit.house_numbers.toolbar.save"))) + "'></button>\n<button class='add toolbar-btn' disabled='" + t(e(this.disabled || !this.pm.editingAllowedInZoom() || this.pm.failedLoading)) + "' title='" + t(e(this.t("edit.house_numbers.toolbar.add"))) + "'></button>\n</div>\n<div class='title'>"),
                null != this.address && i.push("" + t(e(this.address.streetName + ", " + this.address.cityName + ", " + (this.address.hasState ? this.address.stateName : this.address.countryName)))),
                i.push("</div>\n<div class='loading-animation not-shown'></div>\n</div>\n<div class='success-message' style='display: none;'>" + t(e(this.t("edit.house_numbers.save.success"))) + "</div>\n<div class='error-message' style='display: none;'>Error loading house numbers</div>\n<div class='save-error-message' style='display: none;'>Error saving, please try again later\n<br>\n<button class='btn btn-default btn-sm continue-editing'>OK</button>\n</div>"),
                this.pm.editingAllowedInZoom() || i.push("<div class='zoom-message'>" + t(e(this.t("edit.house_numbers.zoom_to_edit"))) + "</div>"),
                i.push("<div class='last-edited'>\nLast edited by\n<span class='username'>" + t(e(this.h.formatUserName(null != (n = this.pm.selectedNumber) ? n.model.updatedBy : void 0))) + "</span>\n</div>\n<div class='force-message' style='display: none;'>"),
                i.push("" + t(e(this.t("edit.house_numbers.save.invalid")))),
                i.push("<br>"),
                this.pm.canForcedInvalid() && (i.push("" + t(e(this.t("edit.house_numbers.force.title")))),
                i.push("<br>\n<button class='btn btn-default btn-sm force-invalid'>" + t(e(this.t("edit.house_numbers.force.action"))) + "</button>")),
                i.push("<button class='btn btn-default btn-sm continue-editing'>" + t(e(this.t("edit.house_numbers.force.continue"))) + "</button>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        var e = {}.hasOwnProperty;
        return function(t) {
            return function() {
                var t, i, n, s, r, o, a, l, u, c;
                i = this.__htmlEscape,
                t = this.__cleanValue,
                n = [],
                u = this.groups;
                for (r in u)
                    if (e.call(u, r)) {
                        for (s = u[r],
                        n.push("<section class='shortcut-action-group'>"),
                        null != s.members && n.push("<h2>" + i(t(this.t("keyboard_shortcuts.groups." + r + ".description"))) + "</h2>"),
                        c = s.members,
                        o = 0,
                        a = c.length; o < a; o++)
                            l = c[o],
                            l.changeable && (n.push("<p class='" + ["shortcut-action", "" + i(t(l.enabled ? void 0 : "disabled"))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "' data-action='" + i(t(l.id)) + "'>"),
                            null == l.shortcut || l.shortcut.isEmpty() ? n.push("<kbd class='no-shotcut'>None</kbd>") : (n.push("" + t(this.h.shortcutMaskToKeys(l.shortcut))),
                            n.push("<kbd>" + i(t(this.h.getShortcutKey(l.shortcut))) + "</kbd>")),
                            l.layerToggle ? n.push("" + i(t(this.t("keyboard_shortcuts.groups.layers.toggle_layer", {
                                name: this.t("layers.name." + l.layerKey)
                            })))) : n.push("" + i(t(this.t("keyboard_shortcuts.groups." + r + ".members." + l.name)))),
                            n.push("</p>"));
                        n.push("</section>")
                    }
                return n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(t)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div id='shortcuts-dialog'>\n<div class='modal-dialog'>\n<div class='modal-content'>\n<div class='modal-header'>\n<button class='close' data-dismiss='modal' type='button'>×</button>\n<h3 class='modal-title'>" + t(e(this.t("keyboard_shortcuts.title"))) + "</h3>\n</div>\n<div class='modal-body'>"),
                i.push("" + e(this.renderPartial("templates/keyboard_shortcuts/list", {
                    groups: this.groups
                }))),
                i.push("</div>\n</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='footer-message location-message'>\nData for this location is on a different server environment,\n<a data-env='" + t(e(this.view.otherEnv)) + "' href='#'>switch now</a>\n<button class='close'>×</button>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<select class='form-control'>\n<option value='row' selected='" + t(e(this.isCurrentEnv("row"))) + "'>"),
                i.push("" + t(e(this.t("envs.row")))),
                i.push("</option>\n<option value='usa' selected='" + t(e(this.isCurrentEnv("usa"))) + "'>"),
                i.push("" + t(e(this.t("envs.usa")))),
                i.push("</option>\n<option value='il' selected='" + t(e(this.isCurrentEnv("il"))) + "'>"),
                i.push("" + t(e(this.t("envs.il")))),
                i.push("</option>\n</select>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='form-title'>"),
                W.loginManager.expired ? (i.push("<div class='text-warning'>" + t(e(this.t("session.expired.title"))) + "</div>"),
                i.push("" + t(e(this.t("session.expired.description"))))) : i.push("" + t(e(this.t("login.subtitle")))),
                i.push("</div>\n<form action='#' method='post'>\n<input class='form-control username' name='username' required='" + t(e(!0)) + "' type='text' placeholder='" + t(e(this.t("login.form.username"))) + "'>\n<input class='form-control password' name='password' required='" + t(e(!0)) + "' type='password' placeholder='" + t(e(this.t("login.form.password"))) + "'>\n<div class='error-message text-danger'></div>\n<div class='form-action'>\n<button class='btn btn-primary submit' type='submit'>\n<span class='loading not-shown'>\n<i class='fa fa-spin fa-spinner'></i>\n</span>"),
                i.push("" + t(e(this.t("login.form.action")))),
                i.push("</button>\n</div>\n<a class='forgot-password' href='/forgot_password'>" + t(e(this.t("login.forgot_password"))) + "</a>\n</form>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='footer-message sandbox-message'>\n<strong>" + t(e(this.t("play_mode.title"))) + "</strong>"),
                i.push("" + t(e(this.t("play_mode.description")))),
                i.push("<span class='dropdown'>"),
                i.push("" + e(this.safe_t("play_mode.login_msg", {
                    login_link: this.h.link(this.t("play_mode.login_link"), "#", {
                        "data-toggle": "dropdown"
                    })
                }))),
                i.push("<ul class='dropdown-menu login-dropdown' role='menu'>\n<li class='login-form'></li>\n</ul>\n</span>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='map-modal' id='welcome-popup'>\n<div class='clearfix map-modal-body'>\n<div class='login'>\n<div class='action dropdown language-select'>\n<a class='dropdown-toggle not-shown' data-toggle='dropdown' href='#'>"),
                i.push("" + t(e(I18n.t("language_name")))),
                i.push("<i class='fa fa-angle-down'></i>\n</a>\n<ul class='dropdown-menu' role='menu'>"),
                o = I18n.availableLocales,
                n = 0,
                r = o.length; n < r; n++)
                    s = o[n],
                    i.push("<li>\n<a class='change-language' href='" + t(e("en" !== s ? "/" + s : void 0)) + "/editor' data-locale='" + t(e(s)) + "'>"),
                    i.push("" + t(e(I18n.languageNames[s]))),
                    i.push("</a>\n</li>");
                return i.push("</ul>\n</div>\n<div class='welcome-message'>\n<h2>" + t(e(this.t("welcome.title"))) + "</h2>\n<p>"),
                i.push("" + t(e(this.t("welcome.content")))),
                i.push("</p>\n</div>\n<div class='login-form'></div>\n</div>\n<div class='links'>\n<a class='btn btn-default tutorial' data-toggle='modal' href='#tutorial-dialog'>\n<div class='title'>" + t(e(this.t("welcome.tutorial.title"))) + "</div>\n<div class='description'>" + t(e(this.t("welcome.tutorial.description"))) + "</div>\n</a>\n<a class='btn btn-default wiki' href='" + t(e(this.t("internal.wiki_link"))) + "' target='_blank'>\n<div class='title'>" + t(e(this.t("welcome.wiki.title"))) + "</div>\n<div class='description'>" + t(e(this.t("welcome.wiki.description"))) + "</div>\n</a>\n<a class='btn btn-default forum' href='" + t(e(this.t("internal.editing_forum_link"))) + "' target='_blank'>\n<div class='title'>" + t(e(this.t("welcome.forum.title"))) + "</div>\n<div class='description'>" + t(e(this.t("welcome.forum.description"))) + "</div>\n</a>\n<a class='btn btn-default playmode' href='#'>\n<div class='title'>" + t(e(this.t("welcome.play_mode.title"))) + "</div>\n<div class='description'>" + t(e(this.t("welcome.play_mode.description"))) + "</div>\n</a>\n</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div id='map'>\n<div id='input-overlay'></div>\n<div id='map-overlay'></div>\n<div id='popup-overlay'></div>\n<div class='not-shown' id='map-lightbox'>\n<div class='overlay'>\n<div class='top'></div>\n<div class='bottom'></div>\n<div class='left'></div>\n<div class='right'></div>\n</div>\n<div class='content'></div>\n</div>\n<div id='map-modal-container'></div>\n<div>\n<div id='topbar-container'></div>\n<div id='panel-container'></div>\n<div id='street-view-container'>\n<div class='panorama view-area'></div>\n<a class='close-button'>\n<i class='fa fa-remove'></i>\n</a>\n</div>\n<div class='view-area' id='WazeMap' tabindex='1'>\n<div class='snapshot-message'></div>\n</div>\n</div>\n</div>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='selection-text'>" + t(e(this.t("edit.node.title"))) + "</div>\n<div class='tab-content'>\n<div class='active tab-pane' id='node-edit-general'>\n<div class='side-panel-section'>"),
                this.isConnectedToBigJunction() ? (i.push("<span class='error'>" + t(e(this.t("edit.node.permissions.big_junction.title"))) + "</span>"),
                i.push("" + t(e(this.t("edit.node.permissions.big_junction.description"))))) : this.connectionsExist() && (i.push("<p class='connectionStatus'>"),
                this.areAllConnectionsEnabled() && i.push("" + t(e(this.t("edit.node.turns.all_allowed")))),
                this.areAllConnectionsDisabled() && i.push("" + t(e(this.t("edit.node.turns.all_disallowed")))),
                i.push("</p>"),
                this.areAllConnectionsEnabled() || i.push("<button class='allow-connections btn btn-default' disabled='" + t(e(!this.areConnectionsEditable())) + "'>" + t(e(this.t("edit.node.turns.allow_all"))) + "</button>"),
                this.areAllConnectionsDisabled() || i.push("<button class='btn btn-default disallow-connections' disabled='" + t(e(!this.areConnectionsEditable())) + "'>" + t(e(this.t("edit.node.turns.disallow_all"))) + "</button>")),
                i.push("</div>\n<ul class='additional-attributes list-unstyled side-panel-section'>\n<li>" + t(e(this.t("edit.id", {
                    num: this.getID()
                }))) + "</li>\n</ul>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='modal-content'>\n<div class='modal-header'>\n<h3 class='modal-title'>" + t(e(this.t("edit.landmark.opening_hours.add_title"))) + "</h3>\n</div>\n<div class='modal-body'>\n<div class='content'>\n<form class='add-opening-hour' action='#' method='post'>\n<div class='days section'>"),
                i.push("" + e(this.renderPartial("templates/util/day-checkboxes", {
                    cb: this.dayCallback
                }))),
                i.push("" + e(this.renderPartial("templates/restriction/toggle-checkboxes"))),
                i.push("</div>\n<div class='hours section'>\n<div class='clearfix'>\n<div class='labels'>\n<div class='col-xs-2'>\n<label class='radio'>\n<input type='radio' name='allDay' value='on' checked='" + t(e(!1)) + "'>"),
                i.push("" + t(e(this.t("edit.landmark.opening_hours.time_span.all_day")))),
                i.push("</label>\n</div>\n<div class='col-xs-2'>\n<label class='radio'>\n<input type='radio' name='allDay' value='off' checked='" + t(e(!0)) + "'>"),
                i.push("" + t(e(this.t("edit.landmark.opening_hours.time_span.from") + ":"))),
                i.push("</label>\n</div>\n</div>\n<div class='inputs'>\n<div class='col-xs-4'>\n<div class='bootstrap-timepicker input-append input-group' dir='ltr'>\n<input class='form-control from-time time-selector' type='text' name='fromTime' value='" + t(e(this.defaultFromTime)) + "'>\n<span class='add-on input-group-addon'>\n<i class='fa fa-clock-o'></i>\n</span>\n</div>\n</div>\n<div class='col-xs-4'>\n<div class='pull-left to-label'>"),
                i.push("" + t(e(this.t("edit.landmark.opening_hours.time_span.to") + ":"))),
                i.push("</div>\n<div class='bootstrap-timepicker input-append input-group' dir='ltr'>\n<input class='form-control time-selector to-time' type='text' name='toTime' value='" + t(e(this.defaultToTime)) + "'>\n<span class='add-on input-group-addon'>\n<i class='fa fa-clock-o'></i>\n</span>\n</div>\n</div>\n</div>\n</div>\n</div>\n<div class='validation-errors'></div>\n<button class='btn btn-primary'>" + t(e(this.t("edit.add"))) + "</button>\n<button class='btn btn-default cancel-button'>" + t(e(this.t("edit.cancel"))) + "</button>\n</form>\n</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("" + t(e(this.h.formatOpeningHour(this.model)))),
                this.isEditable && i.push("<a class='delete' href='#'>\n<i class='fa fa-remove'></i>\n</a>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='sub-section-header'>" + t(e(this.t("edit.landmark.opening_hours.title"))) + "</div>\n<ul class='list'></ul>"),
                this.isEditable && i.push("<a class='add' href='#'>" + t(e(this.t("edit.landmark.opening_hours.add"))) + "</a>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='" + ["actions", "approve-intent-" + t(e(this.getApproveActionIntent())) + " " + t(e(this.model.get("updateType")))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>"),
                this.model.isEditableByUser() ? this.model.isPlaceAdLocked() ? i.push("<div class='alert alert-danger'>" + t(e(I18n.t("venues.update_requests.panel.needs_staff_approval"))) + "</div>") : (i.push("<form class='controls-container'>"),
                i.push("" + e(this.h.radio(this.t("venues.update_requests.panel.action.open"), "approved", null , this.model.get("approved")))),
                i.push("" + e(this.h.radio(this.getRejectActionName(), "approved", !1, this.model.get("approved")))),
                i.push("" + e(this.h.radio(this.getApproveActionName(), "approved", !0, this.model.get("approved")))),
                i.push("</form>")) : i.push("<div class='alert alert-danger'>" + t(e(this.getNoPermissionsMessage())) + "</div>"),
                i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t;
                return e = this.__cleanValue,
                t = [],
                t.push("<div class='add-details'>"),
                this.dateAdded && t.push("<div class='date small'>" + e(this.safe_t("venues.update_requests.panel.added_on", {
                    added_on_title: this.h.contentTag("strong", this.t("venues.update_requests.panel." + this.type)),
                    date: I18n.l("date.formats.long", this.dateAdded)
                })) + "</div>"),
                !this.hideUserDetails && this.createdBy && t.push("<div class='small user'>" + e(this.safe_t("venues.update_requests.panel.added_by", {
                    added_by_title: this.h.contentTag("strong", this.t("venues.update_requests.panel.added_by_title")),
                    username: this.h.userProfile(this.createdBy)
                })) + "</div>"),
                t.push("</div>"),
                t.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return e = this.__cleanValue,
                t = [],
                i = this.model.getAddedImage(),
                t.push("" + e(this.renderPartial("templates/place_updates/image", {
                    image: i
                }))),
                t.push("" + e(this.renderPartial("templates/place_updates/add_details", {
                    type: "added_on_title",
                    hideUserDetails: !1,
                    dateAdded: i.get("date"),
                    createdBy: i.get("creatorUserId")
                }))),
                t.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o, a, l, u, c;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                this.shouldShowName() && i.push("<h2 class='name'>" + t(e(this.h.formatVenueName(this.venue.attributes.name))) + "</h2>"),
                i.push("<div class='address'>" + t(e(this.h.formatAddress(this.venue.getAddress()))) + "</div>\n<div class='categories small'>" + t(e(this.h.formatVenueCategories(this.venue.attributes.categories))) + "</div>\n<div class='images'>\n<div class='carousel slide' id='" + t(e(this.getCarouselUniqueId())) + "' data-ride='carousel' data-interval='false'>\n<div class='carousel-inner' role='listbox'>"),
                u = this.getNewPlaceImages(),
                r = n = 0,
                a = u.length; n < a; r = ++n)
                    s = u[r],
                    i.push("<div class='" + ["item", "" + t(e(0 === r ? "active" : void 0))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>"),
                    i.push("" + e(this.renderPartial("templates/place_updates/image", {
                        image: s
                    }))),
                    i.push("</div>");
                if (i.push("</div>"),
                this.shouldShowCarousel()) {
                    for (i.push("<ol class='carousel-indicators list-unstyled'>"),
                    c = this.getNewPlaceImages(),
                    r = o = 0,
                    l = c.length; o < l; r = ++o)
                        s = c[r],
                        i.push("<li class='" + t(e(0 === r ? "active" : void 0)) + "' data-target='" + t(e("#" + this.getCarouselUniqueId())) + "' data-slide-to='" + t(e(r)) + "'></li>");
                    i.push("</ol>")
                }
                return i.push("</div>\n</div>"),
                i.push("" + e(this.renderPartial("templates/place_updates/add_details", {
                    type: "added_on_title",
                    dateAdded: this.model.get("dateAdded"),
                    createdBy: this.model.get("createdBy")
                }))),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t, i) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, n, s, r, o, a, l;
                if (t = this.__htmlEscape,
                e = this.__cleanValue,
                n = [],
                n.push("<div class='" + ["change", "field-" + t(e(this.fieldName))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>\n<div class='field-name'>" + t(e(this.t("edit.landmark.fields." + this.fieldName))) + "</div>\n<div class='values'>"),
                this.isGeometry)
                    n.push("" + t(e(this.t("venues.update_requests.panel.change.hover")))),
                    n.push("<div class='current location-button'>"),
                    n.push("" + t(e(this.t("venues.update_requests.panel.change.current")))),
                    n.push("<i class='fa fa-crosshairs'></i>\n</div>\n<div class='location-button suggested'>"),
                    n.push("" + t(e(this.t("venues.update_requests.panel.change.suggested")))),
                    n.push("<i class='fa fa-crosshairs'></i>\n</div>");
                else if ("images" === this.fieldName) {
                    for (s = i(42).SIZE,
                    n.push("<div class='removed-title'>" + t(e(this.t("venues.update_requests.panel.change.removed"))) + "</div>\n<div class='remove-images'>"),
                    l = this.getRemovedImages(),
                    r = 0,
                    a = l.length; r < a; r++)
                        o = l[r],
                        n.push("<img class='image-preview' src='" + t(e(o.getUrl(s.WEB))) + "' data-image-id='" + t(e(o.id)) + "'>");
                    n.push("</div>")
                } else
                    n.push("" + e(this.renderPartial("templates/place_updates/changed_field_item", this)));
                return n.push("</div>\n</div>"),
                n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                if (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                this.showChangeList) {
                    for (i.push("<ul class='diff-list list-unstyled'>"),
                    o = this.changeList,
                    n = 0,
                    r = o.length; n < r; n++)
                        s = o[n],
                        i.push("<li class='" + ["diff", "" + t(e(s.changeType.toLowerCase()))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>\n<span class='name'>" + t(e(s.name)) + "</span>\n</li>");
                    i.push("</ul>")
                } else
                    this.currentValue && (this.removing ? i.push("<div class='current-title'>" + t(e(this.t("venues.update_requests.panel.change.removed"))) + "</div>") : i.push("<div class='current-title'>" + t(e(this.t("venues.update_requests.panel.change.current"))) + "</div>"),
                    i.push("<div class='current'>" + t(e(this.currentValue)) + "</div>")),
                    this.removing || i.push("<div class='suggested-title'>" + t(e(this.t("venues.update_requests.panel.change.suggested"))) + "</div>\n<div class='suggested'>" + t(e(this.suggestedValue)) + "</div>");
                return i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "").replace(/[\s\n]*\u0091/gm, "").replace(/\u0092[\s\n]*/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='" + ["change", "field-" + t(e(this.fieldName))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>\n<div class='field-name'>" + t(e(this.t("edit.landmark.parking.fields." + this.fieldName))) + "</div>\n<div class='values'>"),
                i.push("" + e(this.renderPartial("templates/place_updates/changed_field_item", this))),
                i.push("</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<h3>" + t(e(I18n.t("venues.update_requests.panel.place_deleted"))) + "</h3>"),
                i.push("" + e(this.renderPartial("templates/place_updates/add_details", {
                    type: "suggested_on_title",
                    dateAdded: this.model.get("dateAdded"),
                    createdBy: this.model.get("createdBy")
                }))),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("" + e(this.renderPartial("templates/place_updates/panel_header", this))),
                i.push("<div class='body'>\n<div class='scrollable'>\n<div class='request-details'>"),
                i.push("" + e(this.renderPartial("templates/place_updates/place_details", this))),
                this.showImage ? (i.push("" + e(this.renderPartial("templates/place_updates/image", {
                    image: this.image
                }))),
                this.image && i.push("" + e(this.renderPartial("templates/place_updates/add_details", {
                    type: "picture_added_on_title",
                    hideUserDetails: !this.showAddingUser,
                    dateAdded: this.image.get("date"),
                    createdBy: this.image.get("creatorUserId")
                })))) : i.push("" + e(this.renderPartial("templates/place_updates/add_details", {
                    type: "added_on_title",
                    hideUserDetails: !this.showAddingUser,
                    dateAdded: this.venue.attributes.createdOn
                }))),
                i.push("</div>\n<div class='changes'>\n<div class='small'>" + t(e(I18n.t("venues.update_requests.panel.flag_reason"))) + "</div>\n<h3>" + t(e(this.t("venues.update_requests.flags." + this.model.get("type")))) + "</h3>"),
                this.showComment && i.push("<div class='flag-comment'>" + t(e(this.model.get("comment"))) + "</div>"),
                i.push("</div>"),
                this.showDuplicateVenue && (i.push("<div class='duplicate request-details'>"),
                i.push("" + e(this.renderPartial("templates/place_updates/place_details", _.defaults({
                    venue: this.model.getDuplicateVenue()
                }, this)))),
                i.push("" + e(this.renderPartial("templates/place_updates/add_details", {
                    type: "added_on_title",
                    hideUserDetails: !0,
                    dateAdded: this.model.getDuplicateVenue().attributes.createdOn
                }))),
                i.push("</div>")),
                i.push("</div>"),
                i.push("" + e(this.renderPartial("templates/place_updates/actions", this))),
                i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t, i) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, n, s;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                n = [],
                s = i(42).SIZE,
                this.image ? n.push("<a>\n<img class='image-preview' src='" + t(e(this.image.getUrl(s.MOBILE))) + "' data-image-id='" + t(e(this.image.id)) + "'>\n</a>") : n.push("<div class='missing-image'></div>"),
                n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='modal-dialog venue-image-dialog'>\n<div class='modal-content'>\n<div class='modal-header'>\n<a class='close' data-dismiss='modal' type='button'>×</a>\n<div class='venue-name'>" + t(e(this.h.formatVenueName(this.venueName))) + "</div>\n</div>\n<div class='modal-body'>\n<img src='" + t(e(this.imageUrl)) + "'>\n<div class='details'>\n<div class='date small'>" + e(this.safe_t("venues.images.added_on", {
                    added_on_title: this.h.contentTag("strong", this.t("venues.images.added_on_title")),
                    date: I18n.l("date.formats.long", this.dateAdded)
                })) + "</div>"),
                this.addingUserId && i.push("<div class='small user'>" + e(this.safe_t("venues.images.added_by", {
                    added_by_title: this.h.contentTag("strong", this.t("venues.images.added_by_title")),
                    username: this.h.userProfile(this.addingUserId)
                })) + "</div>"),
                i.push("</div>\n</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t;
                return e = this.__cleanValue,
                t = [],
                t.push("" + e(this.renderPartial("templates/place_updates/panel_header", this))),
                t.push("<div class='body'>\n<div class='scrollable'>"),
                this.hidePlaceDetails || (t.push("<div class='request-details'>"),
                t.push("" + e(this.renderPartial("templates/place_updates/place_details", this))),
                t.push("</div>")),
                t.push("<div class='changes'>"),
                t.push("" + e(this.renderPartial(this.getChangesTemplate(), this))),
                t.push("</div>\n</div>"),
                t.push("" + e(this.renderPartial("templates/place_updates/actions", this))),
                t.push("</div>"),
                t.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='place-update'></div>\n<div class='navigation'>"),
                this.showNextButton ? (i.push("<button class='" + ["btn", "btn-default", "btn-block", "next", "" + t(e(this.nextButtonClass))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>"),
                i.push("" + t(e(this.nextButtonString))),
                i.push("</button>")) : this.showNextVenueButton ? (i.push("<button class='btn btn-block btn-primary next-venue'>"),
                i.push("" + t(e(this.t("venues.update_requests.panel.next_venue")))),
                i.push("</button>")) : (i.push("<button class='btn btn-block btn-primary done'>"),
                i.push("" + t(e(this.t("venues.update_requests.panel.done")))),
                i.push("</button>")),
                i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='header'>"),
                i.push("" + t(e(this.getTitle()))),
                i.push("<a class='close-panel'>×</a>\n<a class='focus'>\n<i class='fa fa-crosshairs'></i>\n</a>"),
                this.showDebug && i.push("<div class='id'>" + t(e(this.t("edit.id", {
                    num: this.h.formatVenueUpdateRequestId(this.model.id)
                }))) + "</div>"),
                i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='place-details'>"),
                this.shouldShowName() && i.push("<h3 class='name'>" + t(e(this.h.formatVenueName(this.venue.attributes.name))) + "</h3>"),
                i.push("<div class='address'>" + t(e(this.h.formatAddress(this.venue.getAddress()))) + "</div>\n<div class='categories small'>" + t(e(this.h.formatVenueCategories(this.venue.attributes.categories))) + "</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t;
                return e = this.__cleanValue,
                t = [],
                t.push("<ul class='changed-fields list-unstyled'></ul>"),
                t.push("" + e(this.renderPartial("templates/place_updates/add_details", {
                    type: "suggested_on_title",
                    dateAdded: this.model.get("dateAdded"),
                    createdBy: this.model.get("createdBy")
                }))),
                t.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='side-panel-section'>\n<h4>" + t(e(this.t("user.prefs.subtitle"))) + "</h4>\n<form class='attributes-form side-panel-section'>\n<div class='form-group'>\n<div class='controls-container'>"),
                i.push("" + e(this.h.checkbox(this.t("user.prefs.two_way"), "twoWayRoad", "on"))),
                i.push("</div>\n<div class='controls-container'>"),
                i.push("" + e(this.h.checkbox(this.t("user.prefs.turns_allowed"), "turnsAllowed", "on"))),
                i.push("</div>\n<div class='controls-container'>"),
                i.push("" + e(this.h.checkbox(this.t("user.prefs.require_deselect"), "requireDeselect", "on"))),
                i.push("</div>\n</div>\n<div class='form-group'>\n<div class='controls'>\n<label class='control-label'>" + t(e(this.t("user.prefs.units.title"))) + "</label>\n<div class='btn-group' data-toggle='buttons' data-type='boolean'>\n<label class='btn btn-default'>\n<input class='units-check' type='radio' name='units-radio' value='true'>"),
                i.push("" + t(e(this.t("user.prefs.units.imperial")))),
                i.push("</label>\n<label class='btn btn-default'>\n<input class='units-check' type='radio' name='units-radio' value='false'>"),
                i.push("" + t(e(this.t("user.prefs.units.metric")))),
                i.push("</label>\n</div>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label'>"),
                i.push("" + t(e(this.t("envs.title")))),
                i.push("</label>\n<div class='controls' id='env-select'></div>\n</div>\n<div class='form-group'>\n<label class='control-label'>"),
                i.push("" + t(e(this.t("user.prefs.language")))),
                i.push("</label>\n<select class='form-control language-select'>"),
                o = I18n.availableLocales,
                n = 0,
                r = o.length; n < r; n++)
                    s = o[n],
                    i.push("<option value='" + t(e(s)) + "' selected='" + t(e(s === I18n.currentLocale())) + "'>"),
                    i.push("" + t(e(I18n.languageNames["" + s]))),
                    i.push("</option>");
                return i.push("</select>\n</div>\n</form>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        var e = {}.hasOwnProperty;
        return function(t) {
            return function() {
                var t, i, n, s, r, o, a;
                i = this.__htmlEscape,
                t = this.__cleanValue,
                s = function(e) {
                    return e.replace(/\n/g, "&#x000A;")
                }
                ,
                n = [],
                n.push("<h4>"),
                this.isNewRestriction ? n.push("" + i(t(this.t("restrictions.creating")))) : n.push("" + i(t(this.t("restrictions.editing")))),
                n.push("</h4>\n<form class='edit-restriction' action='#' method='post'>\n<div class='days section'>"),
                n.push("" + t(this.renderPartial("templates/util/day-checkboxes", {
                    cb: function(e) {
                        return function(t) {
                            return e.model.includesDay(t)
                        }
                    }(this)
                }))),
                n.push("<div class='not-shown text-danger validation-error'>\n<i class='fa fa-exclamation-circle'></i>"),
                n.push("" + i(t(this.t("restrictions.errors.days")))),
                n.push("</div>"),
                n.push("" + t(this.renderPartial("templates/restriction/toggle-checkboxes"))),
                n.push("</div>\n<div class='hours section'>\n<div class='clearfix'>\n<div class='col-xs-4 labels'>\n<label class='radio'>\n<input type='radio' name='allDay' value='on' checked='" + i(t(this.model.isAllDay())) + "'>"),
                n.push("" + i(t(this.t("restrictions.time_span.all_day")))),
                n.push("</label>\n<label class='radio'>\n<input type='radio' name='allDay' value='off' checked='" + i(t(!this.model.isAllDay())) + "'>"),
                n.push("" + i(t(this.t("restrictions.time_span.from") + ":"))),
                n.push("</label>\n</div>\n<div class='col-xs-8 inputs'>\n<div class='bootstrap-timepicker input-append input-group' dir='ltr'>\n<input class='form-control from-time time-selector' type='text' name='fromTime' value='" + i(t(this.model.fromTime || this.view.getDefaultFromTime())) + "' disabled='" + i(t(this.model.isAllDay())) + "'>\n<span class='add-on input-group-addon'>\n<i class='fa fa-clock-o'></i>\n</span>\n</div>\n<div class='to-label'>"),
                n.push("" + i(t(this.t("restrictions.time_span.to") + ":"))),
                n.push("</div>\n<div class='bootstrap-timepicker input-append input-group' dir='ltr'>\n<input class='form-control time-selector to-time' type='text' name='toTime' value='" + i(t(this.model.toTime || this.view.getDefaultToTime())) + "' disabled='" + i(t(this.model.isAllDay())) + "'>\n<span class='add-on input-group-addon'>\n<i class='fa fa-clock-o'></i>\n</span>\n</div>\n<div class='" + ["wraparound", "" + i(t(this.model.isTwoDay() ? void 0 : "hidden"))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>\n<i class='fa fa-info-circle'></i>"),
                n.push("" + i(t(this.t("restrictions.wraparound")))),
                n.push("</div>\n</div>\n</div>\n<div class='not-shown text-danger validation-error'>\n<i class='fa fa-exclamation-circle'></i>"),
                n.push("" + i(t(this.t("restrictions.errors.hours")))),
                n.push("</div>\n</div>\n<div class='clearfix dates section'>\n<div class='col-xs-4 labels'>\n<label class='radio'>\n<input type='radio' name='permanent' value='on' checked='" + i(t(this.model.isPermanent())) + "'>"),
                n.push("" + i(t(this.t("restrictions.permanent")))),
                n.push("</label>\n<label class='radio'>\n<input type='radio' name='permanent' value='off' checked='" + i(t(!this.model.isPermanent())) + "'>"),
                n.push("" + i(t(this.t("restrictions.date_range") + ":"))),
                n.push("</label>\n</div>\n<div class='col-xs-8 inputs'>\n<div class='selector-container'>\n<input class='btn btn-default daterange-selector' disabled='" + i(t(this.model.isPermanent())) + "'>\n</div>\n</div>\n</div>\n<div class='" + ["section", "vehicle-types", "" + i(t(this.model.allVehiclesIncluded() ? "all-included" : void 0))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>\n<div class='title'>"),
                n.push("" + i(t(this.t("restrictions.all_vehicles_title")))),
                n.push("<a class='toggle-vehicles' href='#'>" + i(t("(" + this.t("edit.edit") + ")")) + "</a>\n</div>\n<div class='types'>\n<p>" + i(t(this.t("restrictions.vehicles_explanation") + ":")) + "</p>\n<div class='checkboxes'>"),
                o = this.t("restrictions.vehicle_types");
                for (r in o)
                    e.call(o, r) && (a = o[r],
                    n.push("<label>\n<input class='vehicle_type' type='checkbox' checked='" + i(t(this.model.includesVehicleType(r))) + "' value='" + i(t(r)) + "'>"),
                    n.push("" + i(t(a))),
                    n.push("</label>"));
                return n.push("</div>\n<div class='not-shown text-danger validation-error'>\n<i class='fa fa-exclamation-circle'></i>"),
                n.push("" + i(t(this.t("restrictions.errors.vehicle_types")))),
                n.push("</div>"),
                n.push("" + t(this.renderPartial("templates/restriction/toggle-checkboxes"))),
                n.push("</div>\n</div>\n<div class='description section'>\n<textarea class='description form-control' placeholder='Enter description...' maxlength='" + i(t(this.descriptionMaxLength)) + "'>" + s(i(t(this.model.description))) + "</textarea>\n</div>\n<div class='controls well'>\n<button class='btn btn-primary' type='submit'>" + i(t(this.isNewRestriction ? this.t("edit.add") : this.t("edit.update"))) + "</button>\n<button class='btn btn-default cancel' type='submit'>" + i(t(this.t("edit.cancel"))) + "</button>\n<span class='not-shown text-danger validation-error'>" + i(t(this.t("restrictions.errors.general"))) + "</span>\n</div>\n</form>"),
                n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(t)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                (this.mixed && this.showMixed || !this.mixed && !this.showMixed) && (i.push("<tr data-index='" + t(e(this.index)) + "'>\n<td>" + t(e(this.h.formatDays(this.r.getDays()))) + "</td>\n<td>" + t(e(this.r.isAllDay() ? this.t("restrictions.time_span.all_day") : this.r.fromTime + " - " + this.r.toTime)) + "</td>\n<td class='" + t(e(this.r.isInThePast() ? "past" : void 0)) + "'>"),
                this.r.isPermanent() ? i.push("" + t(e(this.t("restrictions.permanent")))) : i.push("<span>" + t(e(this.r.getFromDate().toString(this.view.dateFormat) + " - " + this.r.getToDate().toString(this.view.dateFormat))) + "</span>"),
                i.push("</td>\n<td>" + t(e(this.r.allVehiclesIncluded() ? this.t("restrictions.all_vehicles") : this.t("restrictions.some_vehicles"))) + "</td>"),
                this.view.editable && (i.push("<td>\n<div class='btn btn-default edit'>\n<i class='fa fa-edit'></i>\n</div>\n<div class='btn btn-default remove'>\n<i class='fa fa-times-circle'></i>\n</div>"),
                this.mixed && i.push("<a class='add-to-all' href='#'>" + t(e(this.t("restrictions.apply_to_all"))) + "</a>"),
                i.push("</td>")),
                i.push("</tr>")),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='modal' id='schedule-modal' tabindex='-1'>\n<div class='modal-dialog'>\n<div class='modal-content'>\n<div class='modal-header'>\n<h3 class='modal-title'>\n<i class='fa fa-clock-o'></i>"),
                i.push("" + t(e(this.t("restrictions.title")))),
                i.push("</h3>\n</div>\n<div class='modal-body'>\n<div class='content'></div>\n</div>\n</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        var e = {}.hasOwnProperty;
        return function(t) {
            return function() {
                var t, i, n, s, r, o, a, l, u, c, d, h, p, g, m, f, v;
                if (i = this.__htmlEscape,
                t = this.__cleanValue,
                n = [],
                n.push("<div class='items'>"),
                this.view.shouldShowTabs) {
                    n.push("<ul class='nav nav-tabs'>"),
                    d = this.model;
                    for (r in d)
                        e.call(d, r) && (s = d[r],
                        n.push("<li class='" + i(t(r === this.selectedGroup ? "active" : "")) + "'>\n<a data-toggle='tab' href='#restriction-edit-" + i(t(s.name)) + "' data-group='" + i(t(r)) + "'>"),
                        n.push("" + i(t(this.t("restrictions.groups." + r)))),
                        n.push("<span class='badge count'>" + i(t(s.restrictions.length)) + "</span>\n</a>\n</li>"));
                    n.push("</ul>")
                }
                n.push("<div class='tab-content'>"),
                h = this.model;
                for (r in h)
                    if (e.call(h, r)) {
                        for (s = h[r],
                        n.push("<div class='" + ["tab-pane", "" + i(t(r !== this.selectedGroup && this.view.shouldShowTabs ? "" : "active"))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "' id='restriction-edit-" + r + "' data-group='" + i(t(r)) + "'>\n<div class='" + ["group-title", "" + i(t(this.view.shouldShowTabs ? void 0 : "no-tabs"))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>"),
                        this.view.multipleFeatures ? n.push("" + i(t(this.t("restrictions.group_title.multiple") + ":"))) : n.push("" + i(t(s.title + ":"))),
                        n.push("</div>\n<table class='table table-striped'>\n<tr>\n<th>" + i(t(this.t("restrictions.headers.days"))) + "</th>\n<th>" + i(t(this.t("restrictions.headers.time"))) + "</th>\n<th>" + i(t(this.t("restrictions.headers.range"))) + "</th>\n<th>" + i(t(this.t("restrictions.headers.vehicles"))) + "</th>"),
                        this.view.editable && n.push("<th>" + i(t(this.t("restrictions.headers.actions"))) + "</th>"),
                        n.push("</tr>"),
                        p = s.restrictions,
                        o = a = 0,
                        u = p.length; a < u; o = ++a)
                            v = p[o],
                            n.push("" + t(this.renderPartial("templates/restriction/item", {
                                r: v,
                                index: o,
                                view: this.view,
                                features: this.features,
                                showMixed: !1,
                                mixed: (null != (g = v.models) ? g.length : void 0) < this.features.length
                            })));
                        if (this.view.mixedGroups[r])
                            for (n.push("<tr>\n<th class='mixed' colspan='" + i(t(5)) + "'>" + i(t(this.t("restrictions.mixed") + ":")) + "</th>\n</tr>"),
                            m = s.restrictions,
                            o = l = 0,
                            c = m.length; l < c; o = ++l)
                                v = m[o],
                                n.push("" + t(this.renderPartial("templates/restriction/item", {
                                    r: v,
                                    index: o,
                                    view: this.view,
                                    features: this.features,
                                    showMixed: !0,
                                    mixed: (null != (f = v.models) ? f.length : void 0) < this.features.length
                                })));
                        !s.restrictions.isEmpty() && this.view.numGroups > 1 && !this.view.multipleFeatures && this.view.editable && n.push("<tr>\n<th class='copy-container' colspan='" + i(t(5)) + "'>\n<a class='copy' href='#'>" + i(t(this.t("restrictions.copy_all"))) + "</a>\n</th>\n</tr>"),
                        n.push("</table>"),
                        s.restrictions.isEmpty() && n.push("<div class='no-restrictions'>" + i(t(this.t("restrictions.none"))) + "</div>"),
                        this.view.showDifficultToggle && (n.push("<label>\n<input class='difficult' type='checkbox' checked='" + i(t(this.view.isDifficult)) + "'>"),
                        n.push("" + i(t(this.t("restrictions.difficult_turn")))),
                        n.push("</label>")),
                        n.push("<div class='actions well'>"),
                        this.view.editable && (n.push("<div class='add-restriction btn btn-default'>\n<i class='fa fa-plus'></i>"),
                        n.push("" + i(t(this.t("restrictions.add")))),
                        n.push("</div>\n<div class='btn btn-primary done'>" + i(t(this.t("edit.apply"))) + "</div>")),
                        n.push("<div class='btn btn-default cancel-edit'>" + i(t(this.t("edit.cancel"))) + "</div>\n</div>\n</div>")
                    }
                return n.push("</div>\n</div>"),
                n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(t)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='toggle'>\n<a class='select-all' href='#'>" + t(e(this.t("edit.select.all"))) + "</a>\n/\n<a class='select-none' href='#'>" + t(e(this.t("edit.select.none"))) + "</a>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        var e = {}.hasOwnProperty;
        return function(t) {
            return function() {
                var t, i, n, s, r, o, a, l, u, c, d, h, p, g, m, f, v, y, b, _, w, S, E, C;
                if (i = this.__htmlEscape,
                t = this.__cleanValue,
                n = [],
                n.push("<div class='clearfix preview'>\n<div class='address-edit-btn'>\n<h3 class='primary-street'>"),
                null != this.addressDetails ? n.push("" + i(t(this.addressDetails.streetName + ", " + this.addressDetails.cityName + (this.addressDetails.hasState ? ", " + this.addressDetails.stateName : ", " + this.addressDetails.countryName)))) : n.push("" + i(t(this.t("segment.address.none")))),
                n.push("<span class='address-edit-icon'>\n<i class='fa fa-pencil'></i>\n</span>\n</h3>\n</div>"),
                null != this.address.altStreets && this.address.altStreets.length > 0) {
                    for (n.push("<ul class='alt-street-list list-unstyled'>"),
                    u = this.address.altStreets,
                    a = 0,
                    l = u.length; a < l; a++)
                        s = u[a],
                        n.push("<li class='alt-street'>"),
                        n.push("" + i(t(s.street.name + ", " + (s.city.isEmpty() ? this.t("edit.address.no_city") : s.city.attributes.name)))),
                        n.push("</li>");
                    n.push("</ul>")
                }
                if (n.push("</div>\n<form class='address-form clearfix inner-form'>"),
                n.push("" + t(this.renderPartial("templates/chrome_autofill_off"))),
                n.push("<div class='primary-street'>\n<div class='form-group toggleable-input'>\n<label class='control-label'>"),
                n.push("" + i(t(this.t("edit.address.street")))),
                n.push("<div class='controls-container in-label toggle-empty'>\n<input id='emptyStreet' type='checkbox' name='emptyStreet' checked='" + i(t(!!(null != (c = this.address.street) ? c.isEmpty : void 0))) + "' disabled='" + i(t(this.disableEmptyStreet)) + "'>\n<label for='emptyStreet'>" + i(t(this.t("edit.address.none"))) + "</label>\n</div>\n</label>\n<div class='controls input-group'>\n<input class='form-control streetName' autocomplete='off' type='text' name='streetName' title='Street name' maxlength='100' value='" + i(t(null != (m = this.address.street) ? m.name : void 0)) + "' required='" + i(t(!(null != (f = this.address.street) ? f.isEmpty : void 0))) + "' disabled='" + i(t(!!(null != (v = this.address.street) ? v.isEmpty : void 0))) + "'>\n<span class='input-group-btn tts-playback-region'></span>\n</div>\n</div>\n<div class='form-group toggleable-input'>\n<label class='control-label'>"),
                n.push("" + i(t(this.t("edit.address.city")))),
                n.push("<div class='controls-container in-label toggle-empty'>\n<input id='emptyCity' type='checkbox' name='emptyCity' checked='" + i(t(!!(null != (y = this.address.city) ? y.isEmpty() : void 0))) + "'>\n<label for='emptyCity'>" + i(t(this.t("edit.address.none"))) + "</label>\n</div>\n</label>\n<div class='controls'>\n<input class='form-control' autocomplete='off' maxlength='100' name='cityName' title='City name' type='text' value='" + i(t(null != (b = this.address.city) ? b.attributes.name : void 0)) + "' required='" + i(t(!(null != (_ = this.address.city) ? _.isEmpty() : void 0))) + "' disabled='" + i(t(!!(null != (w = this.address.city) ? w.isEmpty() : void 0))) + "'>\n</div>\n</div>"),
                this.hasStates) {
                    n.push("<div class='form-group'>\n<label class='control-label'>" + i(t(this.t("edit.address.state"))) + "</label>\n<div class='controls'>\n<select class='form-control' name='stateID' required>"),
                    this.segment.mixed.state && n.push("<option value=''></option>"),
                    S = this.dataModel.states.objects;
                    for (C in S)
                        e.call(S, C) && (E = S[C],
                        n.push("" + t(this.h.option(E.name, C, null != (d = this.address.state) ? d.id : void 0))));
                    n.push("</select>\n</div>\n</div>")
                } else
                    n.push("<input class='form-control' name='stateID' type='hidden' value='" + i(t(null != (h = this.address.state) ? h.id : void 0)) + "'>");
                n.push("<div class='form-group'>\n<label class='control-label'>" + i(t(this.t("edit.address.country"))) + "</label>\n<div class='controls'>\n<select class='form-control' name='countryID' required>"),
                this.segment.mixed.country && n.push("<option value=''></option>"),
                p = this.dataModel.countries.objects;
                for (o in p)
                    e.call(p, o) && (r = p[o],
                    n.push("" + t(this.h.option(r.name, o, null != (g = this.address.country) ? g.id : void 0))));
                return n.push("</select>\n</div>\n</div>\n</div>\n<div class='alt-street-controls'></div>\n<div class='action-buttons'>\n<button class='address-edit-cancel btn btn-default cancel-button' type='button'>" + i(t(this.t("edit.cancel"))) + "</button>\n<button class='btn btn-primary save-button' type='submit'>\n<span class='loading not-shown'>\n<i class='fa fa-spin fa-spinner'></i>\n</span>"),
                n.push("" + i(t(this.t("edit.apply")))),
                n.push("</button>\n</div>\n</form>"),
                n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(t)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                if (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                this.address.anyStreet || this.address.altStreets.length > 0) {
                    for (i.push("<table class='add-alt-street-form'>\n<tr>\n<th class='city'>" + t(e(this.t("edit.address.city"))) + "</th>\n<th>" + t(e(this.t("edit.address.street"))) + "</th>\n<th class='delete-buttons'></th>\n</tr>"),
                    o = this.address.altStreets,
                    s = 0,
                    r = o.length; s < r; s++)
                        n = o[s],
                        i.push("<tr class='alt-street' data-id='" + t(e(n.street.id)) + "'>\n<td>" + t(e(n.city.isEmpty() ? this.t("edit.address.none") : n.city.attributes.name)) + "</td>\n<td>" + t(e(n.street.name)) + "</td>\n<td>\n<a class='alt-street-delete' href='#'>\n<i class='fa fa-times-circle'></i>\n</a>\n</td>\n</tr>");
                    i.push("<tr class='alt-street-form-template new-alt-street'>\n<td>"),
                    i.push("" + e(this.renderPartial("templates/chrome_autofill_off"))),
                    this.isHighway ? (i.push("<div class='toggleable-input'>\n<label>\n<input class='form-control' autocomplete='off' disabled maxlength='100' name='cityName' title='City name' type='text'>\n</label>\n<div class='controls-container'>\n<input id='alt-city' checked name='emptyCity' type='checkbox'>\n<label class='checkbox' for='alt-city'>"),
                    i.push("" + t(e(this.t("edit.address.none")))),
                    i.push("</label>\n</div>\n</div>")) : (i.push("<div class='toggleable-input'>\n<label>\n<input class='form-control' type='text' autocomplete='off' name='cityName' title='City name' maxlength='100' required='" + t(e(!this.address.city.isEmpty())) + "' disabled='" + t(e(this.address.city.isEmpty())) + "' value='" + t(e(this.address.city.attributes.name)) + "'>\n</label>\n<div class='controls-container'>\n<input id='alt-city' type='checkbox' name='emptyCity' checked='" + t(e(this.address.city.isEmpty())) + "'>\n<label for='alt-city'>"),
                    i.push("" + t(e(this.t("edit.address.none")))),
                    i.push("</label>\n</div>\n</div>")),
                    i.push("</td>\n<td>\n<label>\n<input class='form-control' autocomplete='off' maxlength='100' name='streetName' required='' title='Street name' type='text'>\n</label>\n</td>\n<td>\n<a class='alt-street-delete' href='#'>\n<i class='fa fa-times-circle'></i>\n</a>\n</td>\n</tr>\n<div class='alt-streets-actions'>\n<a class='add-alt-street-btn' href='#'>" + t(e(this.t("edit.segment.actions.add_alt_street"))) + "</a>\n</div>\n</table>")
                }
                return i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<label class='control-label'>" + t(e(this.t("edit.segment.fields.average_speed_camera"))) + "</label>\n<div class='controls'>\n<div class='controls-container'>"),
                (this.segment.mixed.fwdDirection || this.segment.attributes.fwdDirection) && i.push("" + e(this.renderPartial("templates/segment/flag-attribute", {
                    segment: this.segment,
                    attribute: "fwdSpeedCamera"
                }))),
                i.push("</div>\n<div class='controls-container'>"),
                (this.segment.mixed.revDirection || this.segment.attributes.revDirection) && i.push("" + e(this.renderPartial("templates/segment/flag-attribute", {
                    segment: this.segment,
                    attribute: "revSpeedCamera"
                }))),
                i.push("</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o, a, l, u, c, d, h, p, g, m, f, v, y, b, _, w, S, E, C, L;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='segment'>\n<div class='selection'>\n<span class='text'>" + t(e(this.t("edit.segment.title", {
                    count: this.numSegments
                }))) + "</span>\n</div>"),
                this.view.consistentDirection || (i.push("<div class='direction-message'>\n<i class='fa fa-info-circle'></i>"),
                i.push("" + t(e(this.t("edit.segment.op_direction")))),
                i.push("</div>")),
                i.push("<div class='address-edit address-edit-view clearfix'></div>"),
                this.editable || (i.push("<div class='segment-details'>"),
                this.editingMultiple ? (i.push("<span class='error'>" + t(e(this.t("edit.segment.permissions.multiple.title"))) + "</span>"),
                i.push("" + t(e(this.t("edit.segment.permissions.multiple.description"))))) : this.segment.hasClosures() ? (i.push("<span class='error'>" + t(e(this.t("edit.segment.permissions.has_closures.title"))) + "</span>"),
                i.push("" + t(e(this.t("edit.segment.permissions.has_closures.description"))))) : this.isLockedForUser ? (i.push("<span class='error'>" + t(e(this.t("edit.segment.permissions.locked.title"))) + "</span>"),
                i.push("" + t(e(this.t("edit.segment.permissions.locked.description", {
                    lockLevel: this.h.formatRank(this.segment.getLockRank())
                }))))) : this.isInBigJunction ? (i.push("<span class='error'>" + t(e(this.t("edit.segment.permissions.big_junction.title"))) + "</span>"),
                i.push("" + t(e(this.t("edit.segment.permissions.big_junction.description"))))) : (i.push("<span class='error'>" + t(e(this.t("edit.segment.permissions.area.title"))) + "</span>"),
                i.push("" + t(e(this.t("edit.segment.permissions.area.description"))))),
                i.push("</div>")),
                i.push("<ul class='nav nav-tabs'>\n<li class='active'>\n<a data-toggle='tab' href='#segment-edit-general'>" + t(e(this.t("edit.segment.tabs.general"))) + "</a>\n</li>\n<li>\n<a data-toggle='tab' href='#segment-edit-closures'>" + t(e(this.t("edit.segment.tabs.closures"))) + "</a>\n</li>\n</ul>\n<div class='tab-content'>\n<div class='active tab-pane' id='segment-edit-general'>\n<form class='attributes-form side-panel-section'>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.segment.fields.road_type"))) + "</label>\n<div class='controls'>\n<select class='form-control' data-type='numeric' name='roadType'>\n<option value='' selected='" + t(e(this.segment.mixed.roadType)) + "'>" + t(e(this.segment.mixed.roadType ? this.t("edit.multiple_values") : void 0)) + "</option>\n<optgroup label='" + t(e(this.t("segment.categories.highways"))) + "'>"),
                f = this.segment.HIGHWAY_ROAD_TYPES,
                s = 0,
                l = f.length; s < l; s++)
                    C = f[s],
                    i.push("" + e(this.h.roadTypeOption(this.segment, C)));
                for (i.push("</optgroup>\n<optgroup label='" + t(e(this.t("segment.categories.streets"))) + "'>"),
                i.push("" + e(this.h.roadTypeOption(this.segment, 2))),
                i.push("" + e(this.h.roadTypeOption(this.segment, 1))),
                i.push("</optgroup>\n<optgroup label='" + t(e(this.t("segment.categories.other_drivable"))) + "'>"),
                i.push("" + e(this.h.roadTypeOption(this.segment, 8))),
                i.push("" + e(this.h.roadTypeOption(this.segment, 20))),
                i.push("" + e(this.h.roadTypeOption(this.segment, 17))),
                i.push("" + e(this.h.roadTypeOption(this.segment, 15))),
                i.push("</optgroup>\n<optgroup label='" + t(e(this.t("segment.categories.non_drivable"))) + "'>"),
                v = this.segment.NON_DRIVABLE_ROAD_TYPES,
                r = 0,
                u = v.length; r < u; r++)
                    C = v[r],
                    i.push("" + e(this.h.roadTypeOption(this.segment, C)));
                for (i.push("</optgroup>\n</select>"),
                this.view.shouldShowRoutingRoadTypeMessage() && i.push("<div class='hint'>" + e(this.view.getRoutingRoadTypeMessage()) + "</div>"),
                i.push("<div class='controls-container'>\n<input id='tollRoadCheck' type='checkbox' name='tollRoad' checked='" + t(e(!!this.segment.attributes.toll)) + "' mixed='" + t(e(!!this.segment.mixed.toll)) + "'>\n<label for='tollRoadCheck'>" + t(e(this.t("edit.segment.fields.toll"))) + "</label>\n</div>\n<div class='controls-container'>"),
                i.push("" + e(this.renderPartial("templates/segment/flag-attribute", {
                    segment: this.segment,
                    attribute: "unpaved"
                }))),
                i.push("</div>\n<div class='controls-container'>"),
                i.push("" + e(this.renderPartial("templates/segment/flag-attribute", {
                    segment: this.segment,
                    attribute: "tunnel"
                }))),
                i.push("</div>\n</div>\n</div>"),
                this.view.shouldShowRoutingSelect() && i.push("" + e(this.renderPartial("templates/segment/routing", this))),
                this.view.shouldAllowRestrictionEditing() && (i.push("<div class='form-group'>\n<button class='action-button btn btn-lightning btn-positive edit-restrictions'>"),
                E = this.hasRestrictions && !this.editingMultiple ? "(" + this.segment.getRestrictionCount() + ")" : "",
                this.segment.arePropertiesEditable() ? this.editingMultiple || this.hasRestrictions ? (i.push("" + t(e(this.t("edit.segment.actions.restrictions.edit")))),
                i.push("" + t(e(E)))) : i.push("" + t(e(this.t("edit.segment.actions.restrictions.add")))) : (i.push("" + t(e(this.t("edit.segment.actions.restrictions.view")))),
                i.push("" + t(e(E)))),
                i.push("</button>\n</div>")),
                i.push("<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.segment.fields.direction"))) + "</label>\n<div class='controls'>\n<select class='form-control' data-type='numeric' name='direction' data-refresh>"),
                this.segment.mixed.direction && i.push("<option value='-1'>" + t(e(this.t("edit.multiple_values"))) + "</option>"),
                i.push("" + e(this.h.directionOption(this.segment, 3))),
                i.push("" + e(this.h.directionOption(this.segment, 1))),
                i.push("" + e(this.h.directionOption(this.segment, 2))),
                !this.segment.mixed.allowNoDirection && this.segment.attributes.allowNoDirection && i.push("" + e(this.h.directionOption(this.segment, 0))),
                i.push("</select>\n</div>\n</div>\n<div class='form-group'>"),
                i.push("" + e(this.renderPartial("templates/segment/average-speed-camera", {
                    segment: this.segment
                }))),
                i.push("</div>"),
                this.segment.isDrivable() && this.allowSpeedLimit && (i.push("<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.segment.fields.speed_limit"))) + "</label>\n<div class='clearfix controls speed-limit'>"),
                (this.segment.mixed.fwdDirection || this.segment.attributes.fwdDirection) && (n = "fwdMaxSpeed",
                i.push("" + e(this.renderPartial("templates/segment/speed-limit", {
                    segment: this.segment,
                    value: this.view.getSpeedLimitValue(n),
                    unverifiedAttribute: "fwdMaxSpeedUnverified",
                    attribute: n
                })))),
                (this.segment.mixed.revDirection || this.segment.attributes.revDirection) && (n = "revMaxSpeed",
                i.push("" + e(this.renderPartial("templates/segment/speed-limit", {
                    segment: this.segment,
                    value: this.view.getSpeedLimitValue(n),
                    unverifiedAttribute: "revMaxSpeedUnverified",
                    attribute: n
                })))),
                i.push("</div>\n</div>")),
                i.push("<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.segment.fields.level"))) + "</label>\n<div class='controls'>\n<select class='form-control' data-type='numeric' name='level'>\n<option value=''>" + t(e(this.segment.mixed.level ? this.t("edit.multiple_values") : void 0)) + "</option>"),
                h = o = y = this.segment.MaxLevel,
                b = this.segment.MinLevel; y <= b ? o <= b : o >= b; h = y <= b ? ++o : --o)
                    i.push("" + e(this.h.option(this.t("edit.segment.levels")[h] || h, h, this.segment.attributes.level)));
                if (i.push("</select>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.segment.fields.lock"))) + "</label>\n<div class='controls'>\n<select class='form-control' data-type='numeric' data-nullable='" + t(e(!0)) + "' name='lockRank'>"),
                this.segment.mixed.lockRank && i.push("<option value='' data-mixed-indicator='" + t(e(!0)) + "'>" + t(e(this.t("edit.multiple_values"))) + "</option>"),
                this.editable)
                    for (i.push("" + e(this.h.segmentRankOption(this.segment, null , this.allowDefaultRank))),
                    m = a = 0,
                    _ = this.userRank; 0 <= _ ? a <= _ : a >= _; m = 0 <= _ ? ++a : --a)
                        i.push("" + e(this.h.segmentRankOption(this.segment, m)));
                else
                    i.push("" + e(this.h.segmentRankOption(this.segment, this.segment.attributes.lockRank)));
                if (i.push("</select>\n</div>\n</div>\n<div class='form-group more-actions'>"),
                this.isInRoundabout && (i.push("<button class='action-button btn btn-default btn-positive select-entire-roundabout'>"),
                i.push("" + t(e(this.t("edit.segment.actions.select_entire_roundabout")))),
                i.push("</button>")),
                this.segment.mixed.street || !this.address.street || this.address.street.isEmpty || (i.push("<button class='action-button btn btn-default btn-positive select-entire-street'>"),
                i.push("" + t(e(this.t("edit.segment.actions.select_entire_street")))),
                i.push("</button>"),
                this.allowEditingHouseNumbers && (i.push("<button class='action-button btn btn-positive btn-success edit-house-numbers' disabled='" + t(e(this.dataModel.actionManager.canSave())) + "'>"),
                this.segment.canEditHouseNumbers() ? i.push("" + t(e(this.t("edit.segment.actions.edit_house_numbers")))) : i.push("" + t(e(this.t("edit.segment.actions.view_house_numbers")))),
                i.push("</button>"),
                this.dataModel.actionManager.canSave() && i.push("<p>Save your changes to edit house numbers</p>"))),
                i.push("</div>\n</form>\n<ul class='additional-attributes list-unstyled side-panel-section'>"),
                null != this.segment.attributes.length && i.push("<li>\n<span class='name'>" + t(e(this.t("edit.segment.fields.length") + ":")) + "</span>\n<span class='value'>" + t(e(this.h.lengthString(this.segment.attributes.length))) + "</span>\n</li>"),
                null != this.segment.attributes.updatedOn)
                    if (this.editingMultiple)
                        if (this.segment.mixed.updatedBy) {
                            for (i.push("<li>"),
                            i.push("" + t(e(this.t("edit.segment.fields.updated_by") + ":"))),
                            i.push("<ul class='list-unstyled updated-by-list'>"),
                            w = this.segment.attributes.updatedBy,
                            p = 0,
                            c = w.length; p < c; p++)
                                L = w[p],
                                i.push("<li>" + e(this.h.userProfile(L)) + "\n&lrm;\n</li>");
                            i.push("</ul>\n</li>")
                        } else
                            i.push("<li>\n<span class='name'>" + t(e(this.t("edit.segment.fields.updated_by") + ":")) + "</span>\n<span class='value'>" + e(this.h.userProfile(this.segment.attributes.updatedBy)) + "</span>\n</li>");
                    else
                        i.push("<li>" + e(this.safe_t("edit.updated", {
                            time: this.h.dateOnlyString(this.segment.attributes.updatedOn),
                            user: this.h.userProfile(this.segment.attributes.updatedBy)
                        })) + "\n&lrm;\n</li>");
                if (this.editingMultiple)
                    if (this.segment.mixed.createdBy) {
                        for (i.push("<li>"),
                        i.push("" + t(e(this.t("edit.segment.fields.created_by") + ":"))),
                        i.push("<ul class='created-by-list list-unstyled'>"),
                        S = this.segment.attributes.createdBy,
                        g = 0,
                        d = S.length; g < d; g++)
                            L = S[g],
                            i.push("<li>" + e(this.h.userProfile(L)) + "\n&lrm;\n</li>");
                        i.push("</ul>\n</li>")
                    } else
                        i.push("<li>\n<span>" + t(e(this.t("edit.segment.fields.created_by") + ":")) + "</span>\n<span class='value'>" + e(this.h.userProfile(this.segment.attributes.createdBy)) + "</span>\n</li>");
                else
                    null != this.segment.attributes.createdBy && i.push("<li>" + e(this.safe_t("edit.created", {
                        time: this.h.dateOnlyString(this.segment.attributes.createdOn),
                        user: this.h.userProfile(this.segment.attributes.createdBy)
                    })) + "\n&lrm;\n</li>");
                return i.push("<li>" + t(e(this.t("edit.id", {
                    num: this.segmentId
                }))) + "</li>\n</ul>\n</div>\n<div class='tab-pane' id='segment-edit-closures'>\n<div class='closures'></div>\n</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                s = this.attribute + "Checkbox",
                r = !!this.segment.mixed[this.attribute],
                n = this.segment.flagAttributes[this.attribute] && !r,
                i.push("<input id='" + t(e(s)) + "' name='" + t(e(this.attribute)) + "' type='checkbox' checked='" + t(e(n)) + "' mixed='" + t(e(r)) + "'>\n<label for='" + t(e(s)) + "'>"),
                i.push("" + t(e(this.t("edit.segment.fields." + this.attribute)))),
                i.push("</label>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.segment.fields.routing"))) + "</label>\n<div class='controls'>\n<select class='form-control' data-type='numeric' name='routingRoadType' data-nullable>"),
                this.segment.mixed.routingRoadType && i.push("<option value='' data-mixed-indicator='" + t(e(!0)) + "'>" + t(e(this.t("edit.multiple_values"))) + "</option>"),
                i.push("" + e(this.h.option(this.t("edit.segment.routing.road_type.prev"), this.routingRoadTypes.prev, this.segment.attributes.routingRoadType, !1, this.prevRouteRankDisabled))),
                i.push("" + e(this.h.option(this.t("edit.segment.routing.road_type.current"), null , this.segment.attributes.routingRoadType))),
                i.push("" + e(this.h.option(this.t("edit.segment.routing.road_type.next"), this.routingRoadTypes.next, this.segment.attributes.routingRoadType, !1, this.nextRouteRankDisabled))),
                i.push("</select>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<label>\n<div class='direction-label'>"),
                i.push("" + t(e(this.t("edit.segment.speed_limit." + this.attribute)))),
                i.push("</div>"),
                this.segment.mixed[this.attribute] && (n = this.t("edit.multiple_values")),
                i.push("<input class='form-control' type='number' name='" + t(e(this.attribute)) + "' maxlength='4' value='" + t(e(this.value)) + "' data-type='numeric' data-nullable='true' data-units='" + t(e(this.segment.UNITS.speed)) + "'>\n<div class='unit-label'>"),
                i.push("" + t(e(this.h.speedString()))),
                i.push("</div>\n</label>"),
                this.segment.canChangeMaxSpeedUnverified(this.unverifiedAttribute) && i.push("<div class='controls-container'>\n<input id='" + this.unverifiedAttribute + "Checkbox' type='checkbox' name='" + t(e(this.unverifiedAttribute)) + "' checked='" + t(e(!this.segment.attributes[this.unverifiedAttribute])) + "' mixed='" + t(e(!!this.segment.mixed[this.unverifiedAttribute])) + "'>\n<label for='" + t(e(this.unverifiedAttribute)) + "Checkbox'>Verified</label>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o, a, l;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<select class='form-control language-select locale-select'>"),
                o = this.locales,
                n = 0,
                s = o.length; n < s; n++)
                    a = o[n],
                    r = a.locale,
                    l = a.tts,
                    i.push("<option value='" + t(e(l)) + "'>" + t(e(I18n.languageNames[r])) + "</option>");
                return i.push("</select>\n<buttton class='btn btn-primary play-button'>" + t(e(this.t("tts.play"))) + "</buttton>\n<a class='report-problem-link' href='" + t(e(W.Config.tts.report_problem_url)) + "' target='_blank'>"),
                i.push("" + t(e(this.t("tts.report_problem")))),
                i.push("</a>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<button class='btn btn-primary tts-button' type='button' disabled='" + t(e(this.isEmpty)) + "'>\n<i class='fa fa-volume-up'></i>\n</button>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div id='session-expired-lightbox'>\n<div class='map-modal-header'>" + t(e(this.t("session.expired.title"))) + "</div>\n<div class='map-modal-body'>\n<p>" + t(e(this.t("session.expired.description"))) + "</p>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='action dropdown env-switcher'>\n<a class='dropdown-toggle' data-toggle='dropdown' href='#'>"),
                i.push("" + t(e(this.t("envs")[W.location.code]))),
                i.push("<i class='fa fa-angle-down'></i>\n</a>\n<ul class='dropdown-menu' role='menu'>\n<li>\n<a class='env-link' href='/" + t(e("en" !== I18n.locale ? I18n.locale + "/" : void 0)) + "editor' data-env='row'>" + t(e(this.t("envs.row"))) + "</a>\n</li>\n<li>\n<a class='env-link' href='/" + t(e("en" !== I18n.locale ? I18n.locale + "/" : void 0)) + "editor' data-env='usa'>" + t(e(this.t("envs.usa"))) + "</a>\n</li>\n<li>\n<a class='env-link' href='/" + t(e("en" !== I18n.locale ? I18n.locale + "/" : void 0)) + "editor' data-env='il'>" + t(e(this.t("envs.il"))) + "</a>\n</li>\n</ul>\n</div>\n<div id='snapshot-toggler'></div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<ul class='list-unstyled'>\n<li>\n<a href='" + t(e(this.t("internal.wiki_link"))) + "' target='_blank'>" + t(e(this.t("footer.wiki"))) + "</a>\n</li>\n<li>\n<a href='" + t(e(this.t("internal.editing_forum_link"))) + "' target='_blank'>" + t(e(this.t("footer.forum"))) + "</a>\n</li>\n<li>\n<a href='" + t(e(this.t("internal.status_page_link"))) + "' target='_blank'>" + t(e(this.t("footer.status"))) + "</a>\n</li>\n<li>\n<a href='#keyboard-dialog' data-toggle='modal'>\n<kbd>?</kbd>"),
                i.push("" + t(e(this.t("footer.keyboard_shortcuts")))),
                i.push("</a>\n</li>\n</ul>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div id='user-info'></div>\n<div id='edit-panel'>\n<div class='contents'></div>\n</div>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='user-profile'>\n<div class='" + ["level-icon", "level-icon-" + t(e(this.normalizedLevel))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'></div>\n<div class='user-about'>\n<h3>"),
                i.push("" + t(e(this.userName))),
                i.push("</h3>\n<a class='logout-link' href='#'>" + t(e(this.t("user.logout"))) + "</a>\n<div class='level'>"),
                this.isStaff ? i.push("" + e(this.safe_t("user.info.staff_level_name"))) : i.push("" + e(this.safe_t("user.info.level_name", {
                    level: this.normalizedLevel
                }))),
                i.push("</div>\n<div class='user-stats'>\n<div class='stat'>"),
                i.push("" + e(this.t("user.info.points", {
                    points: I18n.toNumber(this.totalPoints, {
                        precision: 0
                    })
                }))),
                i.push("<div class='separator'>/</div>\n</div>\n<div class='stat'>"),
                i.push("" + e(this.t("user.info.edits", {
                    edits: I18n.toNumber(this.totalEdits, {
                        precision: 0
                    })
                }))),
                i.push("</div>\n<i class='waze-tooltip' id='permissions-info' data-toggle='tooltip'></i>\n</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<section id='user-box'>\n<div id='user-details'></div>\n</section>\n<section id='user-tabs'>\n<ul class='nav nav-tabs'>\n<li class='active'>\n<a data-toggle='tab' href='#sidepanel-feed'>" + t(e(this.t("user.feed.title"))) + "\n<span class='fa fa-repeat feed-refresh nav-tab-icon'></span>\n</a>\n</li>\n<li>\n<a data-toggle='tab' href='#sidepanel-drives'>" + t(e(this.t("user.drives.title"))) + "</a>\n</li>\n<li>\n<a data-toggle='tab' href='#sidepanel-areas'>" + t(e(this.t("user.areas.title"))) + "</a>\n</li>\n<li>\n<a data-toggle='tab' href='#sidepanel-prefs'>\n<span class='fa fa-gear'></span>\n</a>\n</li>\n</ul>\n</section>\n<div class='tab-content'>\n<div class='active tab-pane' id='sidepanel-feed'></div>\n<div class='tab-pane' id='sidepanel-drives'>\n<div class='loading-animation'></div>\n<div class='error hide'>"),
                i.push("" + t(e(this.t("user.drives.error")))),
                i.push("</div>\n<div class='result-list-container'></div>\n<div class='pagination'></div>\n</div>\n<div class='tab-pane' id='sidepanel-areas'>\n<div class='result-list-container'></div>\n<div class='pagination'></div>\n</div>\n<div class='tab-pane' id='sidepanel-prefs'></div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t, i) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, n, s;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                n = [],
                s = i(44).UNIT,
                W.Config.user_editing_enabled ? (n.push("" + t(e(this.t("user.info.edit_area.title", {
                    distance: this.h.lengthString(this.editableMiles, {
                        units: s.MILE,
                        translationKey: "user.info.edit_area"
                    })
                })))),
                this.isCountryManager() ? n.push("" + t(e(this.t("user.info.country_manager")))) : this.isAreaManager && n.push("" + t(e(this.t("user.info.area_manager"))))) : n.push("" + e(this.safe_t("user.info.editing_restricted", {
                    forum_link: this.h.link(this.t("user.info.forum"), this.t("internal.ur_forum_link"))
                }))),
                n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<h2>"),
                i.push("" + e(this.safe_t("login.greeting", {
                    stranger: this.h.contentTag("strong", this.t("login.stranger"))
                }))),
                i.push("</h2>\n<div class='sandbox'>"),
                i.push("" + t(e(this.t("play_mode.sidebar.subtitle")))),
                i.push("<br>"),
                i.push("" + t(e(this.t("play_mode.sidebar.description")))),
                i.push("<br>"),
                i.push("" + t(e(this.t("play_mode.sidebar.login")))),
                i.push("<br>\n<a href='/forgot_password' target='_blank'>" + t(e(this.t("play_mode.sidebar.help"))) + "</a>\n<div class='links'>\n<a class='btn btn-default tutorial' data-toggle='modal' href='#tutorial-dialog'>\n<div class='title'>" + t(e(this.t("welcome.tutorial.title"))) + "</div>\n<div class='description'>" + t(e(this.t("welcome.tutorial.description"))) + "</div>\n</a>\n<a class='btn btn-default wiki' href='http://www.waze.com/wiki/index.php/Map_Editing_-_select_map_editor' target='_blank'>\n<div class='title'>" + t(e(this.t("welcome.wiki.title"))) + "</div>\n<div class='description'>" + t(e(this.t("welcome.wiki.description"))) + "</div>\n</a>\n<a class='btn btn-default forum' href='" + t(e(this.t("internal.editing_forum_link"))) + "' target='_blank'>\n<div class='title'>" + t(e(this.t("welcome.forum.title"))) + "</div>\n<div class='description'>" + t(e(this.t("welcome.forum.description"))) + "</div>\n</a>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div class='snapshot-message'>\nSnapshot mode - editing is disabled\n<a class='return-to-edit-mode'>Return to edit mode</a>\n</div>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                this.isOn ? i.push("<a class='toggler'>Exit Snapshot mode</a>") : i.push("<a class='toggler' disabled='" + t(e(!this.canToggleOn)) + "'>Enter Snapshot mode</a>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e;
                return e = [],
                e.push("<div class='snapshot-message'>\nSnapshot mode - editing is disabled\n<a class='return-to-edit-mode'>Return to edit mode</a>\n</div>"),
                e.join("\n").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t, i) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, n;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                n = [],
                n.push("<div class='clearfix hidable-message' id='show-tutorial-lightbox'>\n<div class='fa fa-times-circle hide-message' data-hide-message='tips/watch-tutorial'></div>\n<a data-toggle='modal' href='#tutorial-dialog'>\n<img src='" + t(e(i(1015))) + "'>"),
                n.push("" + t(e(this.t("tutorial.title")))),
                n.push("</a>\n</div>"),
                n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='modal-dialog'>\n<div class='modal-content'>\n<div class='clearfix modal-body'>\n<ul class='video-menu' style='display: none;'>"),
                r = this.videos,
                n = 0,
                s = r.length; n < s; n++)
                    o = r[n],
                    i.push("<li class='video-link' data-video-key='" + t(e(o)) + "'>" + t(e(this.t("tutorial.videos." + o + ".title"))) + "</li>");
                return i.push("</ul>\n<div id='tutorial-player'></div>\n<a class='dialog-close-button' href='#'></a>\n</div>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t;
                return e = this.__cleanValue,
                t = [],
                t.push("<h2>" + e(this.safe_t("user.info.greeting", {
                    username: this.h.contentTag("strong", this.userName)
                })) + "</h2>"),
                t.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                o = W.Config.week_days_order,
                s = 0,
                r = o.length; s < r; s++)
                    n = o[s],
                    i.push("<label class='checkbox-inline'>\n<input type='checkbox' name='days' value='" + t(e(n)) + "' checked='" + t(e(this.cb(n))) + "'>"),
                    i.push("" + t(e(this.t("date.abbr_day_names")[n]))),
                    i.push("</label>");
                return i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<input class='alias-name form-control' type='text' value='" + t(e(this.name)) + "'>\n<a class='delete'>\n<i class='fa fa-times-circle'></i>\n</a>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<ul class='list list-unstyled'></ul>\n<a class='" + ["add", "" + t(e(this.hideAddButton ? "hidden" : void 0))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "' href='#'>"),
                i.push("" + t(e(this.t("edit.landmark.aliases.add")))),
                i.push("</a>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='category' data-category='" + t(e(this.category)) + "'>"),
                i.push("" + t(e(this.t("venues.categories." + this.category)))),
                this.hideClose || i.push("<a class='remove-choice select2-search-choice-close' href='#'>\n<i class='fa fa-remove'></i>\n</a>"),
                i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<input class='uuid' value='" + t(e(this.uuid)) + "' type='hidden' placeholder='Search for a place'>\n<a class='delete'>\n<i class='fa fa-times-circle'></i>\n</a>\n<div class='placeId'>" + t(e(this.uuid)) + "</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<ul class='list list-unstyled'></ul>\n<a class='add' href='#'>"),
                i.push("" + t(e(this.t("edit.landmark.add_external_provider")))),
                i.push("</a>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r;
                for (e = this.__cleanValue,
                t = [],
                t.push("<ul class='clearfix list-unstyled'>"),
                r = this.view.getSuggestedCategories(),
                n = 0,
                s = r.length; n < s; n++)
                    i = r[n],
                    this.categoryMap[i] || (t.push("<li class='select2-search-choice suggested-category'>"),
                    t.push("" + e(this.renderPartial("templates/venue/category-tag", {
                        category: i,
                        hideClose: !0
                    }))),
                    t.push("</li>"));
                return t.push("</ul>"),
                t.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<input name='categories' data-placeholder='" + t(e(this.t("edit.landmark.select_categories"))) + "' type='hidden'>\n<div class='suggested-categories'>"),
                i.push("" + e(this.renderPartial("templates/venue/suggested-categories", this))),
                i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o, a, l, u, c, d;
                if (t = this.__htmlEscape,
                e = this.__cleanValue,
                n = function(e) {
                    return e.replace(/\n/g, "&#x000A;")
                }
                ,
                i = [],
                i.push("<form class='attributes-form side-panel-section'>"),
                !this.landmark.attributes.residential) {
                    for (i.push("<div class='form-group'>\n<label class='control-label control-label-inline'>" + t(e(this.t("edit.landmark.fields.categories"))) + "</label>\n<i class='categories-tooltip waze-tooltip' data-toggle='tooltip'></i>"),
                    this.canEditCategories ? i.push("<div class='categories controls'></div>") : (i.push("<div class='category'>"),
                    i.push("" + t(e(I18n.t("venues.categories." + this.landmark.attributes.categories[0])))),
                    i.push("</div>")),
                    i.push("</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.fields.name"))) + "</label>\n<div class='controls'>\n<input class='form-control' autocomplete='off' maxlength='100' name='name' type='text' value='" + t(e(this.landmark.attributes.name)) + "'>\n<div class='aliases-view'></div>\n</div>\n</div>\n<div class='" + ["form-group", "brand", "" + t(e(this.brands.length ? void 0 : "not-shown"))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "'>"),
                    this.landmark.isParkingLot() ? i.push("<label class='control-label'>" + t(e(this.t("edit.landmark.parking.operator"))) + "</label>") : i.push("<label class='control-label'>" + t(e(this.t("edit.landmark.fields.brand"))) + "</label>"),
                    i.push("<div class='controls'>\n<select class='form-control' name='brand'>"),
                    c = this.brands,
                    r = 0,
                    a = c.length; r < a; r++)
                        s = c[r],
                        i.push("" + e(this.h.option(s, s, this.landmark.attributes.brand, !0)));
                    if (i.push("</select>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.fields.description"))) + "</label>\n<div class='controls'>\n<textarea class='form-control' name='description' maxlength='" + t(e(300)) + "'>" + n(t(e(this.landmark.attributes.description))) + "</textarea>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.fields.lock"))) + "</label>\n<div class='controls'>\n<select class='form-control' data-type='numeric' name='lockRank'>"),
                    this.landmark.arePropertiesEditable())
                        for (d = this.lockRankRange,
                        o = 0,
                        l = d.length; o < l; o++)
                            u = d[o],
                            i.push("" + e(this.h.option(this.h.formatRank(u), u, this.landmark.attributes.lockRank)));
                    else
                        i.push("<option>" + t(e(this.h.formatRank(this.landmark.attributes.lockRank))) + "</option>");
                    i.push("</select>\n</div>\n</div>"),
                    this.canEditType && (i.push("<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.fields.type"))) + "</label>\n<div class='controls'>"),
                    this.landmark.isParkingLot() ? (i.push("<div class='btn btn-block btn-default convert-to-polygon'>"),
                    i.push("" + t(e(this.t("edit.landmark.type.convert_to_area")))),
                    i.push("</div>")) : (i.push("<div class='btn-group' data-toggle='buttons'>\n<label class='" + ["btn", "btn-default", "" + t(e(this.landmark.isPoint() ? "active" : void 0))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "' disabled='" + t(e(!this.landmark.arePropertiesEditable())) + "'>\n<input type='radio' name='isPoint' checked='" + t(e(this.landmark.isPoint())) + "' value='true'>"),
                    i.push("" + t(e(this.t("edit.landmark.type.point")))),
                    i.push("</label>\n<label class='" + ["btn", "btn-default", "" + t(e(this.landmark.isPoint() ? void 0 : "active"))].sort().join(" ").replace(/^\s+|\s+$/g, "") + "' disabled='" + t(e(!this.landmark.arePropertiesEditable())) + "'>\n<input type='radio' name='isPoint' checked='" + t(e(!this.landmark.isPoint())) + "' value='false'>"),
                    i.push("" + t(e(this.t("edit.landmark.type.area")))),
                    i.push("</label>\n</div>")),
                    i.push("</div>\n</div>")),
                    this.showExternalProviderView && i.push("<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.external_providers"))) + "</label>\n<div class='controls'>\n<div class='external-providers-view'></div>\n</div>\n</div>")
                }
                return this.landmark.isParkingLot() || (i.push("<div class='form-group'>\n<div class='controls'>"),
                this.landmark.attributes.residential ? this.landmark.canConvertToPublic() && (i.push("<button class='btn-link toggle-residential' disabled='" + t(e(!this.landmark.arePropertiesEditable())) + "' type='button'>"),
                i.push("" + t(e(this.t("edit.landmark.residential.convert_from")))),
                i.push("</button>")) : (i.push("<button class='btn-link toggle-residential' disabled='" + t(e(!this.landmark.arePropertiesEditable())) + "' type='button'>"),
                i.push("" + t(e(this.t("edit.landmark.residential.convert_to")))),
                i.push("</button>")),
                i.push("</div>\n</div>")),
                i.push("</form>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i;
                return t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='sub-section-header'>" + t(e(this.t("edit.landmark.fields.contact"))) + "</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.fields.url"))) + "</label>\n<div class='controls'>\n<input class='form-control' autocomplete='off' maxlength='100' name='url' type='text' value='" + t(e(this.landmark.attributes.url)) + "'>\n</div>\n</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.fields.phone"))) + "</label>\n<div class='controls'>\n<input class='form-control' autocomplete='off' maxlength='100' name='phone' type='tel' value='" + t(e(this.landmark.attributes.phone)) + "'>\n</div>\n</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t, i) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, n, s, r, o, a, l, u, c, d;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                n = [],
                s = i(50),
                n.push("<form class='attributes-form'>\n<fieldset>\n<div class='side-panel-section'>\n<div class='opening-hours'></div>\n<div class='controls-container form-group'>\n<input id='can-exit-checkbox' type='checkbox' name='canExitWhileClosed'>\n<label for='can-exit-checkbox'>"),
                n.push("" + e(this.t("edit.landmark.parking.fields.canExitWhileClosed"))),
                n.push("</label>\n</div>\n</div>\n<div class='side-panel-section'>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.parking.fields.costType"))) + "</label>\n<select class='form-control' name='costType'></select>\n</div>\n<div class='controls-container form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.parking.fields.paymentType"))) + "</label>"),
                u = s.PAYMENT_TYPE,
                r = 0,
                a = u.length; r < a; r++)
                    d = u[r],
                    n.push("<div class='payment-checkbox'>\n<input id='payment-checkbox-" + d + "' type='checkbox' name='paymentType' value='" + t(e(d)) + "'>\n<label for='payment-checkbox-" + t(e(d)) + "'>"),
                    n.push("" + e(this.t("edit.landmark.parking.types.paymentType." + d))),
                    n.push("</label>\n</div>");
                for (n.push("</div>\n<div class='form-group'>"),
                n.push("" + e(this.renderPartial("templates/venue/venue-edit-more-info-services", this))),
                n.push("</div>\n<div class='form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.parking.fields.estimatedNumberOfSpots"))) + "</label>\n<select class='form-control' name='estimatedNumberOfSpots'></select>\n</div>\n<div class='controls-container form-group'>\n<label class='control-label'>" + t(e(this.t("edit.landmark.parking.fields.lotType"))) + "</label>"),
                c = s.LOT_TYPE,
                o = 0,
                l = c.length; o < l; o++)
                    d = c[o],
                    n.push("<div class='lot-checkbox'>\n<input id='lot-checkbox-" + d + "' type='checkbox' name='lotType' value='" + t(e(d)) + "'>\n<label for='lot-checkbox-" + t(e(d)) + "'>"),
                    n.push("" + e(this.t("edit.landmark.parking.types.lotType." + d))),
                    n.push("</label>\n</div>");
                return n.push("</div>\n</div>\n<div class='side-panel-section'>"),
                n.push("" + e(this.renderPartial("templates/venue/venue-edit-more-info-contact", this))),
                n.push("</div>\n</fieldset>\n</form>"),
                n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, i, n, s, r, o;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                i = [],
                i.push("<div class='sub-section-header'>" + t(e(this.t("edit.landmark.fields.services"))) + "</div>\n<div class='controls-container form-group'>"),
                r = this.serviceTypes,
                n = 0,
                s = r.length; n < s; n++)
                    o = r[n],
                    i.push("<div class='service-checkbox'>\n<input id='service-checkbox-" + o + "' type='checkbox' name='services' data-multiple='" + t(e(!0)) + "' value='" + t(e(o)) + "' checked='" + t(e(null != this.serviceSet[o])) + "'>\n<label for='service-checkbox-" + t(e(o)) + "'>" + t(e(this.t("venues.services." + o))) + "</label>\n</div>");
                return i.push("</div>"),
                i.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t;
                return e = this.__cleanValue,
                t = [],
                t.push("<form class='attributes-form'>\n<div class='side-panel-section'>"),
                t.push("" + e(this.renderPartial("templates/venue/venue-edit-more-info-contact", this))),
                t.push("</div>\n<div class='side-panel-section'>"),
                t.push("" + e(this.renderPartial("templates/venue/venue-edit-more-info-services", this))),
                t.push("</div>"),
                this.landmark.attributes.residential || t.push("<div class='opening-hours side-panel-section'></div>"),
                t.push("</form>"),
                t.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, function(e, t, i) {
    e.exports = function() {
        return function(e) {
            return function() {
                var e, t, n, s, r, o, a, l;
                for (t = this.__htmlEscape,
                e = this.__cleanValue,
                n = [],
                n.push("<div class='landmark'>\n<div class='selection'>\n<span class='text'>" + t(e(this.t("edit.landmark.title"))) + "</span>\n</div>"),
                this.showUnapprovedAlert ? (n.push("<div class='alert alert-danger header-alert pending-changes-alert'>"),
                n.push("" + t(e(this.t("edit.landmark.update_requests.unapproved")))),
                n.push("</div>")) : this.showPendingChangesAlert && (n.push("<div class='alert alert-danger header-alert pending-changes-alert'>"),
                n.push("" + t(e(this.t("edit.landmark.update_requests.pending")))),
                n.push("</div>")),
                this.showAdLockedAlert ? (n.push("<div class='alert alert-danger header-alert'>"),
                n.push("" + t(e(this.t("edit.landmark.update_requests.ad_locked")))),
                n.push("</div>")) : this.showRequiresModerationAlert && (n.push("<div class='alert alert-danger header-alert'>"),
                n.push("" + t(e(this.t("edit.landmark.update_requests.moderation")))),
                n.push("</div>")),
                n.push("<ul class='nav nav-tabs'>\n<li class='active'>\n<a data-toggle='tab' href='#landmark-edit-general'>" + t(e(this.t("edit.landmark.tabs.general"))) + "</a>\n</li>"),
                this.landmark.attributes.residential || n.push("<li>\n<a data-toggle='tab' href='#landmark-edit-more-info'>" + t(e(this.t("edit.landmark.tabs.more_info"))) + "</a>\n</li>"),
                n.push("<li>\n<a data-toggle='tab' href='#landmark-edit-photos'>"),
                n.push("" + t(e(this.t("edit.landmark.tabs.photos") + " (" + this.imageCount + ")"))),
                n.push("</a>\n</li>\n</ul>\n<div class='tab-content'>\n<div class='active tab-pane' id='landmark-edit-general'>"),
                n.push("" + e(this.renderPartial("templates/venue/venue-edit-general", this))),
                n.push("<div class='address-edit side-panel-section'></div>\n<ul class='additional-attributes list-unstyled side-panel-section'>"),
                n.push("" + e(this.renderPartial("templates/add_update_details", this.landmark.attributes))),
                n.push("<li>" + t(e(this.t("edit.id", {
                    num: this.landmark.getID()
                }))) + "</li>\n</ul>\n</div>"),
                this.landmark.attributes.residential || n.push("<div class='more-info tab-pane' id='landmark-edit-more-info'></div>"),
                n.push("<div class='tab-pane' id='landmark-edit-photos'>\n<div class='image-view'>"),
                this.hasImages || n.push("<em>" + t(e(this.t("edit.landmark.no_photos"))) + "</em>"),
                s = i(42).SIZE,
                l = this.images,
                r = 0,
                a = l.length; r < a; r++)
                    o = l[r],
                    n.push("<div class='image-preview-container' data-id='" + t(e(o.id)) + "'>\n<img class='image-preview' src='" + t(e(o.getUrl(s.WEB))) + "'>\n<button class='btn fa fa-remove image-delete-button'></button>\n<button class='btn fa fa-search image-enlarge-button'></button>\n</div>");
                return n.push("</div>\n</div>\n</div>\n</div>"),
                n.join("\n").replace(/\s([\w-]+)='true'/gm, " $1").replace(/\s([\w-]+)='false'/gm, "").replace(/\s(?:id|class)=(['"])(\1)/gm, "")
            }
            .call(e)
        }
    }
    .call(this)
}
, , function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = i(469)
      , r = n(s)
      , o = i(78)
      , a = n(o)
      , l = i(79)
      , u = n(l)
      , c = i(8)
      , d = 1.7
      , h = function() {
        function e(t) {
            (0,
            a.default)(this, e),
            this.map = t
        }
        return (0,
        u.default)(e, [{
            key: "_toUnprojectedBBOX",
            value: function(e) {
                return c.unproject(e.clone()).toBBOX()
            }
        }, {
            key: "_newRequestParams",
            value: function() {
                return {
                    language: I18n.locale,
                    bbox: this._toUnprojectedBBOX(this.currentDataBounds)
                }
            }
        }, {
            key: "getFeatures",
            value: function(e) {
                var t = (0,
                r.default)(this._newRequestParams(), e);
                return $.get(W.Config.paths.features, t)
            }
        }, {
            key: "postFeatures",
            value: function(e, t, i) {
                var n = (0,
                r.default)(this._newRequestParams(), {
                    bbox: this._toUnprojectedBBOX(t),
                    ignoreWarnings: i
                });
                return $.ajax({
                    method: "post",
                    url: W.Config.paths.features + "?" + $.param(n),
                    data: e,
                    dataType: "json",
                    contentType: "application/json"
                })
            }
        }, {
            key: "currentDataBounds",
            get: function() {
                return this.map.getBoundsWithRatio(d)
            }
        }]),
        e
    }();
    t.default = h,
    e.exports = t.default
}
, function(e, t, i) {
    "use strict";
    var n, s = i(56), r = i(1050), o = i(518), a = i(544), l = i(682), u = i(697), c = i(625), d = i(624), h = i(700), p = i(453), g = i(13);
    n = OpenLayers.Class(OL.Map, s, {
        DefaultPanInPixel: 20,
        navigationControl: null ,
        zoomBar: null ,
        mapState: null ,
        popup: null ,
        lightbox: null ,
        popupOverlay: null ,
        navigationEnabled: !0,
        $el: null ,
        $map: null ,
        initialize: function(e) {
            var t = this;
            e = e || {},
            $("#editor-container").html(g.getHTML("templates/map")),
            this.app = e.app,
            this.$el = $("#map"),
            this.$modalContainer = this.$el.find("#map-modal-container"),
            this.$map = $("#WazeMap"),
            this.popupOverlay = $("#popup-overlay"),
            this.inputOverlay = $("#input-overlay"),
            this.resize(),
            this.navigationControl = new OpenLayers.Control.Navigation,
            this.zoomBar = new r({
                displayClass: "olControlPanZoomBar"
            }),
            this.footerControl = new OpenLayers.Control({
                displayClass: "WazeMapFooter"
            }),
            this.footerMessages = new OpenLayers.Control({
                displayClass: "footer-messages"
            }),
            e.controls = [this.navigationControl, this.zoomBar, this.footerControl, this.footerMessages],
            e.projection = new OpenLayers.Projection(W.Config.map.projection.local),
            e.displayProjection = new OpenLayers.Projection(W.Config.map.projection.remote),
            e.theme = null ,
            OpenLayers.Map.prototype.initialize.apply(this, ["WazeMap", e]),
            this.panelRegion = new h({
                map: this
            }),
            $(this.viewPortDiv).on("mouseup", function(e) {
                var i = "INPUT" !== e.target.tagName;
                i && t.focus()
            }),
            $(window).on("resize", $.proxy(this.resize, this)),
            this.initializeLayers()
        },
        initMapState: function(e, t) {
            this.mapState = new a(this,e,t),
            new c({
                app: this.app,
                location: W.location,
                repositoryFilters: W.model.repositoryFilters,
                mapState: this.mapState,
                el: $("<div/>").addClass("WazeControlPermalink").appendTo(this.footerControl.div)
            }).render(),
            this._addFooterControls()
        },
        registerAccelerators: function(e) {
            e.events.on({
                panUp: this.panUp,
                panRight: this.panRight,
                panDown: this.panDown,
                panLeft: this.panLeft,
                zoomIn: this.zoomIn,
                zoomOut: this.zoomOut,
                scope: this
            }),
            e.registerLayersActions(this.layers)
        },
        _addFooterControls: function() {
            this.addFooterControl({
                displayClass: "olControlAttribution",
                control: new OpenLayers.Control.Attribution
            }),
            new d({
                map: this,
                el: $("<div/>").addClass("WazeControlMousePosition").appendTo(this.footerControl.div)
            }).render(),
            this.addFooterControl({
                displayClass: "olControlScaleLine",
                control: new OpenLayers.Control.ScaleLine
            }),
            this.addControl(new o({
                div: $("<div/>").appendTo(this.footerMessages.div)
            })),
            new l({
                mapView: this,
                model: W.model,
                $el: $("<div/>").appendTo(this.footerMessages.div)
            })
        },
        addFooterControl: function(e) {
            var t = $("<div>").addClass(e.displayClass);
            t.appendTo(this.footerControl.div),
            e.control.div = t[0],
            this.addControl(e.control)
        },
        focus: function() {
            $(this.div).focus()
        },
        panLeft: function() {
            this.navigationEnabled && this.pan(-this.DefaultPanInPixel, 0, {
                animate: !1
            })
        },
        panRight: function() {
            this.navigationEnabled && this.pan(this.DefaultPanInPixel, 0, {
                animate: !1
            })
        },
        panUp: function() {
            this.navigationEnabled && this.pan(0, -this.DefaultPanInPixel, {
                animate: !1
            })
        },
        panDown: function() {
            this.navigationEnabled && this.pan(0, this.DefaultPanInPixel, {
                animate: !1
            })
        },
        zoomIn: function() {
            this.navigationEnabled && OL.Map.prototype.zoomIn.apply(this, arguments)
        },
        zoomOut: function() {
            this.navigationEnabled && OL.Map.prototype.zoomOut.apply(this, arguments)
        },
        showOverlay: function() {
            $("#map-overlay").fadeIn("fast")
        },
        hideOverlay: function() {
            $("#map-overlay").fadeOut("fast")
        },
        setEditingMediator: function(e) {
            W.editingMediator.on("change:editingEnabled", this._onEditingEnabledChanged, this),
            W.editingMediator.on("change:navigation", this._onNavigationChanged, this)
        },
        setSnapshotManager: function(e) {
            this.snapshotManager = e,
            this.snapshotManager.on("change:state", this._refreshRoadLayers, this),
            this._createSnapshotMessage()
        },
        _createSnapshotMessage: function() {
            var e = $(this.div).find(".snapshot-message").css({
                zIndex: this.Z_INDEX_BASE.Control
            })
              , t = new u({
                el: e,
                snapshotManager: this.snapshotManager
            });
            t.render()
        },
        _onEditingEnabledChanged: function() {
            var e = W.editingMediator.get("editingEnabled");
            this.$el.toggleClass("editing-disabled", !e),
            e || this.panelRegion.empty()
        },
        _onNavigationChanged: function() {
            var e = W.editingMediator.get("navigation");
            e ? (this.zoomBar.show(),
            this.popupOverlay.hide(),
            this.navigationEnabled = !0) : (this.zoomBar.hide(),
            this.popupOverlay.show(),
            this.navigationEnabled = !1)
        },
        showPopup: function(e) {
            var t = this;
            this.popup !== e && (this.popup && this.popup.close(),
            this.popup = e,
            this.popupOverlay.show(),
            this.removeLightbox(),
            e.olEvents.register("closed", this, function() {
                this.removePopup()
            }),
            e.render(this.$modalContainer).then(function() {
                t.positionPopup()
            }))
        },
        positionPopup: function() {
            var e = this.$modalContainer.find(".map-modal");
            e.css("left", (this.$map.outerWidth(!0) - e.outerWidth()) / 2)
        },
        removePopup: function() {
            this.popup = null ,
            this.popupOverlay.hide(),
            this.$el.find(".map-modal").removeClass("show").addClass("hide")
        },
        showLightbox: function(e) {
            this.lightbox = e,
            this.$el.addClass("lightboxShown"),
            e.show(),
            e.olEvents.register("closed", this, this.onLightboxClosed)
        },
        onLightboxClosed: function() {
            this.removeLightbox(!0)
        },
        removeLightbox: function(e) {
            null === this.lightbox || e || (this.lightbox.olEvents.unregister("closed", this, this.onLightboxClosed),
            this.lightbox.close()),
            this.lightbox = null ,
            this.$el.removeClass("lightboxShown")
        },
        toggleSVMode: function(e) {
            this.$el.toggleClass("street-view-mode", e),
            this.updateSize()
        },
        resize: function() {
            var e = parseInt(this.$map.css("max-height"), 10)
              , t = parseInt(this.$map.css("min-height"), 10)
              , i = $(window).height() - this.$map.offset().top;
            i > e ? i = e : i < t && (i = t),
            this.$el.find(".view-area").css("height", i),
            this.positionPopup(),
            null !== this.div && (this.updateSize(),
            this.events.triggerEvent("resize", {
                height: i
            }))
        },
        getHeight: function() {
            return this.$map.height()
        },
        setLayerZIndex: function(e, t) {
            var i = !!e.markers;
            e.setZIndex(this.Z_INDEX_BASE[e.isBaseLayer ? "BaseLayer" : i ? "MarkerOverlay" : "Overlay"] + 5 * t)
        },
        getLayerVisibility: function(e) {
            var t = this.getLayersBy("uniqueName", e).first();
            return t ? t.getVisibility() : null
        },
        setLayerVisibility: function(e, t) {
            var i = this.getLayersBy("uniqueName", e).first();
            i && (i.setVisibility(t),
            i.repo && (i.toggleRepo && i.repo.forEach(function(e) {
                e.setActive(t)
            }),
            i.toggleFilter && i.repo.forEach(function(e) {
                e[i.toggleFilter] = t
            })),
            i.parentLayer && t === !0 && i.parentLayer.setVisibility(!0))
        },
        getPannable: function() {
            var e = this;
            return {
                panTo: function(t, i, n) {
                    return e.moveTo(t, i, n)
                },
                getZoom: function() {
                    return e.getZoom()
                }
            }
        },
        getDrawingContext: function(e) {
            return new p(this,e)
        },
        getBoundsWithRatio: function(e) {
            var t = this.calculateBounds();
            if (null === t)
                return null ;
            var i = t.getCenterLonLat()
              , n = t.getWidth() * e
              , s = t.getHeight() * e;
            return new OpenLayers.Bounds(i.lon - n / 2,i.lat - s / 2,i.lon + n / 2,i.lat + s / 2)
        },
        CLASS_NAME: "Waze.Map"
    }),
    OL.Map.prototype.Z_INDEX_BASE.MarkerOverlay = 850,
    e.exports = n
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var s, r = i(468), o = n(r), a = i(1048), l = i(1044), u = i(1042), c = i(1039), d = i(1045), h = i(91), p = i(515), g = i(516), m = i(73), f = i(2), v = i(17), y = OpenLayers.Class({
        selectionManager: null ,
        modifyControl: null ,
        selectControl: null ,
        editors: null ,
        activeEditor: null ,
        TYPE_TO_EDITOR_CLASS: (s = {},
        (0,
        o.default)(s, f.VENUE, g),
        (0,
        o.default)(s, f.SPEED_CAMERA, p),
        s),
        initialize: function(e, t, i, n) {
            var s = this;
            this.selectionManager = e,
            this.editingMediator = t,
            this.map = i,
            this.dataModel = n,
            this._typeToEditorClass = _.clone(this.TYPE_TO_EDITOR_CLASS),
            v.getLayers().forEach(function(e) {
                var t = e.options;
                t.enableGeometryEditing && (s._typeToEditorClass[t.objectType] = m)
            }),
            this.selectionManager.events.register("selectionchanged", this, this.onSelectionChanged),
            this.editingMediator.on("change:editingEnabled", this._onEditingEnabledChanged, this),
            this.editingMediator.on("change:advancedTools", this._onAdvancedToolsChanged, this),
            this._initControls()
        },
        destroy: function() {
            this.selectionManager.events.unregister("selectionchanged", this, this.onSelectionChanged),
            this.editingMediator.un("change:editingEnabled", this._onEditingEnabledChanged, this),
            this.editingMediator.un("change:advancedTools", this._onAdvancedToolsChanged, this)
        },
        _createGeometryEditor: function(e, t) {
            var i = e[0].model.type;
            if (i === f.SEGMENT || i === f.NODE)
                return this._createSegmentGeometryEditor(e, t);
            var n = this._typeToEditorClass[i];
            if (!n)
                return null ;
            var s = this.dataModel.getRepository(i);
            return new n(e[0],{
                virtualStyle: h.virtualVertices,
                repo: s,
                model: this.dataModel,
                map: this.map
            })
        },
        _createSegmentGeometryEditor: function(e, t) {
            return new l(e,t,this.dataModel,this.map.sketchLayer,this.map.segmentLayer,this.map.nodeLayer,{
                mode: OpenLayers.Control.ModifyFeature.RESHAPE,
                virtualStyle: h.virtualVertices,
                standalone: !0,
                selectControl: this.selectControl,
                map: this.map
            })
        },
        _onAdvancedToolsChanged: function() {
            var e = this.editingMediator.get("advancedTools");
            e ? this.selectControl.enableBoxSelection() : this.selectControl.disableBoxSelection()
        },
        _onEditingEnabledChanged: function() {
            var e = this.editingMediator.get("editingEnabled");
            e ? this.selectControl.activate() : this.selectControl.deactivate()
        },
        _initControls: function() {
            var e = _(this.map.layers).filter(function(e) {
                return e.selectable
            });
            this.selectControl = new a(e,{
                clickout: !0,
                toggle: !0,
                deselectKey: OpenLayers.Event.KEY_ESC,
                multiple: !1,
                multipleKeys: ["metaKey", "ctrlKey"],
                requireDeselect: W.prefs.get("requireFeatureDeselect"),
                boxMask: OpenLayers.Handler.MOD_CTRL | OpenLayers.Handler.MOD_SHIFT,
                box: !0,
                boxSelectionLayers: [this.map.segmentLayer]
            }),
            W.prefs.on("change:requireFeatureDeselect", function(e, t) {
                this.selectControl.requireDeselect = t
            }, this),
            this.map.addControl(this.selectControl),
            this.selectionManager.setSelectControl(this.selectControl),
            this.map.addControl(this.selectControl),
            this.editNodeConsControl = new u,
            this.bridgeControl = new c,
            this.newNodeControl = new d,
            this.map.addControls([this.editNodeConsControl, this.bridgeControl, this.newNodeControl]),
            this.editNodeConsControl.activate(),
            this.bridgeControl.activate(),
            this.newNodeControl.activate()
        },
        onSelectionChanged: function(e) {
            var t = e.selected;
            this.activeEditor && (this.activeEditor.destroy(),
            this.activeEditor = null ),
            t.length > 0 && (this.activeEditor = this._createGeometryEditor(t, e.reversedSegments)),
            this.selectControl.setSelectionEmpty(0 === t.length)
        }
    });
    e.exports = y
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var s, r, o = i(107), a = n(o), l = i(77), u = n(l), c = (i(6),
    i(39)), d = i(1069), h = i(1070), p = i(1065), g = i(555), m = i(1036), f = i(2), v = i(27), y = i(292), b = i(293), _ = i(71), w = i(554), S = i(17);
    r = OpenLayers.Class({
        events: null ,
        actionManager: null ,
        repositoryFilters: null ,
        segments: null ,
        nodes: null ,
        users: null ,
        streets: null ,
        cities: null ,
        states: null ,
        countries: null ,
        problems: null ,
        mapUpdateRequests: null ,
        venues: null ,
        junctions: null ,
        bigJunctions: null ,
        crossroads: null ,
        repos: null ,
        distanceCache: null ,
        isImperial: !1,
        isLeftHand: !1,
        lastTransactionID: null ,
        addRepository: function(e, t, i, n) {
            if (this.repos[e])
                throw "Cannot add repository " + e + " to DataModel, the provided repository name already exists.";
            n || (n = c),
            i = i || {},
            i.model = this,
            i.name = e;
            var s = new n(t,i);
            this.repos[e] = this[e] = this.reposByObjectType[t] = s
        },
        initialize: function(e) {
            var t = this
              , i = new OpenLayers.Projection("EPSG:900913");
            this.repositoryFilters = w.restore(),
            OpenLayers.Util.extend(this, e),
            this.events = new OpenLayers.Events(this),
            this.actionManager = new m(this),
            this.distanceCache = new s(new OpenLayers.Projection("EPSG:900913")),
            this.repos = {},
            this.reposByObjectType = {},
            this.addRepository("segments", f.SEGMENT, {}, h),
            this.addRepository("nodes", f.NODE, {
                onDemand: !1
            }),
            this.addRepository("users", f.USER, {
                onDemand: !1,
                useVersions: !1
            }),
            this.addRepository("streets", f.STREET, {
                onDemand: !1,
                storePersistentSeparately: !0
            }),
            this.addRepository("countries", f.COUNTRY, {
                onDemand: !1,
                storePersistentSeparately: !0
            }),
            this.addRepository("states", f.STATE, {
                onDemand: !1,
                storePersistentSeparately: !0
            }),
            this.addRepository("junctions", f.JUNCTION, {
                onDemand: !1
            }),
            this.addRepository("bigJunctions", f.BIG_JUNCTION, {
                active: W.Config.big_junctions.shownByDefault && W.Config.big_junctions.enable,
                minZoom: W.Config.big_junctions.minDisplayZoom
            }),
            this.addRepository("problems", f.MAP_PROBLEM, {
                filterName: "problemFilter",
                FILTERS: {
                    CLOSED: {
                        mask: 1,
                        callback: function(e) {
                            return !e.attributes.open
                        }
                    }
                }
            }),
            this.addRepository("mapUpdateRequests", f.UPDATE_REQUEST, {
                filterName: "mapUpdateRequestFilter",
                FILTERS: {
                    CLOSED: {
                        mask: 1,
                        callback: function(e) {
                            return !e.attributes.open
                        }
                    }
                }
            }),
            this.addRepository("roadClosures", f.ROAD_CLOSURE, {
                minZoom: Waze.Config.closures.minDisplayZoom,
                active: Waze.Config.closures.shownByDefault
            }),
            this.addRepository("venues", f.VENUE, {
                active: Waze.Config.venues.shownByDefault,
                filterName: "venueFilter",
                FILTERS: {
                    RESIDENTIAL: {
                        mask: 1,
                        callback: function(e) {
                            return e.attributes.residential
                        }
                    },
                    PARKING: {
                        mask: 2,
                        callback: function(e) {
                            return e.isParkingLot()
                        }
                    }
                }
            }, p),
            this.addRepository("cameras", f.SPEED_CAMERA, {
                minZoom: Waze.Config.cameras.minDisplayZoom,
                active: Waze.Config.cameras.shownByDefault
            }),
            this.addRepository("userAreas", f.USER_AREA, {
                minZoom: Waze.Config.editable_areas.minDisplayZoom
            }),
            this.addRepository("problemDetails", f.PROBLEM_DETAILS, {
                url: Waze.Config.paths.problemDetails,
                localProjection: i,
                onDemand: !1
            }, d),
            this.addRepository("houseNumbers", f.HOUSE_NUMBER, {
                url: Waze.Config.paths.houseNumbers,
                localProjection: i,
                onDemand: !1
            }, d),
            this.addRepository("updateRequestSessions", f.UPDATE_REQUEST_SESSION, {
                url: Waze.Config.paths.updateRequestSessions,
                localProjection: i,
                onDemand: !1
            }, d),
            this.addRepository("archives", f.ARCHIVE_SESSION, {
                url: Waze.Config.paths.archive,
                onDemand: !1
            }, d),
            this.addRepository("archiveSessions", f.ARCHIVE_SESSION_DATA, {
                url: Waze.Config.paths.archiveSessions,
                onDemand: !1,
                localProjection: i
            }, d),
            this.addRepository("managedAreas", "managedArea"),
            this.addRepository("majorTrafficEvents", f.MTE),
            this.addRepository("restrictedAreas", f.RESTRICTED_AREA, {}, g),
            S.getRepositories().forEach(function(e) {
                t.addRepository(e.repositoryName, e.featureType, e.repositoryConfig, e.repositoryClass)
            }),
            W.prefs.on("change:isImperial", function(e, t, i) {
                null !== t && (this.isImperial = t)
            }, this),
            this.isImperial = W.prefs.get("isImperial")
        },
        clear: function(e) {
            for (var t in this)
                this[t]instanceof c && this[t].clear(e)
        },
        getRepository: function(e) {
            return e && this.reposByObjectType[e] || null
        },
        mergeObjects: function(e, t, i) {
            this.events.triggerEvent("mergestart");
            var n, s = t.roadClosures, r = t.segments;
            delete t.segments,
            delete t.roadClosures,
            r || (i = !0),
            Object.forEach(t, function(n, s) {
                var r = this[n];
                r && (i && !r.onDemand || r.clear({
                    keepUnsaved: !0,
                    keepSelected: !0
                }),
                r.mergeObjects(s, null , e, this.scale, t))
            }, this),
            n = this.segments,
            r && (n.clear({
                keepUnsaved: !0,
                keepSelected: !0
            }),
            n.mergeObjects(r, null , e, this.scale, t)),
            n = this.roadClosures,
            s && (n.clear({
                keepUnsaved: !0,
                keepSelected: !0
            }),
            n.mergeObjects(s, null , e, this.scale, t)),
            this.setMeasurementSystem(),
            this.setDrivingDirection(),
            this.setTopCountry(t),
            this.events.triggerEvent("mergeend")
        },
        putPersistent: function(e) {
            var t = this;
            (0,
            u.default)(e).forEach(function(i) {
                var n = t[i];
                void 0 !== n && e[i].objects.forEach(function(e) {
                    e.setPersistent(!0),
                    n.put(e)
                })
            })
        },
        setTopCountry: function(e) {
            var t = e.countries
              , i = e.states;
            t && t.mainObjectID ? (this.countries.top = this.countries.objects[t.mainObjectID],
            i && (this.states.top = this.states.objects[i.mainObjectID])) : (this.countries.top = null ,
            this.states.top = null )
        },
        setMeasurementSystem: function() {
            var e = W.prefs.get("isImperial");
            if (null !== e)
                this.isImperial = e;
            else {
                var t = (0,
                a.default)(this.countries.objects)
                  , i = null ;
                t.isEmpty() || (i = t.first(),
                W.prefs.set("isImperial", 234 === i.id || 235 === i.id))
            }
        },
        setDrivingDirection: function() {
            var e = (0,
            a.default)(this.countries.objects);
            this.isLeftHand = !1,
            e.isEmpty() || (this.isLeftHand = !!e.first().leftHandTraffic)
        },
        deleteSegments: function(e) {
            if (1 === e.length)
                this.actionManager.add(new v(e[0]));
            else if (e.length > 1) {
                for (var t = [], i = 0, n = e.length; i < n; i++)
                    t.push(new v(e[i]));
                this.actionManager.add(new _(t))
            }
        },
        deleteObjects: function(e) {
            if (1 === e.length)
                this.actionManager.add(new y(e[0]));
            else if (e.length > 1) {
                for (var t = [], i = 0, n = e.length; i < n; i++)
                    t.push(new y(e[i]));
                this.actionManager.add(new _(t))
            }
        },
        deleteNodes: function(e) {
            if (1 === e.length)
                this.actionManager.add(new b(null ,e[0]));
            else if (e.length > 1) {
                for (var t = [], i = 0, n = e.length; i < n; i++)
                    t.push(new b(null ,e[i]));
                this.actionManager.add(new _(t))
            }
        },
        getModifiedObjects: function() {
            var e = {
                segments: this.segments.getModifiedObjects(),
                nodes: this.nodes.getModifiedObjects(),
                cities: this.cities.getModifiedObjects(),
                streets: this.streets.getModifiedObjects(),
                venues: this.venues.getModifiedObjects(),
                bigJunctions: this.bigJunctions.getModifiedObjects(),
                majorTrafficEvents: this.majorTrafficEvents.getModifiedObjects()
            };
            return this.mapComments && (e.mapComments = this.mapComments.getModifiedObjects()),
            e
        },
        hasModifiedObjects: function() {
            return (0,
            a.default)(this.repos).some(function(e) {
                return e.hasModifiedObjects()
            })
        },
        getChangesExtent: function() {
            var e = new OpenLayers.Bounds;
            return [this.segments, this.nodes].forEach(function(t) {
                (0,
                a.default)(t.getModifiedObjects()).forEach(function(t) {
                    t.forEach(function(t) {
                        e.extend(t.geometry.bounds)
                    })
                })
            }),
            e
        },
        hasStates: function() {
            var e = this.states.getObjectArray();
            return 1 !== e.length || !e.first().isDefault
        },
        setLastTransactionID: function(e) {
            this.lastTransactionID = e,
            this.events.triggerEvent("change:lastTransactionID", {
                id: this.lastTransactionID
            })
        },
        CLASS_NAME: "Waze.DataModel"
    }),
    s = OpenLayers.Class({
        precision: 1,
        distanceInMeters: 1,
        currentDistance: null ,
        currentLat: null ,
        projection: null ,
        inputProjection: null ,
        initialize: function(e, t) {
            OpenLayers.Util.extend(this, t),
            this.projection = new OpenLayers.Projection("EPSG:4326"),
            this.inputProjection = e
        },
        getValue: function(e, t) {
            var i = e.clone();
            return i.transform(this.inputProjection, this.projection),
            !t && this.isPointInCacheRange(i) || this.calculateLat(e, i),
            this.currentDistance
        },
        isPointInCacheRange: function(e) {
            return null !== this.currentDistance && Math.abs(e.y - this.currentLat) < this.precision
        },
        calculateLat: function(e, t) {
            var i, n;
            this.currentLat = t.y,
            i = OpenLayers.Util.destinationVincenty({
                lon: t.x,
                lat: t.y
            }, 90, this.distanceInMeters),
            n = new OpenLayers.Geometry.Point(i.lon,i.lat),
            n.transform(this.projection, this.inputProjection),
            this.currentDistance = Math.abs(n.x - e.x)
        },
        CLASS_NAME: "Waze.DataModel.DistanceCache"
    }),
    e.exports = r
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = i(78)
      , r = n(s)
      , o = i(79)
      , a = n(o)
      , l = i(23)
      , u = function() {
        function e(t) {
            var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            (0,
            r.default)(this, e),
            this._map = t,
            this._options = i,
            this._vectorLayer = null ,
            this._styleMap = null ,
            this._map.events.register("zoomend", this, this._onMapZoomed)
        }
        return (0,
        a.default)(e, [{
            key: "destroy",
            value: function() {
                null !== this._vectorLayer && (this._map.removeLayer(this._vectorLayer),
                this._vectorLayer.destroy()),
                this._map.events.unregister("zoomend", this, this._onMapZoomed)
            }
        }, {
            key: "addFeatures",
            value: function(e) {
                this._getVectorLayer().addFeatures(e)
            }
        }, {
            key: "removeAllFeatures",
            value: function() {
                null !== this._vectorLayer && this._vectorLayer.removeAllFeatures()
            }
        }, {
            key: "setStyleMap",
            value: function(e) {
                this._styleMap = e,
                null !== this._vectorLayer && (this._vectorLayer.styleMap = e)
            }
        }, {
            key: "_getVectorLayer",
            value: function() {
                return null === this._vectorLayer && this._initVectorLayer(),
                this._vectorLayer
            }
        }, {
            key: "_initVectorLayer",
            value: function() {
                var e = {
                    displayInLayerSwitcher: !1,
                    styleMap: this._styleMap
                };
                this._options.extendedMode && (e.renderers = [l]),
                this._vectorLayer = new OL.Layer.Vector(_.uniqueId("vector_drawing_context_"),e),
                this._map.addLayer(this._vectorLayer)
            }
        }, {
            key: "_onMapZoomed",
            value: function() {
                this.trigger("zoomend")
            }
        }]),
        e
    }();
    t.default = u,
    _.extend(u.prototype, Backbone.Events),
    e.exports = t.default
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = i(108)
      , r = n(s)
      , o = i(50);
    t.default = Backbone.Model.extend({
        defaults: function() {
            return {
                canExitWhileClosed: null ,
                numberOfSpots: null ,
                estimatedNumberOfSpots: null ,
                costType: o.UNKNOWN,
                lotType: [],
                paymentType: []
            }
        },
        initialize: function() {
            this.attributes.numberOfSpots && this.attributes.numberOfSpots > 0 && null === this.attributes.estimatedNumberOfSpots && (this.attributes.estimatedNumberOfSpots = this._getSpotsEstimateValue())
        },
        clone: function() {
            var e = $.extend(!0, {}, this.attributes);
            return new this.constructor(e)
        },
        _getSpotsEstimateValue: function() {
            var e = this.attributes.numberOfSpots
              , t = o.SPOTS_ESTIMATE
              , i = null ;
            if (null === e)
                return i;
            for (var n = 0; n < t.length; n++) {
                var s = t[n]
                  , a = (0,
                r.default)(s.range, 2)
                  , l = a[0]
                  , u = a[1];
                if (e >= l && e <= u) {
                    i = s.value;
                    break
                }
            }
            return i
        }
    }),
    e.exports = t.default
}
, function(e, t, i) {
    "use strict";
    var n = {
        issues: i(587),
        problems: i(530),
        problemDetails: i(531)
    }
      , s = {
        segments: i(20),
        nodes: i(299),
        bigJunctions: i(118),
        updateRequestSessions: i(1051),
        archives: i(1066),
        archiveSessions: i(1067),
        venues: i(40),
        users: i(28),
        cameras: i(300),
        mapUpdateRequests: i(1053),
        houseNumbers: i(522),
        roadClosures: i(130),
        junctions: i(548),
        managedAreas: i(523),
        userAreas: i(528),
        notifications: i(61),
        majorTrafficEvents: i(88),
        restrictedAreas: i(129)
    };
    e.exports = {
        TYPE_TO_CLASS: s,
        TYPE_TO_FACTORY: n
    }
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var n = i(76);
    t.default = {
        init: function(e) {
            var t = e.map;
            this.markersLayer = t.getLayerByUniqueName(n.MARKERS_LAYER_NAME),
            this.featuresLayer = t.getLayerByUniqueName(n.FEATURES_LAYER_NAME),
            this.markersLayer.events.register("markerclick", this, this._onMarkerClick),
            this.featuresLayer.events.register("featureunselected", this, this._onFeatureUnselected)
        },
        destroy: function() {
            this.markersLayer.events.unregister("markerclick", this, this._onMarkerClick),
            this.featuresLayer.events.unregister("featureunselected", this, this._onFeatureUnselected)
        },
        _onFeatureUnselected: function(e) {
            var t = this
              , i = e.features || [e.feature];
            i.forEach(function(e) {
                var i = e.model.getID();
                t.markersLayer.getMarker(i).unhighlight()
            })
        },
        _onMarkerClick: function(e) {
            var t = e.target.attributes.cityId
              , i = this.featuresLayer.features.filter(function(e) {
                return e.model.getID() === t
            })[0];
            void 0 !== i && (this.featuresLayer.selectControl.select(i),
            this.markersLayer.getMarker(t).highlight())
        }
    },
    e.exports = t.default
}
, function(e, t, i) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var n = i(11)
      , s = "selected";
    t.default = OL.Class(OL.Marker, {
        initialize: function(e) {
            return this.model = e,
            this.icon = new n("city-name-marker"),
            this.lonlat = e.attributes.geometry.toLonLat(),
            OL.Marker.prototype.initialize.call(this, this.lonlat, this.icon),
            this.render(),
            this
        },
        render: function() {
            this.icon.div.textContent = this.model.attributes.name,
            this.icon.div.attributes.cityId = this.model.getID()
        },
        highlight: function() {
            this.icon.div.classList.add(s)
        },
        unhighlight: function() {
            this.icon.div.classList.remove(s)
        }
    }),
    e.exports = t.default
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var s = i(77)
      , r = n(s)
      , o = i(39)
      , a = OpenLayers.Class(o, {
        getByAttributes: function(e) {
            var t = (0,
            r.default)(e);
            return this.getObjectArray().filter(function(i) {
                return t.every(function(t) {
                    return i.attributes[t] === e[t]
                })
            })
        },
        getValidCities: function() {
            return this.getObjectArray().filter(function(e) {
                return e.hasName() && !e.isEmpty()
            })
        }
    });
    t.default = a,
    e.exports = t.default
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var s = i(467)
      , r = n(s)
      , o = i(24)
      , a = i(7);
    e.exports = o.extend({
        template: "Waze/Modules/Cities/templates/feature_editor",
        events: {
            "click .edit-button": function() {
                this._toggleEditing(!0)
            },
            "click .cancel-button": "_cancelChanges",
            "click .save-button": "_applyChanges",
            "submit form": function() {
                return !1
            }
        },
        editedModelBindings: {
            "form .city-name": "name"
        },
        formBindings: {
            ".preview": {
                observe: "editing",
                visible: !0,
                onGet: _.negate(_.identity)
            },
            "form.attributes-form": {
                observe: "editing",
                visible: !0
            },
            "form.attributes-form input": {
                attributes: [{
                    name: "disabled",
                    observe: "submitting"
                }]
            }
        },
        ui: {
            cityNameInput: ".attributes-form .city-name"
        },
        initialize: function() {
            o.prototype.initialize.apply(this, arguments),
            this.editedModel = this._createEditableModel(),
            this.formModel = new Backbone.Model({
                defaults: {
                    editing: !1,
                    submitting: !1
                }
            })
        },
        serializeData: function() {
            return {
                canEdit: this.model.arePropertiesEditable(),
                city: this.model
            }
        },
        onRender: function() {
            this.stickit(this.editedModel, this.editedModelBindings),
            this.stickit(this.formModel, this.formBindings)
        },
        _createEditableModel: function() {
            var e = $.extend(!0, {}, this.model.attributes);
            return new Backbone.Model(e)
        },
        _toggleEditing: function(e) {
            this.formModel.set("editing", e),
            e && this.ui.cityNameInput.focus()
        },
        _toggleSubmitting: function(e) {
            this.formModel.set("submitting", e)
        },
        _cancelChanges: function() {
            this.editedModel.set(this._createEditableModel().attributes),
            this._toggleEditing(!1)
        },
        _applyChanges: function() {
            var e = this.editedModel.attributes.name !== this.model.attributes.name;
            e ? this._checkExistance().then(this._commitChanges.bind(this), alert) : this._toggleEditing(!1)
        },
        _checkExistance: function() {
            var e = this
              , t = arguments
              , i = this.editedModel.attributes.name
              , n = this.model.attributes
              , s = n.countryID
              , o = n.stateID;
            return this._toggleSubmitting(!0),
            new r.default(function(n, r) {
                e.dataModel.segments.getCityData(i, s, o).done(function(t) {
                    var i = t.existingCity;
                    if (i && i.id !== e.model.getID()) {
                        var s = I18n.t("edit.city.name_exists", {
                            name: t.existingCity.name
                        });
                        r(s)
                    } else
                        e._toggleEditing(!1),
                        n()
                }).fail(function() {
                    return r(t)
                }).always(function() {
                    return e._toggleSubmitting(!1)
                })
            }
            )
        },
        _commitChanges: function() {
            var e = new a(this.model,this.editedModel.attributes);
            this.dataModel.actionManager.add(e)
        }
    })
}
, function(e, t, i) {
    "use strict";
    var n = i(16)
      , s = i(4)
      , r = i(8)
      , o = OL.Class(n, {
        DEFAULT_POLYGON_SIZE_METERS: 50,
        defaults: function() {
            return {
                subject: "",
                body: "",
                geometry: null ,
                endDate: null ,
                lockRank: 0,
                isFollowing: !1,
                createdOn: null ,
                createdBy: null ,
                updatedBy: null ,
                updatedOn: null ,
                permissions: s.ALL_PERMISSIONS,
                id: null
            }
        },
        nested: {
            geometry: OL.Geometry
        },
        PERMISSIONS: {
            EDIT_GEOMETRY: 1,
            EDIT_PROPERTIES: 2,
            DELETE: 4
        },
        DATE_FORMAT: "YYYY-MM-DD HH:mm",
        isPoint: function() {
            return "OpenLayers.Geometry.Point" === this.geometry.CLASS_NAME
        },
        getPolygonGeometry: function() {
            return this.isPoint() ? r.pointToSquarePolygon(this.geometry, this.DEFAULT_POLYGON_SIZE_METERS) : this.geometry.clone()
        },
        getPointGeometry: function() {
            return this.isPoint() ? this.geometry.clone() : r.polygonToPoint(this.geometry)
        },
        getComments: function() {
            return new Backbone.Collection(this.attributes.conversation)
        },
        isFollowing: function() {
            return this.attributes.isFollowing
        },
        setFollowing: function(e) {
            var t = this;
            return $.post(W.Config.paths.mapCommentFollow, {
                mapCommentID: this.getID(),
                follow: e
            }).done(function() {
                t.attributes.isFollowing = e
            })
        },
        addComment: function(e) {
            var t = this;
            return $.post(W.Config.paths.mapCommentConversation, {
                mapCommentID: this.getID(),
                text: e
            }).done(function(e) {
                e.isAutoFollowed && (t.attributes.isFollowing = !0),
                t.attributes.conversation.push(e.comment)
            }).then(function(e) {
                return new Backbone.Model(e.comment)
            })
        }
    });
    e.exports = o
}
, function(e, t) {
    "use strict";
    var i = Marionette.ItemView.extend({
        template: "Waze/Modules/Comments/templates/name_editor",
        className: "map-comment-name-editor",
        ui: {
            editButton: ".edit-button",
            applyButton: ".apply-button"
        },
        events: {
            "click @ui.editButton": "_onEditButtonClicked",
            "click @ui.applyButton": "_onApplyButtonClicked"
        },
        bindings: {
            ".preview": {
                visible: !0,
                observe: "showingPreview"
            },
            ".edit": {
                visible: !0,
                observe: "showingPreview",
                onGet: _.negate(_.identity)
            },
            ".edit-button": {
                visible: !0,
                observe: "editable"
            },
            ".subject-preview": "subject",
            ".body-preview": "body",
            ".subject-input": "subject",
            ".body-textarea": "body"
        },
        initialize: function() {
            this.model = new Backbone.Model({
                showingPreview: !0,
                editable: this.options.editable,
                subject: this.options.subject,
                body: this.options.body
            })
        },
        onRender: function() {
            this.stickit()
        },
        _onEditButtonClicked: function() {
            this.model.set({
                showingPreview: !1
            })
        },
        _onApplyButtonClicked: function() {
            this.model.set({
                showingPreview: !0
            }),
            this.trigger("changed", {
                subject: this.model.get("subject"),
                body: this.model.get("body")
            })
        }
    });
    e.exports = i
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    var s, r = i(107), o = n(r), a = i(24), l = i(163), u = i(74), c = i(71), d = i(1030), h = i(7), p = (i(28),
    i(112)), g = i(20), m = i(9), f = i(135), v = i(141), y = i(139), b = i(519), w = i(584), S = i(583), E = i(136), C = i(137), L = i(13);
    s = a.extend({
        behaviors: {
            restoreLastTab: {
                behaviorClass: v
            },
            accelerators: {
                behaviorClass: y
            }
        },
        events: _.extend({}, a.prototype.events, {
            "click .segment .address-edit-btn": "editAddressClicked",
            "click .segment .address-edit-cancel": "cancelEditAddressClicked",
            "submit .segment .address-form": "addressEdited",
            "click .segment .select-entire-street": "selectEntireStreetClicked",
            "click .segment .select-entire-roundabout": "selectEntireRoundaboutClicked",
            "click .segment .edit-house-numbers": "editHouseNumbersClicked",
            "click .segment .edit-restrictions": "editRestrictionsClicked",
            "click .segment .add-alt-street-btn": "addAltStreetClicked",
            "click .segment .alt-street-delete": "deleteAltStreetClicked",
            "click .segment input[type='checkbox'][mixed]": "mixedCheckboxClicked",
            "change .segment input[name=emptyStreet], .segment input[name=emptyCity]": "emptyAddressToggled",
            "change select[name=countryID]": "addressChanged",
            "change input[name=streetName]": "addressChanged"
        }),
        accelerators: {
            toggleSegmentDirection: "toggleDirection",
            editSegmentAddress: "editSegmentShortcutClicked",
            editHouseNumbers: "editHouseNumbersShortcutClicked",
            editRestrictions: "editRestrictionsShortcutClicked",
            selectEntireStreet: "selectEntireStreet",
            increaseSegmentLevel: "increaseSegmentLevel",
            decreaseSegmentLevel: "decreaseSegmentLevel"
        },
        regions: {
            closuresRegion: ".closures",
            ttsPlaybackRegion: ".tts-playback-region"
        },
        template: "templates/segment/edit-panel",
        cityNames: null ,
        streetNames: null ,
        restrictionsView: null ,
        initialize: function() {
            a.prototype.initialize.apply(this, arguments),
            this._toggleEvents(!0),
            this.model = new u(this.options.selection,this.options.dataModel,this.options.reversedSegments),
            this.selectionManager = this.options.selectionManager,
            this.cityNames = this.dataModel.cities.getValidCities().map(function(e) {
                return e.attributes.name
            });
            var e = _.values(this.dataModel.streets.objects);
            this.streetNames = _(e).pluck("name").filter(function(e) {
                return e
            }),
            this.reverseSegments = this.options.reversedSegments,
            this.consistentDirection = 0 === this.reverseSegments.numReversed && !this.reverseSegments.multipleConnectedComponents
        },
        _toggleEvents: function(e) {
            var t = e ? "on" : "off"
              , i = e ? "on" : "un";
            this.dataModel.roadClosures[t]("change:active", this.render, this),
            this.dataModel.actionManager.events[i]({
                hasActions: this.onActionsChanged,
                noActions: this.onActionsChanged,
                scope: this
            })
        },
        onDestroy: function() {
            this._toggleEvents(!1)
        },
        selectEntireStreetClicked: function(e) {
            e.preventDefault(),
            this.selectEntireStreet()
        },
        selectEntireStreet: function() {
            this.selectionManager.select(this.model.children.first().getEntireStreet(this.dataModel))
        },
        selectEntireRoundaboutClicked: function(e) {
            e.preventDefault(),
            this._selectEntireRoundabout()
        },
        _selectEntireRoundabout: function() {
            var e = this.model.children.first().getRoundabout();
            null !== e && this.selectionManager.select(e.getAllSegments())
        },
        onRender: function() {
            this.renderAddressEdit(),
            this._initClosureEditing()
        },
        _initTTSView: function() {
            var e = this.model.getAddress()
              , t = this.model.children[0].geometry.components[0];
            this.streetModel = new S,
            null !== e.street && this.streetModel.set({
                name: e.street.name,
                isEmpty: e.street.isEmpty,
                lonlat: t.toLonLat(),
                country: e.country
            });
            var i = new w({
                model: this.streetModel
            });
            this.ttsPlaybackRegion.reset(),
            this.ttsPlaybackRegion.show(i)
        },
        _initClosureEditing: function() {
            var e = new f({
                pannable: W.map.getPannable(),
                compositeSegment: this.model,
                repoActive: this.dataModel.roadClosures.active,
                canSaveClosures: !this.dataModel.actionManager.canSave(),
                canAdd: !0,
                dataModel: this.dataModel,
                editViewConfig: E.SEGMENT,
                listViewConfig: C.SEGMENT
            });
            this.closuresRegion.show(e)
        },
        renderAddressEdit: function() {
            var e = this.$(".address-edit");
            e.html(L.getHTML("templates/segment/address-edit", this.serializeData())),
            this.disableAddressEditing(),
            this.$(".address-edit-btn").prop("disabled", !this.model.arePropertiesEditable()),
            this.$(".address-edit-btn").toggleClass("disabled", !this.model.arePropertiesEditable()),
            this.$(".address-edit input[name=streetName]").typeahead({
                source: this.streetNames
            }),
            this.$(".address-edit input[name=cityName]").typeahead({
                source: this.cityNames
            }),
            this.renderAltStreetsEdit(),
            this._initTTSView()
        },
        renderAltStreetsEdit: function() {
            var e = this.$(".alt-street-controls");
            e.html(L.getHTML("templates/segment/alt-streets-edit", this.serializeData())),
            this.$altStreetFormTemplate = this.$(".alt-street-form-template").detach(),
            this.model.arePropertiesEditable() || (this.$(".add-alt-street-btn").prop("disabled", !0),
            this.$(".alt-street-list").addClass("undeletable")),
            this.toggleAltStreetTable()
        },
        emptyAddressToggled: function(e) {
            var t = $(e.target)
              , i = t.parents(".toggleable-input").find("input:not([type=checkbox])")
              , n = t.is(":checked");
            i.prop({
                disabled: n,
                required: !n
            }),
            this.streetModel.set("isEmpty", n)
        },
        addressChanged: function() {
            var e = this._readAddressForm()
              , t = this.dataModel.countries.get(e.countryID);
            this.streetModel.set({
                country: t,
                isEmpty: e.emptyStreet,
                name: e.streetName
            })
        },
        editAddressClicked: function(e) {
            e.preventDefault(),
            this.enableAddressEditing()
        },
        cancelEditAddressClicked: function(e) {
            e.preventDefault(),
            this.renderAddressEdit()
        },
        enableAddressEditing: function() {
            this.$el.find(".address-edit").addClass("editing").removeClass("preview")
        },
        disableAddressEditing: function() {
            this.$el.find(".address-edit").removeClass("editing").addClass("preview")
        },
        serializeData: function() {
            var e = this.dataModel.loginManager.getUserRank()
              , t = this.model.getRoutingRoadTypes();
            return {
                segment: this.model,
                segmentId: this.model.getID(),
                isLockedForUser: this.model.isLockedByHigherRank(),
                isInBigJunction: this.model.isInBigJunction(),
                userRank: e,
                editable: this.model.arePropertiesEditable(),
                address: this.model.getAddress(),
                addressDetails: this.model.getAddressDetails(),
                isHighway: this.model.isHighway(),
                isInRoundabout: this.model.isInRoundabout(),
                isImperial: W.model.isImperial,
                hasStates: this.dataModel.hasStates(),
                hasRestrictions: this.model.getRestrictionCount() > 0,
                editingMultiple: this.model.children.length > 1,
                allowEditingHouseNumbers: this.shouldAllowHouseNumberEditing(),
                allowDefaultRank: this.model.canUserSetDefaultRank(e),
                allowSpeedLimit: W.Config.speed_limit.enable,
                numSegments: this.model.children.length,
                prevRouteRankDisabled: null === t.prev,
                nextRouteRankDisabled: null === t.next,
                routingRoadTypes: t,
                disableEmptyStreet: this.shouldDisableEmptyStreet(),
                dataModel: this.dataModel,
                view: this
            }
        },
        getSpeedLimitValue: function(e) {
            var t = this.model
              , i = t.attributes[e];
            return null !== t.attributes[e] ? m.getDisplayUnitValue(i, t.UNITS.speed, !0) : ""
        },
        directionChanged: function(e) {
            if (e >= 0) {
                var t = 0 !== (1 & e)
                  , i = 0 !== (2 & e);
                this.changed({
                    fwdDirection: t,
                    revDirection: i
                }, !0)
            }
        },
        tollRoadChanged: function(e) {
            this.changed({
                fwdToll: e,
                revToll: e
            })
        },
        roadTypeChanged: function(e) {
            this.changed({
                roadType: e,
                routingRoadType: null
            }, !0)
        },
        routingRoadTypeChanged: function(e) {
            this.changed({
                routingRoadType: e
            }, !0)
        },
        maxSpeedChanged: function(e, t) {
            var i = {};
            i[e] = t,
            i[e + "Unverified"] = !1,
            this.changed(i)
        },
        fwdMaxSpeedChanged: function(e) {
            this.maxSpeedChanged("fwdMaxSpeed", e)
        },
        revMaxSpeedChanged: function(e) {
            this.maxSpeedChanged("revMaxSpeed", e)
        },
        fwdMaxSpeedUnverifiedChanged: function(e) {
            this._maxSpeedUnverfiedChanged("fwdMaxSpeedUnverified", !e)
        },
        revMaxSpeedUnverifiedChanged: function(e) {
            this._maxSpeedUnverfiedChanged("revMaxSpeedUnverified", !e)
        },
        _maxSpeedUnverfiedChanged: function(e, t) {
            var i = {};
            i[e] = t,
            this.changed(i, !1, function(t) {
                return t.canChangeMaxSpeedUnverified(e)
            })
        },
        shouldShowRoutingRoadTypeMessage: function() {
            if (this.model.mixed.routingRoadType)
                return !1;
            var e = this.model.attributes.routingRoadType
              , t = this.model.attributes.roadType;
            return null !== e && t !== e
        },
        getRoutingRoadTypeMessage: function() {
            var e, t = this.model.attributes.routingRoadType;
            return e = m.contentTag("strong", I18n.t("segment.road_types." + t)),
            m.safe_t("edit.segment.routing.info", {
                roadType: e
            })
        },
        shouldDisableEmptyStreet: function() {
            var e = this.model.getAddress();
            return !!this.model.attributes.hasHNs && !e.street.isEmpty
        },
        shouldShowRoutingSelect: function() {
            var e = this.model;
            return !e.mixed.roadType && e.isRoutable() && e.canEditRoutingRoadTypes()
        },
        shouldAllowHouseNumberEditing: function() {
            return Waze.Config.houseNumbers.allowEditing && 1 === this.model.children.length && this.model.houseNumbersEditablePerType()
        },
        changed: function(e, t) {
            var i = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : function(e) {
                return !0
            }
              , n = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : void 0
              , s = new c
              , r = this
              , o = {};
            t || (this.changing = !0),
            s.setModel(this.dataModel),
            this.reverseSegments.numReversed > 0 && (o = this.reverseAttributes(e)),
            this.model.children.filter(i).forEach(function(t) {
                n && _.extend(t.flagAttributes, n),
                r.reverseSegments[t.getID()] ? s.doSubAction(new h(t,o)) : s.doSubAction(new h(t,e))
            }),
            this.dataModel.actionManager.add(s),
            this.changing = !1
        },
        reverseAttributes: function e(t) {
            var e = {};
            return _.each(t, function(t, i) {
                var n = u.prototype.reversableAttributes[i];
                n ? e[n] = t : e[i] = t
            }),
            e
        },
        addressEdited: function(e) {
            e.preventDefault();
            var t = this._readAddressForm();
            this._cityExists(t) || t.emptyCity ? this._submitAddressChanges(t) : this._confirmCityChanges(t)
        },
        _readAddressForm: function() {
            var e, t = this, i = {};
            return $.each(this.$(".address-edit .primary-street").find("select,input,textarea"), function(n, s) {
                e = $(s),
                i[e.attr("name")] = t.serializeElement(e)
            }),
            i
        },
        _confirmCityChanges: function(e) {
            var t = this;
            this._toggleAddressFormLoading(!0),
            W.model.segments.getCityData(e.cityName, e.countryID, e.stateID).done(function(i) {
                var n = !0;
                i.isDistant ? n = window.confirm(I18n.t("edit.segment.city_confirm.distant", {
                    city_name: e.cityName
                })) : null === i.existingCity && (n = window.confirm(I18n.t("edit.segment.city_confirm.no_city", {
                    city_name: e.cityName
                }))),
                n && t._submitAddressChanges(e)
            }).fail(function() {
                t._submitAddressChanges(e)
            }).always(function() {
                t._toggleAddressFormLoading(!1)
            })
        },
        _toggleAddressFormLoading: function(e) {
            this.$el.find(".address-edit").find("input,select,button").prop("disabled", e),
            this.$el.find(".add-alt-street-btn").toggle(!e),
            this.$el.find(".address-form-actions .loading").toggleClass("not-shown", !e)
        },
        _cityExists: function(e) {
            var t = parseInt(e.countryID, 10)
              , i = parseInt(e.stateID, 10)
              , n = W.model.cities.getByAttributes({
                name: e.cityName,
                countryID: t,
                stateID: i
            });
            return n.length > 0
        },
        _submitAddressChanges: function(e) {
            var t = new c;
            t.setModel(this.dataModel),
            this.changing = !0,
            this.disableAddressEditing(),
            this.model.children.forEach(function(i) {
                t.doSubAction(new p(i,e,{
                    streetIDField: "primaryStreetID"
                }))
            }),
            this.processAltStreets(t),
            this.dataModel.actionManager.add(t),
            this.changing = !1,
            this.model.calcAttributes(),
            this.render()
        },
        addAltStreetClicked: function(e) {
            e.preventDefault(),
            this.addAltStreetFrom(),
            this.toggleAltStreetTable()
        },
        toggleAltStreetTable: function() {
            var e = this.$el.find(".add-alt-street-form");
            e.toggle(e.find("tr:not(.deleted)").length > 1)
        },
        processAltStreets: function(e) {
            var t, i, n = [], s = {}, r = this;
            t = $.map(this.$el.find(".alt-street.deleted"), function(e) {
                return $(e).data("id")
            }),
            t.isEmpty() || t.forEach(function(t) {
                this.model.children.forEach(function(i) {
                    e.doSubAction(new h(i,{
                        streetIDs: i.attributes.streetIDs.remove(t)
                    }))
                }, this)
            }, this),
            $.each(this.$el.find(".new-alt-street"), function(t, o) {
                n.push(s = {}),
                $.each($(o).find("input"), function(e, t) {
                    i = $(t),
                    s[i.attr("name")] = r.serializeElement(i)
                }),
                r.model.children.forEach(function(t) {
                    e.doSubAction(new d(t,s))
                })
            })
        },
        deleteAltStreetClicked: function(e) {
            var t = $(e.target).parents(".alt-street, .new-alt-street")
              , i = this;
            e.preventDefault(),
            t.fadeOut("fast", function() {
                t.hasClass("new-alt-street") ? t.remove() : t.addClass("deleted"),
                i.toggleAltStreetTable()
            })
        },
        addAltStreetFrom: function() {
            var e, t, i = this.$altStreetFormTemplate.clone().appendTo(this.$el.find(".add-alt-street-form"));
            e = this.$el.find(".add-alt-street-form .new-alt-street").length,
            t = "alt-city-" + e,
            i.find("input[name=emptyCity]").attr("id", t),
            i.find("input[name=emptyCity] + label").attr("for", t),
            i.find("input[name=streetName]").typeahead({
                source: this.streetNames
            }),
            i.find("input[name=cityName]").typeahead({
                source: this.cityNames
            })
        },
        onFeaturesChanged: function(e) {
            this.hasEditedModelChanged(e) && this.model.calcAttributes(),
            a.prototype.onFeaturesChanged.apply(this, arguments)
        },
        hasEditedModelChanged: function(e) {
            var t = this;
            return e.some(function(e) {
                return t.model.children.some(function(t) {
                    return t.equals(e)
                })
            })
        },
        increaseSegmentLevel: function() {
            this.changeSegmentLevelBy(1)
        },
        decreaseSegmentLevel: function() {
            this.changeSegmentLevelBy(-1)
        },
        changeSegmentLevelBy: function(e) {
            if (!this.model.mixed.level && this.model.arePropertiesEditable()) {
                var t = this.model.attributes.level || 0;
                t += e,
                t >= g.prototype.MinLevel && t <= g.prototype.MaxLevel && this.changed({
                    level: t
                }, !0)
            }
        },
        toggleDirection: function() {
            if (!this.model.mixed.direction && this.model.arePropertiesEditable()) {
                var e = (this.model.attributes.direction + 1) % 4;
                0 === e && e++,
                this.directionChanged(e)
            }
        },
        editSegmentShortcutClicked: function() {
            this.model.arePropertiesEditable() && this.enableAddressEditing()
        },
        editHouseNumbersShortcutClicked: function() {
            this.shouldAllowHouseNumberEditing() && this.editHouseNumbers()
        },
        editHouseNumbersClicked: function(e) {
            e.preventDefault(),
            this.editHouseNumbers()
        },
        editHouseNumbers: function() {
            var e = this.model.children.clone()
              , t = this.model.children.first()
              , i = t.getEntireStreet(this.dataModel)
              , n = new b({
                model: this.dataModel,
                map: W.map,
                editable: t.canEditHouseNumbers(),
                segments: i
            });
            n.on("destroy", function() {
                this.selectionManager.select(e)
            }, this)
        },
        editRestrictionsClicked: function(e) {
            e.preventDefault(),
            this.editRestrictions()
        },
        editRestrictionsShortcutClicked: function() {
            this.shouldAllowRestrictionEditing() && this.editRestrictions()
        },
        editRestrictions: function(e) {
            this.restrictionsView && (this.restrictionsView.hide(),
            this.restrictionsView.destroy()),
            this.restrictionsView = new l,
            this.restrictionsView.on("done", this.onRestrictionsEdited, this),
            this.restrictionsView.on("cancel", this.onRestrictionsEditCancel, this);
            var t = {}
              , i = []
              , n = !this.model.attributes.fwdDirection && !this.model.attributes.revDirection;
            (n || this.model.attributes.fwdDirection || this.model.mixed.fwdDirection) && i.push("fwdRestrictions"),
            (n || this.model.attributes.revDirection || this.model.mixed.revDirection) && i.push("revRestrictions"),
            i.forEach(function(e) {
                var i = {};
                this.model.children.forEach(function(t) {
                    var n = t.attributes[e];
                    this.reverseSegments[t.getID()] && (n = "fwdRestrictions" === e ? t.attributes.revRestrictions : t.attributes.fwdRestrictions),
                    (n || []).forEach(function(e) {
                        i[e] ? e = i[e] : (e = e.clone(),
                        i[e] = e),
                        e.models ? e.models.push(t) : e.models = [t]
                    }, this)
                }, this),
                t[e] = {
                    restrictions: (0,
                    o.default)(i),
                    name: e
                }
            }, this),
            this.restrictionsView.setModel(t, this.model.children.clone(), this.model.arePropertiesEditable()),
            this.restrictionsView.setSelectedGroup(1 === i.length ? i.first() : "fwdRestrictions"),
            this.restrictionsView.show()
        },
        onRestrictionsEdited: function() {
            var e = new c
              , t = {}
              , i = this.restrictionsView.model
              , n = this;
            this.changing = !0,
            this.dataModel.actionManager.add(e),
            Object.forEach(i, function(e, i) {
                i.restrictions.forEach(function(i) {
                    i.models || (i.models = n.model.children.clone()),
                    i.models.forEach(function(n) {
                        t[n.getID()] || (t[n.getID()] = {}),
                        t[n.getID()][e] = t[n.getID()][e] || [],
                        t[n.getID()][e].push(i.clone())
                    }),
                    delete i.models
                })
            }),
            this.model.children.forEach(function(i) {
                var s, r = t[i.getID()] || {
                    fwdRestrictions: [],
                    revRestrictions: []
                };
                n.reverseSegments[i.getID()] && (s = r.fwdRestrictions,
                r.fwdRestrictions = r.revRestrictions,
                r.revRestrictions = s),
                e.doSubAction(new h(i,{
                    fwdRestrictions: r.fwdRestrictions || [],
                    revRestrictions: r.revRestrictions || []
                }))
            }),
            this.changing = !1,
            this.restrictionsView.hide(),
            this.restrictionsView.destroy(),
            this.restrictionsView = null ,
            this.model.calcAttributes(),
            this.render()
        },
        onRestrictionsEditCancel: function() {
            this.restrictionsView.hide(),
            this.restrictionsView.destroy(),
            this.restrictionsView = null
        },
        editClosures: function(e) {
            W.commands.execute("closures:list", this.model)
        },
        onActionsChanged: function() {
            this.model.calcAttributes(),
            this.render()
        },
        shouldAllowRestrictionEditing: function() {
            return W.Config.restrictions.allowEditing
        },
        mixedCheckboxClicked: function(e) {
            e.target.removeAttribute("mixed")
        }
    }),
    e.exports = s
}
, function(e, t) {
    "use strict";
    Object.defineProperty(t, "__esModule", {
        value: !0
    });
    var i = {
        sum: function(e, t) {
            return (e || 0) + (t || 0)
        },
        max: function(e, t) {
            return Math.max(e, t)
        },
        logical: {
            and: function(e, t) {
                return e && t
            },
            or: function(e, t) {
                return e || t
            }
        },
        bitwise: {
            and: function(e, t) {
                return e & t
            },
            or: function(e, t) {
                return e | t
            },
            xor: function(e, t) {
                return e ^ t
            }
        }
    };
    t.default = i,
    e.exports = t.default
}
, function(e, t, i) {
    e.exports = {
        default: i(719),
        __esModule: !0
    }
}
, function(e, t, i) {
    e.exports = {
        default: i(720),
        __esModule: !0
    }
}
, function(e, t, i) {
    e.exports = {
        default: i(721),
        __esModule: !0
    }
}
, function(e, t, i) {
    e.exports = {
        default: i(725),
        __esModule: !0
    }
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.__esModule = !0;
    var s = i(106)
      , r = n(s);
    t.default = function(e, t, i) {
        return t in e ? (0,
        r.default)(e, t, {
            value: i,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : e[t] = i,
        e
    }
}
, function(e, t, i) {
    "use strict";
    function n(e) {
        return e && e.__esModule ? e : {
            default: e
        }
    }
    t.__esModule = !0;
    var s = i(466)
      , r = n(s);
    t.default = r.default || function(e) {
        for (var t = 1; t < arguments.length; t++) {
            var i = arguments[t];
            for (var n in i)
                Object.prototype.hasOwnProperty.call(i, n) && (e[n] = i[n])
        }
        return e
    }
}
, , , , , , , , , , , , , , , , , function(e, t, i) {
    var n, s, r, o, a, l, u;
    n = i(5),
    o = i(3),
    a = i(2),
    r = i(70),
    u = i(7),
    l = i(111),
    s = OL.Class(o, {
        bigJunction: null ,
        attributes: null ,
        initialize: function(e, t) {
            this.bigJunction = e,
            o.prototype.initialize.apply(this, [t]),
            this.attributes = {}
        },
        doAction: function() {
            var e, t, i, n, s, o, a, c, d, h, p, g, m, f, v, y;
            for (this.initialGeometry = this.bigJunction.geometry.clone(),
            this.bigJunction.getID() || (e = this.model.bigJunctions.generateUniqueID()),
            this.bigJunction.setID(e),
            this.bigJunction.state = OpenLayers.State.INSERT,
            a = this._findShortSegments(),
            o = 0,
            h = a.length; o < h; o++)
                y = a[o],
                this.doSubAction(new u(y,{
                    crossroadID: e
                },{
                    dontSerialize: !0
                }));
            for (s = new l(e,a,l.ADD_JUNCTION_TO_SEGMENT),
            this.doSubAction(s),
            n = s.connectedSegments,
            f = this._findMaxRankInSegmentArray(a.concat(n)),
            v = _.invoke(a, "getID"),
            d = {
                segIDs: v,
                rank: f
            },
            _.extend(this.attributes, d),
            _.extend(this.bigJunction.attributes, d),
            this.model.segments.topCityID && (t = this.model.cities.get(this.model.segments.topCityID)),
            null == t && null != this.model.countries.top && (i = new r(this.model.states.top,this.model.countries.top,"",!0),
            this.doSubAction(i),
            t = i.city),
            null != t && (this.attributes.cityID = t.getID(),
            this.bigJunction.attributes.cityID = t.getID()),
            m = this.bigJunction.getLegalPaths(),
            c = 0,
            p = m.length; c < p; c++)
                g = m[c],
                g.set({
                    navigable: !0
                });
            return this.paths = m,
            this.bigJunction.attributes.connections = this.paths,
            this.model.bigJunctions.put(this.bigJunction),
            !0
        },
        _findShortSegments: function() {
            var e;
            return e = this.model.segments.getObjectArray(function(e) {
                return function(t) {
                    var i;
                    return i = t.geometry.components,
                    !t.isDeleted() && t.isDrivable() && e.initialGeometry.containsPoint(_.first(i)) && e.initialGeometry.containsPoint(_.last(i))
                }
            }(this))
        },
        _findMaxRankInSegmentArray: function(e) {
            var t, i, n, s, r;
            for (n = 0,
            t = 0,
            i = e.length; t < i; t++)
                s = e[t],
                r = s.getLockRank(),
                r > n && (n = r);
            return n
        },
        undoAction: function() {
            return o.prototype.undoAction.apply(this),
            this.model.bigJunctions.remove(this.bigJunction)
        },
        redoAction: function() {
            return this.model.bigJunctions.put(this.bigJunction),
            o.prototype.redoAction.apply(this)
        },
        serialize: function() {
            var e, t;
            return e = this.attributes,
            e.id = this.bigJunction.getID(),
            e.geometry = this.initialGeometry,
            e.connections = this.paths,
            t = {
                _objectType: a.BIG_JUNCTION,
                action: n.TYPE.ADD,
                attributes: e
            }
        },
        CLASS_NAME: "Waze.Action.AddBigJunction"
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o;
    r = i(20),
    s = i(3),
    o = i(72),
    n = OL.Class(s, {
        segments: null ,
        sourceSplits: null ,
        targetSplits: null ,
        initialize: function(e, t, i) {
            this.segments = e,
            this.options = i,
            s.prototype.initialize.apply(this, [this.options]),
            this.sourceSplits = t.first().map(function(e) {
                return function(t) {
                    var i;
                    return i = new r({
                        geometry: t
                    }),
                    i.copyAttributes(e.segments.first()),
                    i
                }
            }(this)),
            this.targetSplits = t.last().map(function(e) {
                return function(t) {
                    var i;
                    return i = new r({
                        geometry: t
                    }),
                    i.copyAttributes(e.segments.last()),
                    i
                }
            }(this))
        },
        doAction: function() {
            var e;
            return e = new o(this.segments.last(),{
                splits: this.targetSplits
            }),
            this.doSubAction(e),
            this.doSubAction(new o(this.segments.first(),{
                splits: this.sourceSplits,
                splitNode: e.splitNode
            }))
        },
        CLASS_NAME: "Waze.Action.AddIntersection"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r;
    n = i(5),
    r = i(2),
    s = OL.Class(n, {
        initialize: function(e, t, i) {
            return this.closure = e,
            this.segment = t,
            n.prototype.initialize.apply(this, [i])
        },
        serialize: function() {
            return {
                _objectType: r.ROAD_CLOSURE,
                action: n.TYPE.ADD,
                attributes: {
                    reason: this.closure.reason,
                    location: this.closure.location,
                    segID: this.closure.segID,
                    id: this.closure.getID(),
                    startDate: this.closure.startDate,
                    endDate: this.closure.endDate,
                    forward: this.closure.forward,
                    permanent: this.closure.permanent,
                    eventId: this.closure.eventId
                }
            }
        },
        doAction: function() {
            return W.model.repos.roadClosures.put(this.closure)
        },
        redoAction: function() {
            return this.doAction()
        },
        undoAction: function() {
            return W.model.repos.roadClosures.remove(this.closure)
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    s = i(3),
    n = i(5),
    o = i(2),
    l = i(7),
    a = i(111),
    r = OL.Class(s, {
        initialize: function(e, t) {
            this.bigJunction = e,
            s.prototype.initialize.apply(this, [t]),
            this.prevJunctionState = null
        },
        destroy: function() {
            this.model.bigJunctions.get(this.bigJunction.getID()) || this.bigJunction.destroy(),
            this.bigJunction = null ,
            s.prototype.destroy.apply(this)
        },
        doAction: function() {
            var e, t, i, n, s;
            if (this.bigJunction.state === OpenLayers.State.DELETE)
                return !1;
            for (t = function() {
                var e, t, i, s;
                for (i = this.bigJunction.attributes.segIDs,
                s = [],
                e = 0,
                t = i.length; e < t; e++)
                    n = i[e],
                    s.push(this.model.segments.get(n));
                return s
            }
            .call(this),
            e = 0,
            i = t.length; e < i; e++)
                s = t[e],
                this.doSubAction(new l(s,{
                    crossroadID: null
                },{
                    dontSerialize: !0
                }));
            this.doSubAction(new a(this.bigJunction.getID(),t,a.REMOVE_JUNCTION_FROM_SEGMENT)),
            this.prevJunctionState = this.bigJunction.state,
            this.bigJunction.state === OpenLayers.State.INSERT ? this.model.bigJunctions.remove(this.bigJunction) : (this.bigJunction.state = OpenLayers.State.DELETE,
            this.model.bigJunctions.changed(this.bigJunction))
        },
        undoAction: function() {
            this.bigJunction.state === OpenLayers.State.INSERT ? this.model.bigJunctions.put(this.bigJunction) : (this.bigJunction.state = this.prevJunctionState,
            this.model.bigJunctions.changed(this.bigJunction)),
            s.prototype.undoAction.apply(this)
        },
        redoAction: function() {
            var e;
            e = this.bigJunction.getID(),
            this.bigJunction.state === OpenLayers.State.INSERT ? this.model.bigJunctions.remove(this.bigJunction) : (this.bigJunction.state = OpenLayers.State.DELETE,
            this.model.bigJunctions.changed(this.bigJunction)),
            s.prototype.redoAction.apply(this)
        },
        serialize: function() {
            var e;
            return e = {
                _objectType: o.BIG_JUNCTION,
                action: n.TYPE.DELETE,
                attributes: {
                    id: this.bigJunction.getID()
                }
            }
        },
        CLASS_NAME: "Waze.Action.DeleteBigJunction"
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r;
    n = i(5),
    r = i(2),
    s = OL.Class(n, {
        initialize: function(e, t, i) {
            return this.closure = e,
            this.segment = t,
            n.prototype.initialize.apply(this, [i])
        },
        serialize: function() {
            return {
                _objectType: r.ROAD_CLOSURE,
                action: n.TYPE.DELETE,
                attributes: {
                    id: this.closure.getID(),
                    segID: this.closure.segID
                }
            }
        },
        doAction: function() {
            return W.model.repos.roadClosures.remove(this.closure)
        },
        redoAction: function() {
            return this.doAction()
        },
        undoAction: function() {
            return W.model.repos.roadClosures.put(this.closure)
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l, u;
    n = i(5),
    r = i(3),
    u = i(113),
    s = OL.Class(n, {
        GEOMETRY_FIELDS: ["geometry", "fractionPoint"],
        houseNumberSet: null ,
        houseNumber: null ,
        initialize: function(e, t, i) {
            n.prototype.initialize.call(this, i),
            this.houseNumberSet = e,
            this.houseNumber = t
        },
        destroy: function() {
            return this.houseNumberSet = null ,
            this.houseNumber = null ,
            n.prototype.destroy.apply(this, arguments)
        },
        doAction: function() {
            return this.houseNumber.id = this.model.houseNumbers.generateUniqueID(),
            this.houseNumberSet.numbers.push(this.houseNumber),
            this.model.houseNumbers.changed(this.houseNumberSet),
            !0
        },
        undoAction: function() {
            return this.houseNumberSet.numbers = this.houseNumberSet.numbers.remove(this.houseNumber),
            this.model.houseNumbers.changed(this.houseNumberSet)
        },
        redoAction: function() {
            return this.houseNumberSet.numbers.push(this.houseNumber),
            this.model.houseNumbers.changed(this.houseNumberSet)
        },
        serialize: function() {
            var e, t;
            return e = {
                number: this.houseNumber.number,
                id: this.houseNumber.id,
                segID: this.houseNumberSet.id,
                geometry: this.houseNumber.geometry,
                fractionPoint: this.houseNumber.fractionPoint,
                forced: this.houseNumber.forced
            },
            t = {
                _objectType: this.houseNumberSet.type,
                action: n.TYPE.ADD,
                attributes: e
            }
        },
        CLASS_NAME: "Waze.Action.AddHouseNumber"
    }),
    o = OL.Class(n, {
        houseNumberSet: null ,
        houseNumber: null ,
        initialize: function(e, t, i) {
            n.prototype.initialize.call(this, i),
            this.houseNumberSet = e,
            this.houseNumber = t
        },
        destroy: function() {
            return this.houseNumberSet = null ,
            this.houseNumber = null ,
            n.prototype.destroy.apply(this, arguments)
        },
        doAction: function() {
            return this.houseNumberSet.numbers = this.houseNumberSet.numbers.remove(this.houseNumber),
            this.model.houseNumbers.changed(this.houseNumberSet),
            !0
        },
        undoAction: function() {
            return this.houseNumberSet.numbers.push(this.houseNumber),
            this.model.houseNumbers.changed(this.houseNumberSet)
        },
        redoAction: function() {
            return this.houseNumberSet.numbers = this.houseNumberSet.numbers.remove(this.houseNumber),
            this.model.houseNumbers.changed(this.houseNumberSet)
        },
        serialize: function() {
            var e, t;
            return e = {
                id: this.houseNumber.id,
                segID: this.houseNumberSet.id
            },
            t = {
                _objectType: this.houseNumberSet.type,
                action: n.TYPE.DELETE,
                attributes: e
            }
        },
        CLASS_NAME: "Waze.Action.DeleteHouseNumber"
    }),
    a = OL.Class(r, {
        newSet: null ,
        houseNumber: null ,
        newHouseNumber: null ,
        oldParent: null ,
        initialize: function(e, t, i) {
            r.prototype.initialize.call(this, i),
            this.houseNumber = e,
            this.newSet = t
        },
        destroy: function() {
            return this.houseNumber = null ,
            this.newSet = null ,
            this.oldParent = null ,
            r.prototype.destroy.apply(this, arguments)
        },
        doAction: function() {
            return this.newHouseNumber = this.houseNumber.clone(),
            this.oldParent = this.newHouseNumber.parent,
            this.newHouseNumber.parent = this.newSet,
            this.doSubAction(new o(this.houseNumber.parent,this.houseNumber)),
            this.doSubAction(new s(this.newSet,this.newHouseNumber)),
            !0
        },
        undoAction: function() {
            return r.prototype.undoAction.apply(this, arguments),
            this.houseNumber.parent = this.oldParent
        },
        redoAction: function() {
            return r.prototype.redoAction.apply(this, arguments),
            this.newHouseNumber.parent = this.newSet
        },
        CLASS_NAME: "Waze.Action.ReplaceHouseNumberSegment"
    }),
    l = OL.Class(r, {
        houseNumberSet: null ,
        houseNumber: null ,
        newHouseNumber: null ,
        initialize: function(e, t, i, n) {
            r.prototype.initialize.call(this, n),
            this.houseNumber = e,
            this.houseNumberSet = t,
            this.fractionPoint = i
        },
        destroy: function() {
            return this.fractionPoint = null ,
            this.houseNumber = null ,
            this.houseNumberSet = null ,
            this.newHouseNumber = null ,
            r.prototype.destroy.apply(this, arguments)
        },
        doAction: function() {
            var e, t;
            return this.newHouseNumber = this.houseNumber,
            e = new OL.Geometry.Point(this.fractionPoint.lonlat.lon,this.fractionPoint.lonlat.lat),
            this.fractionPoint.closestSegment.getID() !== this.houseNumber.parent.id ? (t = new a(this.houseNumber,this.houseNumberSet,null ),
            this.doSubAction(t),
            this.doSubAction(new u(t.newSet,t.newHouseNumber,{
                fractionPoint: e
            })),
            this.newHouseNumber = t.newHouseNumber) : this.doSubAction(new u(this.houseNumber.parent,this.houseNumber,{
                fractionPoint: e
            })),
            !0
        },
        CLASS_NAME: "Waze.Action.UpdateFractionPoint"
    }),
    e.exports = {
        AddHouseNumber: s,
        DeleteHouseNumber: o,
        ReplaceHouseNumberSegment: a,
        UpdateFractionPoint: l
    }
}
, function(e, t, i) {
    var n, s, r, o, a, l, u = {}.hasOwnProperty;
    s = i(3),
    l = i(7),
    o = i(2),
    a = i(58),
    n = i(5),
    r = OL.Class(s, {
        initialize: function(e, t, i, n, r, o) {
            return this.fromSeg = e,
            this.node = t,
            this.toSeg = i,
            this.restrictions = n,
            this.isDifficult = r,
            s.prototype.initialize.apply(this, [o])
        },
        doAction: function() {
            var e, t, i, n, s, r;
            this.fromSegFwd = this.fromSeg.attributes.toNodeID === this.node.getID(),
            this.toSegFwd = this.toSeg.attributes.fromNodeID === this.node.getID(),
            i = this.fromSegFwd ? "toRestrictions" : "fromRestrictions",
            e = {},
            t = this.fromSeg.getRestrictionsAtNode(this.node);
            for (s in t)
                u.call(t, s) && (n = t[s],
                e[s] = n.map(function(e) {
                    return e.clone()
                }));
            return this.isDifficult && this.restrictions.push(a.createDifficult()),
            e[this.toSeg.getID()] = this.restrictions,
            r = {},
            r[i] = e,
            this.doSubAction(new l(this.fromSeg,r,{
                dontSerialize: !0
            }))
        },
        serialize: function() {
            var e, t;
            return e = {
                connection: {
                    fromSegID: this.fromSeg.getID(),
                    toSegID: this.toSeg.getID(),
                    fromSegFwd: this.fromSegFwd,
                    toSegFwd: this.toSegFwd
                },
                restrictions: this.restrictions
            },
            t = {
                _objectType: o.RESTRICTION,
                action: n.TYPE.UPDATE,
                attributes: e
            }
        },
        CLASS_NAME: "W.Action.ModifyConnectionRestriction"
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o, a;
    s = i(3),
    a = i(7),
    o = i(2),
    n = i(5),
    r = OL.Class(s, {
        initialize: function(e, t, i, n) {
            return this.junction = e,
            this.path = t,
            this.navigable = i,
            this.path = this.path.clone(),
            this.path.set({
                navigable: this.navigable
            }),
            s.prototype.initialize.apply(this, [n])
        },
        doAction: function() {
            var e;
            return e = this.junction.attributes.connections.map(function(e) {
                return e.clone()
            }),
            this.navigable ? e.push(this.path) : e = _.reject(e, function(e) {
                return function(t) {
                    return t.equals(e.path)
                }
            }(this)),
            this.doSubAction(new a(this.junction,{
                connections: e
            },{
                dontSerialize: !0
            }))
        },
        serialize: function() {
            var e, t;
            return e = this.navigable ? n.TYPE.ADD : n.TYPE.DELETE,
            t = {
                _objectType: o.JUNCTION_NC,
                action: e,
                attributes: this.path
            }
        },
        CLASS_NAME: "Waze.Action.ModifyJunctionPath"
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    n = i(5),
    s = OL.Class(n, {
        GEOMETRY_FIELDS: ["geometry", "fractionPoint"],
        houseNumberSet: null ,
        houseNumber: null ,
        newGeometry: null ,
        oldGeometry: null ,
        newFraction: null ,
        oldFraction: null ,
        changedState: !1,
        initialize: function(e, t, i, s) {
            n.prototype.initialize.call(this, s),
            this.houseNumber = e,
            this.houseNumberSet = this.houseNumber.parent,
            this.newGeometry = i.clone(),
            this.oldGeometry = t,
            this.oldFraction = e.fractionPoint.clone()
        },
        destroy: function() {
            return this.houseNumberSet = null ,
            this.houseNumber = null ,
            this.newGeometry = null ,
            this.oldGeometry = null
        },
        doAction: function() {
            return this.newFraction = this.houseNumber.getFractionFromProjection(),
            this.houseNumber.geometry = this.newGeometry.clone(),
            this.houseNumber.fractionPoint = this.newFraction,
            this.houseNumberSet.state || (this.changedState = !0,
            this.houseNumberSet.state = OL.State.UPDATE),
            this.model.houseNumbers.changed(this.houseNumberSet)
        },
        undoAction: function() {
            return this.houseNumber.geometry = this.oldGeometry,
            this.houseNumber.fractionPoint = this.oldFraction,
            this.changedState && (this.houseNumberSet.state = null ),
            this.model.houseNumbers.changed(this.houseNumberSet)
        },
        redoAction: function() {
            return this.houseNumber.geometry = this.newGeometry.clone(),
            this.houseNumber.fractionPoint = this.newFraction,
            this.changedState && (this.houseNumberSet.state = OL.State.UPDATE),
            this.model.houseNumbers.changed(this.houseNumberSet)
        },
        serialize: function() {
            var e, t;
            return e = {
                segID: this.houseNumberSet.id,
                id: this.houseNumber.id,
                geometry: this.newGeometry,
                fractionPoint: this.newFraction
            },
            t = {
                _objectType: this.houseNumberSet.type,
                action: n.TYPE.UPDATE,
                attributes: e
            }
        },
        CLASS_NAME: "Waze.Action.UpdateHouseNumberGeometry"
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(5),
    s = OL.Class(n, {
        prevApproved: null ,
        request: null ,
        initialize: function(e, t, i, s) {
            this.venue = e,
            this.request = t,
            this.approved = i,
            n.prototype.initialize.call(this, s)
        },
        doAction: function() {
            return this.prevApproved = this.request.get("approved"),
            this.request.set({
                approved: this.approved
            }),
            this.model.venues.changed(this.venue)
        },
        undoAction: function() {
            return this.request.set({
                approved: this.prevApproved
            }),
            this.model.venues.changed(this.venue)
        },
        redoAction: function() {
            return this.request.set({
                approved: this.approved
            }),
            this.model.venues.changed(this.venue)
        },
        serialize: function() {
            var e;
            return e = {
                _objectType: "venueUpdateRequest",
                action: "UPDATE",
                attributes: {
                    venueID: this.venue.getID(),
                    id: this.request.id,
                    approve: this.approved
                }
            }
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r;
    n = i(5),
    s = i(2),
    r = OL.Class(n, {
        initialize: function(e, t) {
            return this.closure = e,
            n.prototype.initialize.apply(this, [t])
        },
        serialize: function() {
            return {
                _objectType: s.ROAD_CLOSURE,
                action: n.TYPE.UPDATE,
                attributes: {
                    reason: this.closure.reason,
                    location: this.closure.location,
                    segID: this.closure.segID,
                    id: this.closure.id,
                    startDate: this.closure.startDate,
                    endDate: this.closure.endDate,
                    forward: this.closure.forward,
                    permanent: this.closure.permanent,
                    eventId: this.closure.eventId
                }
            }
        },
        doAction: function() {}
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d = {}.hasOwnProperty;
    s = i(54),
    r = i(502),
    o = i(114),
    a = i(498),
    l = i(126),
    u = i(506),
    c = i(21),
    n = Backbone.Model.extend({
        defaults: {
            loading: !0,
            loadingFeatures: !1,
            loggedIn: null ,
            sandbox: !1,
            sessionExpired: !1,
            editing: !1,
            featureSelected: !1,
            user: null ,
            mode: o.DEFAULT
        },
        layout: null ,
        modeController: null ,
        initialize: function() {
            return this._urlParams = OL.Util.getParameters(window.location.href)
        },
        start: function() {
            return this.atlas = new a,
            this.layout = new r({
                model: this
            }),
            this.modeController = new u({
                model: this,
                layout: this.layout
            }),
            this.listenTo(this.modeController, s.STATE_CHANGED, this.trigger.bind(this, s.STATE_CHANGED)),
            $.when(l.getCurrent()).done(function(e) {
                return function(t) {
                    return W.location = t,
                    e._redirectToLocation(),
                    W.location.redirectToLocale(),
                    e.atlas.heft(e).done(function() {
                        return e._onDependenciesReady()
                    })
                }
            }(this))
        },
        _redirectToLocation: function() {
            var e;
            if ((null != (e = this._urlParams.env) ? e.length : void 0) > 0 && W.location.code !== this._urlParams.env)
                return W.location.change(this._urlParams.env),
                window.location.reload()
        },
        _onDependenciesReady: function() {
            return this.loginManager = W.loginManager,
            this.loginManager.events.on({
                login: this._onLoginChanged,
                sessionExpired: this._onSessionExpired,
                logout: this._onLogout,
                scope: this
            }),
            this.loginManager.getLoggedInUser().always(function(e) {
                return function() {
                    return e.set("loading", !1),
                    e.layout.render(),
                    e._setLoggedInUser(),
                    $(window).on("beforeunload", e._onBeforeUnload.bind(e)),
                    e.modeController.activate(),
                    e._restoreState()
                }
            }(this))
        },
        _onBeforeUnload: function(e) {
            var t;
            if (!this.modeController.canExitMode() && !this.isSandboxMode())
                return t = e || window.event,
                t && (t.returnValue = I18n.t("edit.unsaved_changes")),
                I18n.t("edit.unsaved_changes")
        },
        _onLoginChanged: function(e) {
            return this.get("sessionExpired") ? this._processRelogin() : (this._setLoggedInUser(),
            this._setSandboxMode(!1))
        },
        _processRelogin: function() {
            return this.loginManager.returningUser ? this._setSessionExpired(!1) : this._onLogout()
        },
        _onSessionExpired: function(e) {
            return this._setSessionExpired(!0)
        },
        _onLogout: function() {
            return W.model.actionManager.clear(),
            window.location.reload()
        },
        _setEditing: function() {
            var e;
            return e = this.isSandboxMode() || this.loginManager.isLoggedIn(),
            this.set("editing", e)
        },
        _setSandboxMode: function(e) {
            if (this.get("sandbox") !== e)
                return this.set("sandbox", e),
                this._setEditing(),
                W.controller.reload()
        },
        _setSessionExpired: function(e) {
            if (this.get("sessionExpired") !== e)
                return this.set("sessionExpired", e),
                this._setEditing()
        },
        _setLoggedInUser: function() {
            return this.set({
                user: this.loginManager.user,
                loggedIn: this.loginManager.isLoggedIn()
            }),
            this._setEditing(),
            W.controller.activate()
        },
        isLoggedIn: function() {
            return this.get("loggedIn")
        },
        isEditingMode: function() {
            return this.get("editing")
        },
        isSandboxMode: function() {
            return this.get("sandbox")
        },
        activateSandboxMode: function() {
            return this._setSandboxMode(!0)
        },
        requestModeChange: function(e) {
            var t;
            return t = {
                success: !1,
                error: ""
            },
            this.modeController.canExitMode() ? t.success = this.set({
                mode: e
            }) : t.error = this.modeController.getExitError(),
            t
        },
        getState: function() {
            var e;
            return e = {
                mode: this.get("mode")
            },
            _.extend(e, this.modeController.getState())
        },
        _restoreState: function() {
            return this._restoreMode(),
            this._restoreRepositoryFilters()
        },
        _restoreMode: function() {
            var e;
            return this._urlParams.mode && (e = parseInt(this._urlParams.mode, 10),
            o.isValid(e) && this.set("mode", e)),
            this.modeController.restore(this._urlParams)
        },
        _restoreRepositoryFilters: function() {
            var e, t, i, n, s, r;
            s = this._urlParams,
            r = [];
            for (t in s)
                d.call(s, t) && (i = s[t],
                n = t.split(W.Config.permalink.filterSuffix),
                n.length > 1 ? (e = n[0],
                r.push(W.model.repositoryFilters.set(e, i))) : r.push(void 0));
            return r
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h, p, g, m, f, v, y, b, _, w, S, E, C, L, A, M;
    s = i(541),
    r = i(673),
    o = i(499),
    a = i(452),
    l = i(501),
    u = i(602),
    c = i(451),
    d = i(1079),
    h = i(116),
    p = i(543),
    g = i(542),
    m = i(681),
    f = i(296),
    v = i(450),
    y = i(545),
    b = i(21),
    w = i(520),
    S = i(632),
    E = i(644),
    C = i(507),
    L = i(513),
    A = i(650),
    M = i(1080),
    _ = i(17),
    n = OL.Class({
        initialize: function() {},
        heft: function(e) {
            return W.Config.init(),
            W.vent = new Backbone.Wreqr.EventAggregator,
            W.commands = new Backbone.Wreqr.Commands,
            W.reqres = new Backbone.Wreqr.RequestResponse,
            W.model = new a,
            W.model.loginManager = W.loginManager = new f,
            W.accelerators = new h,
            this._initKeyboard(),
            W.map = new v({
                app: e
            }),
            W.map.registerAccelerators(W.accelerators),
            W.accelerators.bindToMap(W.map),
            W.editingMediator = new l,
            W.selectionManager = new C(W.model,W.map.layers),
            W.geometryEditing = new c(W.selectionManager,W.editingMediator,W.map,W.model),
            new S({
                mediator: W.editingMediator
            }),
            new A({
                map: W.map,
                selectionManager: W.selectionManager
            }),
            new u({
                map: W.map,
                viewContainer: W.map.zoomBar.geoLocationContainer
            }),
            new w({
                mediator: W.editingMediator,
                map: W.map
            }),
            new M($("#tutorial-dialog")),
            this._heftController(),
            this._heftMarx(),
            this._heftModules(),
            $.Deferred().resolve()
        },
        _initKeyboard: function() {
            return W.accelerators.registerDefaultShortcuts(),
            W.accelerators.restore(),
            new d,
            W.accelerators.activate()
        },
        _heftController: function() {
            return W.snapshotManager = new L(W.model.actionManager),
            W.map.setSnapshotManager(W.snapshotManager),
            W.controller = new o({
                snapshotManager: W.snapshotManager
            }),
            new E({
                controller: W.controller,
                mediator: W.editingMediator
            }),
            W.editingMediator.activate(),
            W.map.initMapState(W.selectionManager, W.app),
            W.map.setEditingMediator(W.editingMediator)
        },
        _heftMarx: function() {
            var e, t, i, n, o, a;
            if (W.Config.chat.enable)
                return a = new y(W.model),
                i = new p(W.model,a,W.map),
                n = new g(W.model,a,i),
                o = new m({
                    model: n,
                    map: W.map
                }),
                e = new s.Chat(W.model,a),
                t = new r({
                    model: e,
                    marx: a,
                    liveUsersPresenter: o,
                    map: W.map
                }),
                W.model.chat = e,
                W.model.liveUsers = n
        },
        _heftModules: function() {
            var e;
            return e = {
                map: W.map
            },
            _.getEntryPoints().forEach(function(t) {
                return t(e)
            })
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h = {}.hasOwnProperty;
    d = i(6),
    n = i(1075),
    u = i(31),
    a = i(1054),
    l = i(131),
    c = i(1035),
    s = i(3),
    o = i(449),
    r = OpenLayers.Class(n, {
        events: null ,
        scale: null ,
        zoom: null ,
        oldScale: null ,
        keepObjects: !1,
        app: null ,
        model: null ,
        map: null ,
        selectionManager: null ,
        serializer: null ,
        operationSerializor: null ,
        initialize: function(e) {
            n.prototype.initialize.apply(this, [e]),
            OpenLayers.Util.extend(this, e),
            this.app = W.app,
            this.model = W.model,
            this.map = W.map,
            this.descartes = new o(this.map),
            this.selectionManager = W.selectionManager,
            this.events = new OpenLayers.Events(this),
            this.serializer = new u,
            this.operationSerializor = new a,
            this.loadingOperation = {
                id: "pending.road_data"
            },
            this.snapshotManager.on("change:state", this.reload, this),
            this.selectionManager.events.on({
                selectionchanged: this._onSelectionChange,
                scope: this
            })
        },
        activate: function() {
            var e;
            return e = n.prototype.activate.apply(this, arguments),
            e && this.map.events.on({
                moveend: function() {
                    return this.updateModel(!1)
                },
                changelayer: this.onLayerVisibilityChange,
                scope: this
            }),
            this.reload(),
            e
        },
        deactivate: function() {
            var e;
            return e = n.prototype.deactivate.call(this, arguments),
            e && this.map.events.un({
                moveend: function() {
                    return this.updateModel(!1)
                },
                changelayer: this.onLayerVisibilityChange,
                scope: this
            }),
            e
        },
        reload: function() {
            return this.model.clear(),
            this.updateModel(!1)
        },
        updateModel: function(e) {
            var t, i, n, s, r, o;
            if (n = {},
            this.keepObjects = e,
            this.oldScale = this.scale,
            this.scale = this.map.getScale(),
            this.zoom = this.map.getZoom(),
            t = this.descartes.currentDataBounds,
            null !== t) {
                i = {
                    zoomChanged: this.scale !== this.oldScale,
                    scale: this.scale,
                    bounds: t
                },
                r = this.model.repos;
                for (s in r)
                    h.call(r, s) && (o = r[s],
                    o.active && OL.Util.extend(n, o.updateDataExtent(this.map.calculateBounds(), this.scale, this.zoom)));
                return Object.keys(n).isEmpty() ? void 0 : (this.app.isSandboxMode() && (n.sandbox = !0),
                this.sendReadFeatures(n, t))
            }
        },
        onLayerVisibilityChange: function(e) {
            var t, i, n, s, r, o, a, l, u, c, d, h, p, g, m, f;
            if ("visibility" === e.property) {
                if (r = e.layer,
                g = r.repo,
                f = r.getVisibility(),
                m = !1,
                g && r.toggleRepo) {
                    for (t = 0,
                    o = g.length; t < o; t++)
                        d = g[t],
                        d.setActive(f);
                    m = !0
                }
                if (g && r.toggleFilter) {
                    for (i = 0,
                    a = g.length; i < a; i++)
                        d = g[i],
                        d[r.toggleFilter] = f;
                    m = !0
                }
                if (m && this.updateModel(!0),
                r.parentLayer && f === !0 && r.parentLayer.setVisibility(!0),
                r.childLayers && f === !1)
                    for (h = r.childLayers,
                    n = 0,
                    l = h.length; n < l; n++)
                        s = h[n],
                        s.setVisibility(!1);
                if (r.childLayers && f === !0)
                    for (p = r.childLayers,
                    c = 0,
                    u = p.length; c < u; c++)
                        s = p[c],
                        s.toggleable || s.setVisibility(!0);
                return !0
            }
        },
        sendReadFeatures: function(e, t) {
            var i;
            null != (i = this.readRequest) && i.abort(),
            this.events.triggerEvent("loadstart"),
            W.vent.trigger("operationPending", {
                operation: this.loadingOperation
            }),
            null != this.model.lastTransactionID && (e.mapVersionID = this.model.lastTransactionID),
            this.snapshotManager.isSnapshotOn() && (e.snapshot = !0),
            this.app.set("loadingFeatures", !0),
            this.readRequest = this.descartes.getFeatures(e).done(function(e) {
                return function(i) {
                    return e.serializer.read(i),
                    e.model.mergeObjects(t, i, e.keepObjects)
                }
            }(this)).always(function(e) {
                return function() {
                    return e.events.triggerEvent("loadend"),
                    W.vent.trigger("operationDone", {
                        operation: e.loadingOperation
                    }),
                    e.app.set("loadingFeatures", !1),
                    e.keepObjects = !1,
                    e.readRequest = null
                }
            }(this))
        },
        save: function(e) {
            var t;
            return null == e && (e = {}),
            t = $.Deferred(),
            d.protect("saving", function(i) {
                return function() {
                    var n, s;
                    return n = e.actions || i.model.actionManager.getActions(),
                    s = i._serializeActions(n),
                    s = i.operationSerializor.write(s),
                    i.descartes.postFeatures(s, i.model.getChangesExtent(), e.ignoreWarnings).done(function(e) {
                        return i._processSaveResponse(e),
                        t.resolve({
                            pendingEdits: i._getPendingEdits(e),
                            saveCount: i._getSaveCount(e),
                            unsavedFeatures: e.unsavedFeatures
                        })
                    }).fail(function(e) {
                        var n, s;
                        return n = i._parseErrorResponse(e),
                        t.reject(n),
                        W.Report.generalAction("save_error", null != (s = n[0]) ? s.get("code") : void 0)
                    }),
                    W.Report.generalAction("save_clicked", i.model.actionManager.unsavedActionsNum())
                }
            }(this)),
            t
        },
        _serializeActions: function(e) {
            var t, i;
            return i = new c,
            t = new s,
            t.subActions = e,
            t.accept(i),
            i.getResult()
        },
        _getPendingEdits: function(e) {
            var t, i;
            return t = (null != (i = e.pendingEdits) ? i.venues : void 0) || [],
            {
                venues: this.model.venues.getByIds(t)
            }
        },
        _getSaveCount: function(e) {
            var t, i, n, s, r, o;
            for (o = {},
            r = ["segments", "nodes", "venues", "bigJunctions"],
            i = 0,
            n = r.length; i < n; i++)
                s = r[i],
                t = e[s] || {},
                o[s] = Object.keys(t).length;
            return o
        },
        updateObject: function(e, t, i, n) {
            var s, r;
            return e ? t ? (r = t.id,
            delete t.id,
            e.merge(t),
            e.setID(r),
            n !== r && (e._prevID = n),
            delete this.model[i].objects[n],
            this.model[i].objects[r] = e,
            e.state = null ,
            e.fid && (e.fid = r),
            this.model[i].changed(e),
            this.model[i].synced(e)) : (e.state = OpenLayers.State.DELETE,
            void this.model[i].remove(e)) : (s = {},
            s[i] = {
                objects: [t]
            },
            this.serializer.read(s),
            void this.model[i].put(s[i].objects[0]))
        },
        _parseErrorResponse: function(e) {
            var t;
            return e.responseJSON ? this._parseErrors(e.responseJSON) : (t = new l({
                code: 500,
                details: "fatal server error"
            }),
            [t])
        },
        _parseErrors: function(e) {
            var t, i, n;
            return i = e.errorList ? e : {
                errorList: [e],
                errorLevel: "ERROR"
            },
            n = "WARNING" === e.errorLevel,
            t = i.errorList.map(function(e) {
                return e.ignorable = n,
                new l(e,{
                    parse: !0
                })
            }),
            t.length ? t : [new l({
                code: "default"
            })]
        },
        _processSaveResponse: function(e) {
            var t;
            return t = $.proxy(this.updateObject, this),
            d.protect("processing save results", function(i) {
                return function() {
                    var n, s, r, o, a, l, u, c, d, p;
                    for (u in e)
                        if (h.call(e, u) && (l = e[u],
                        i.model[u]))
                            for (c in l)
                                h.call(l, c) && (n = l[c],
                                $.when(i.model[u].get(c), n, u, c).done(t));
                    d = i.model.getModifiedObjects();
                    for (u in d)
                        if (h.call(d, u))
                            for (o = d[u],
                            p = o[OL.State.DELETE],
                            s = 0,
                            r = p.length; s < r; s++)
                                a = p[s],
                                i.model[u].remove(a);
                    return i.model.actionManager.clear(),
                    i.model.setLastTransactionID(e.mapVersionID)
                }
            }(this))
        },
        _onSelectionChange: function() {
            return this.app.set("featureSelected", this.selectionManager.hasSelectedItems()),
            this.app.trigger("selectionChanged", {
                selection: W.selectionManager.selectedItems
            })
        },
        CLASS_NAME: "Waze.Controller"
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o, a;
    s = i(586),
    r = i(509),
    o = i(659),
    a = i(668),
    n = Marionette.Object.extend({
        sidebarLayout: null ,
        feedControl: null ,
        initialize: function() {
            return this.feedControl = this._createFeed(),
            this.sidebarLayout = new r({
                model: W.app,
                selectionManager: W.selectionManager,
                editingMediator: W.editingMediator,
                dataModel: W.model,
                sandbox: W.app.isSandboxMode(),
                loggedIn: W.app.isLoggedIn(),
                feedControl: this.feedControl
            }),
            this.toolbarController = new o({
                actionManager: W.model.actionManager,
                app: W.app,
                dataModel: W.model,
                loginManager: W.loginManager,
                map: W.map,
                mediator: W.editingMediator,
                selectionManager: W.selectionManager
            }),
            this.topbarController = new a({
                dataModel: W.model,
                globalVent: W.vent,
                managedAreasRepository: W.model.managedAreas,
                map: W.map
            })
        },
        getSidebarLayout: function() {
            return this.sidebarLayout
        },
        getToolbarLayout: function() {
            return this.toolbarController.toolbarLayout
        },
        getTopbarLayout: function() {
            return this.topbarController.layout
        },
        enter: function() {
            var e;
            return null != (e = this.feedControl) ? e.refresh() : void 0
        },
        exit: function() {
            var e;
            return null != (e = this.feedControl) && e.destroy(),
            this.toolbarController.destroy(),
            this.topbarController.destroy(),
            W.selectionManager.unselectAll()
        },
        blockingExit: function() {
            return W.model.actionManager.canUndo()
        },
        blockingExitReason: function() {
            return I18n.t("modes.exit.save_changes")
        },
        _createFeed: function() {
            return this.feedControl = new s({
                container: W.map.panelRegion
            }),
            this.feedControl
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    s = i(21),
    n = OL.Class(s, {
        initialize: function() {
            return s.prototype.initialize.apply(this),
            this._editingLocks = {},
            this.set({
                drawing: !1,
                editingEnabled: !1,
                navigation: !1,
                advancedTools: !1
            })
        },
        activate: function() {
            return this.model = W.app,
            this.model.on("change:editing", this._onEditingChanged, this)
        },
        lockEditing: function() {
            var e;
            return e = _.uniqueId("editingLock_"),
            this._editingLocks[e] = !0,
            this.set("editingEnabled", !1),
            e
        },
        releaseEditing: function(e) {
            return delete this._editingLocks[e],
            this.set("editingEnabled", _.isEmpty(this._editingLocks))
        },
        _onEditingChanged: function() {
            var e, t, i;
            if (t = this.model.get("loggedIn"),
            i = this.model.get("user"),
            e = this.model.get("editing"),
            this.set("editingEnabled", e),
            this.set("advancedTools", t && i.isStaff),
            e)
                return this.set("navigation", !0)
        },
        setDrawingInProgress: function() {
            return this.set("drawing", !0)
        },
        setDrawingDone: function() {
            return this.set("drawing", !1)
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a;
    s = i(699),
    r = i(503),
    o = i(12),
    a = i(1074),
    n = i(508),
    e.exports = Marionette.LayoutView.extend({
        el: "body",
        ui: {
            descartesVersion: "#debug .version.descrates"
        },
        regions: {
            toolbarRegion: "#toolbar",
            topbarRegion: "#topbar-container",
            advancedToolsRegion: "#advanced-tools",
            sidebarRegion: "#sidebarContent",
            linksRegions: "#links"
        },
        bindings: {
            ".app-loading": {
                observe: "loading",
                visible: !0
            },
            ".app": {
                classes: {
                    "show-sidebar": "editing",
                    "not-visible": {
                        observe: "loading"
                    }
                }
            },
            "#sidebar": {
                observe: "editing",
                visible: !0,
                classes: {
                    "not-shown": {
                        observe: "editing",
                        onGet: function(e) {
                            return !e
                        }
                    }
                }
            }
        },
        initialize: function(e) {
            return this.listenTo(this.model, "change:user", this._renderStaffRegion),
            this.listenTo(this.topbarRegion, "show", this._resizeMap),
            this.addRegions({
                dialogRegion: s
            })
        },
        render: function() {
            return this.stickit(),
            this._initUI(),
            this._renderDescartesVersion(),
            this.linksRegions.show(new Marionette.ItemView({
                tagName: "waze-links",
                template: "templates/sidebar/links"
            }))
        },
        _resizeMap: function() {
            return W.map.resize()
        },
        _renderStaffRegion: function() {
            var e;
            if (e = this.model.get("user"),
            this.advancedToolsRegion.empty(),
            e.rank >= W.Config.advanced_tools.minRank)
                return this.advancedToolsRegion.show(new n({
                    model: this.model
                }))
        },
        _initUI: function() {
            return this.services = new a(W.model),
            this.services.activate(),
            this._initLoginLayout()
        },
        _initLoginLayout: function() {
            var e;
            return e = new r({
                map: W.map,
                model: this.model
            }),
            e.render()
        },
        _renderDescartesVersion: function() {
            return $.get(W.Config.api_base + "/info/version").done(function(e) {
                return function(t) {
                    return $(e.ui.descartesVersion).text(t.version)
                }
            }(this))
        }
    })
}
, function(e, t, i) {
    var n, s, r;
    r = i(505),
    s = i(504),
    n = Marionette.LayoutView.extend({
        el: "body",
        template: !1,
        bindings: {
            ".sandbox-message": {
                observe: "sandbox",
                visible: !0
            },
            "#popup-overlay": {
                observe: "editing",
                onGet: function(e) {
                    return !e
                },
                visible: !0,
                visibleFn: function(e, t, i) {
                    return t ? (W.map.showPopup(this.welcomePopup),
                    W.map.resize()) : this.welcomePopup.close()
                }
            }
        },
        initialize: function(e) {
            return this.map = e.map,
            W.loginManager.events.register("beforeloginchanged", null , function(e) {
                if (!W.app.isSandboxMode() && W.model.actionManager.canUndo())
                    return confirm(I18n.t("edit.unsaved_changes"))
            }),
            this.welcomePopup = new r,
            this.sandboxMessage = new s({
                el: $("<div/>").appendTo(this.map.footerMessages.div)[0]
            })
        },
        onRender: function() {
            return this.sandboxMessage.render(),
            this.stickit()
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    n = i(115),
    s = Marionette.ItemView.extend({
        template: "templates/login/sandbox-message",
        onRender: function() {
            return this.loginPresenter = new n({
                $el: this.$el.find(".login-form")
            }),
            this.loginPresenter.render(),
            this.loginPresenter.$el.on("click mousedown dragstart", "input", function(e) {
                return e.stopPropagation()
            }),
            this.loginPresenter.reset()
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o;
    r = i(1037),
    n = i(680),
    s = i(115),
    o = OL.Class(r, {
        template: "login/welcome-popup",
        events: {
            "click .playmode": "_onPlaymodeClicked"
        },
        ui: {
            languageSwitcher: "#welcome-popup .language-select"
        },
        initialize: function() {
            return $.extend(this.events, r.prototype.events),
            r.prototype.initialize.apply(this, arguments)
        },
        render: function() {
            var e;
            return e = r.prototype.render.apply(this, arguments),
            this.languageSwitcher = new n({
                el: this.ui.languageSwitcher
            }),
            this.loginPresenter = new s({
                $el: this.$el.find(".login-form")
            }),
            this.loginPresenter.render(),
            this.loginPresenter.reset(),
            e
        },
        _onPlaymodeClicked: function(e) {
            return e.preventDefault(),
            W.app.activateSandboxMode()
        },
        destroy: function() {
            return null != this.languageSwitcher && this.languageSwitcher.destroy(),
            null != this.loginPresenter && this.loginPresenter.destroy(),
            r.prototype.destroy.apply(this, arguments)
        }
    }),
    e.exports = o
}
, function(e, t, i) {
    var n, s, r, o, a, l, u;
    s = i(114),
    n = i(54),
    r = i(500),
    a = i(608),
    u = {},
    u["" + s.DEFAULT] = r,
    u["" + s.MTE] = a,
    o = u,
    l = Marionette.Object.extend({
        initialize: function(e) {
            return this.model = e.model,
            this.sidebarRegion = e.layout.sidebarRegion,
            this.toolbarRegion = e.layout.toolbarRegion,
            this.topbarRegion = e.layout.topbarRegion
        },
        activate: function() {
            return this.model.on("change:mode change:sandbox change:user", this._onModeChange, this),
            W.prefs.on("change:isImperial", this._onModeChange, this),
            this._onModeChange("activate")
        },
        restore: function(e) {
            var t;
            return "function" == typeof (t = this.mode).restore ? t.restore(e) : void 0
        },
        canExitMode: function() {
            return this.mode && !this.mode.blockingExit()
        },
        getExitError: function() {
            var e;
            return null != (e = this.mode) ? e.blockingExitReason() : void 0
        },
        getState: function() {
            var e;
            if (null != this.mode)
                return "function" == typeof (e = this.mode).getState ? e.getState() : void 0
        },
        _onModeChange: function() {
            return this._setMode(this.model.get("mode"))
        },
        _setMode: function(e) {
            var t, i, s;
            return null != (i = this.mode) && i.exit(),
            null != (s = this.mode) && s.off(n.STATE_CHANGED, this._onModeStateChange, this),
            t = o[e],
            this.mode = new t,
            this.toolbarRegion.show(this.mode.getToolbarLayout()),
            this.topbarRegion.show(this.mode.getTopbarLayout()),
            this.sidebarRegion.show(this.mode.getSidebarLayout()),
            this.mode.enter(),
            this.mode.on(n.STATE_CHANGED, this._onModeStateChange, this)
        },
        _onModeStateChange: function() {
            return this.trigger(n.STATE_CHANGED)
        }
    }),
    e.exports = l
}
, function(e, t, i) {
    var n, s, r, o, a = {}.hasOwnProperty;
    s = i(2),
    o = i(6),
    n = i(165),
    r = OpenLayers.Class({
        MAX_PATH_LENGTH: 25,
        selectedItems: null ,
        events: null ,
        layers: null ,
        _objectTypeToLayer: null ,
        selectControl: null ,
        multiple: null ,
        allowedSelections: null ,
        currentSelectionMask: 0,
        selectionCountByType: null ,
        model: null ,
        typeBitmap: null ,
        initialize: function(e, t, i) {
            var n, s, r, o;
            for (this.model = e,
            this.initAllowedSelections(),
            this.selectionCountByType = {},
            this._getSelectableLayers(t),
            o = this.layers,
            n = 0,
            r = o.length; n < r; n++)
                s = o[n],
                s.events.on({
                    featureselected: this.itemsSelected,
                    featureunselected: this.itemsUnselected,
                    visibilitychanged: this.layerVisibilityChanged,
                    beforefeatureselected: this.isSelectionValid,
                    selectpath: this.selectPath,
                    scope: this
                });
            OpenLayers.Util.extend(this, i),
            this.selectedItems = [],
            this.events = new OpenLayers.Events(this)
        },
        _getSelectableLayers: function(e) {
            var t, i, n, s, r;
            for (this.layers = _(e).filter(function(e) {
                return e.selectable
            }),
            this._objectTypeToLayer = {},
            s = this.layers,
            r = [],
            t = 0,
            n = s.length; t < n; t++)
                i = s[t],
                r.push(this._objectTypeToLayer[i.featureType] = i);
            return r
        },
        initAllowedSelections: function() {
            var e, t, i, n, r, o, l, u, c;
            u = Object.values(s).length,
            t = 1,
            this.typeBitmap = {},
            this.multiple = {};
            for (c in s)
                a.call(s, c) && (l = s[c],
                this.multiple[l] = l + "s",
                this.typeBitmap[l] = 1 << t,
                this.typeBitmap[l + "s"] = 1 << t + u,
                ++t);
            for (this.allowedSelections = {},
            l = s,
            o = [this.multiple[l.SEGMENT], l.BIG_JUNCTION, l.SEGMENT, l.NODE, l.LANDMARK],
            n = [],
            e = 0,
            i = o.length; e < i; e++)
                r = o[e],
                n.push(this.addAllowedSelection(r));
            return n
        },
        addAllowedSelection: function(e) {
            return this.allowedSelections[this.typeBitmap[e]] = !0
        },
        layerVisibilityChanged: function(e) {
            var t, i, n, s, r, o;
            if (n = e.object,
            !n.getVisibility()) {
                for (r = this.selectedItems,
                o = [],
                i = 0,
                s = r.length; i < s; i++)
                    t = r[i],
                    t.layer === n ? o.push(this.selectControl.unselect(t)) : o.push(void 0);
                return o
            }
        },
        setSelectControl: function(e) {
            return this.selectControl = e
        },
        destroy: function() {
            var e, t, i, n, s;
            for (n = this.layers,
            s = [],
            e = 0,
            i = n.length; e < i; e++)
                t = n[e],
                null != t && s.push(t.events.un({
                    featureselected: this.itemsSelected,
                    featureunselected: this.itemsUnselected,
                    visibilitychanged: this.layerVisibilityChanged,
                    beforefeatureselected: this.isSelectionValid,
                    scope: this
                }));
            return s
        },
        itemsSelected: function(e, t) {
            var i, n, s, r;
            for (t = t || {},
            e = e.feature,
            _(e).isArray() || (e = [e]),
            r = !1,
            i = 0,
            s = e.length; i < s; i++)
                n = e[i],
                this.selectedItems.contains(n) || (this.selectedItems.push(n),
                r = !0);
            if (this.updateSelectionMask(),
            !t.silent && r)
                return this.events.triggerEvent("selectionchanged", {
                    selected: this.selectedItems,
                    reversedSegments: this.getReversedSegments()
                })
        },
        selectPath: function(e) {
            var t, i, r, o, a, l, u, c, d;
            if (o = this.selectedItems[0].model,
            u = e.feature.model,
            !(this.selectedItems.length > 1 || o.type !== s.SEGMENT))
                return l = function(e) {
                    return e.attributes.primaryStreetID === o.attributes.primaryStreetID
                }
                ,
                c = function(e) {
                    return e.getID() === u.getID()
                }
                ,
                t = n.bfs(o, l, c),
                r = t[0],
                d = t[1],
                null === r && (i = n.bfs(o, function() {
                    return !0
                }, c),
                d = i[i.length - 1]),
                a = this._getPathFromVisitedSegments(d, o, u),
                a.length > this.MAX_PATH_LENGTH ? void 0 : this.select(a)
        },
        _getPathFromVisitedSegments: function(e, t, i) {
            var n, s, r;
            for (n = i.getID(),
            s = t.getID(),
            r = []; n !== s && null != n; )
                r.push(n),
                n = e[n];
            return r.push(t.getID()),
            r.map(function(e) {
                return W.model.segments.get(e)
            })
        },
        updateSelectionMask: function() {
            var e, t, i, n, s, r, l, u;
            for (this.selectionCountByType = {},
            s = this.selectedItems,
            t = 0,
            n = s.length; t < n; t++)
                i = s[t],
                o.defined(this.selectionCountByType[i.model.type]) || (this.selectionCountByType[i.model.type] = 0),
                this.selectionCountByType[i.model.type]++;
            this.currentSelectionMask = 0,
            r = this.selectionCountByType,
            l = [];
            for (u in r)
                a.call(r, u) && (e = r[u],
                1 === e ? l.push(this.currentSelectionMask += this.typeBitmap[u]) : l.push(this.currentSelectionMask += this.typeBitmap[this.multiple[u]]));
            return l
        },
        itemsUnselected: function(e) {
            var t, i, n, s;
            for (e = e.features,
            _(e).isArray() || (e = [e]),
            s = !1,
            t = 0,
            n = e.length; t < n; t++)
                i = e[t],
                this.selectedItems.contains(i) && (OpenLayers.Util.removeItem(this.selectedItems, i),
                s = !0);
            if (this.updateSelectionMask(),
            s)
                return this.events.triggerEvent("selectionchanged", {
                    selected: this.selectedItems,
                    reversedSegments: this.getReversedSegments()
                })
        },
        isSelectionValid: function(e) {
            var t, i, n, s;
            return t = e.feature,
            s = t.model.type,
            this.selectionCountByType[s] ? (n = this.currentSelectionMask | this.typeBitmap[this.multiple[s]],
            n &= ~this.typeBitmap[s]) : n = this.currentSelectionMask | this.typeBitmap[s],
            i = o.defined(this.allowedSelections[n]),
            i || (this.selectControl.unselectAll(),
            this.itemsSelected({
                feature: [t]
            })),
            !0
        },
        select: function(e) {
            var t;
            return this.selectControl.unselectAll(this.selectedItems),
            t = e.map(function(e) {
                return function(t) {
                    var i;
                    return i = e._objectTypeToLayer[t.type],
                    i.getVector(t)
                }
            }(this)),
            t = _.compact(t),
            this.selectControl.selectMultiple(t)
        },
        unselectAll: function() {
            return this.selectControl.unselectAll(this.selectedItems)
        },
        hasSelectedItems: function() {
            return !this.selectedItems.isEmpty()
        },
        getReversedSegments: function() {
            var e, t;
            return t = _(this.selectedItems).pluck("model"),
            e = {
                multipleConnectedComponents: !1,
                numReversed: 0
            },
            !this.selectionCountByType.segment >= 1 ? e : n.getReversedSegments(t)
        },
        CLASS_NAME: "Waze.SelectionManager"
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    s = i(698),
    n = Marionette.LayoutView.extend({
        template: "templates/sidebar/advanced-tools",
        tagName: "waze-staff-tools",
        regions: {
            snaptShotToggleRegion: "#snapshot-toggler"
        },
        events: {
            "click .env-link": "onLocationChanged"
        },
        onShow: function() {
            return this.snaptShotToggleRegion.show(new s({
                snapshotManager: W.snapshotManager
            }))
        },
        onRender: function() {
            return this.stickit()
        },
        onLocationChanged: function(e) {
            var t;
            return e.preventDefault(),
            t = $(e.target).data("env"),
            this.changeLocation(t)
        },
        changeLocation: function(e) {
            return W.location.changeAndRemovePermalink(e)
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a;
    n = i(10),
    s = i(579),
    o = i(511),
    a = i(512),
    r = Marionette.LayoutView.extend({
        template: "templates/sidebar/sidebar",
        className: "sidebar-layout",
        regions: {
            editRegion: "#edit-panel .contents",
            userRegion: "#user-info"
        },
        bindings: {
            "#edit-panel": {
                observe: "featureSelected",
                visible: !0,
                visibleFn: function(e, t, i) {
                    if (t && this._storeScroll(),
                    e.toggle(t),
                    t)
                        return this.$el.scrollTop(0)
                }
            },
            "#user-info": {
                observe: "featureSelected",
                visible: !0,
                onGet: function(e) {
                    return !e
                },
                visibleFn: function(e, t, i) {
                    if (e.toggle(t),
                    t)
                        return this._restoreScroll()
                }
            }
        },
        scrollTop: null ,
        initialize: function(e) {
            return this.dataModel = e.dataModel,
            this.selectionManager = e.selectionManager,
            this.editingMediator = e.editingMediator,
            this.featureEditorFactory = new s({
                selectionManager: this.selectionManager,
                dataModel: this.dataModel
            }),
            this.scrollTop = 0,
            this.listenTo(this.model, "selectionChanged", this._onSelectionChanged),
            this.editingMediator.on("change:editingEnabled", this._toggleEditing, this)
        },
        onRender: function() {
            return this.stickit()
        },
        onDestroy: function() {
            return this.editingMediator.off("change:editingEnabled", this._toggleEditing, this)
        },
        onShow: function() {
            return this._renderUserInfo()
        },
        _onSelectionChanged: function(e) {
            return e.selection.length ? (this.editView = this.featureEditorFactory.create(),
            this.editRegion.show(this.editView),
            this._toggleEditing()) : this.editRegion.empty()
        },
        _toggleEditing: function() {
            var e, t;
            return e = this.editingMediator.get("editingEnabled"),
            null != (t = this.editRegion.currentView) ? t.allowEditing(e) : void 0
        },
        _renderUserInfo: function() {
            return this.options.sandbox ? this.userRegion.show(new a) : this.options.loggedIn ? this.userRegion.show(new o({
                model: this.model,
                feedControl: this.options.feedControl
            })) : this.userRegion.empty()
        },
        _storeScroll: function() {
            return this.scrollTop = this.$el.scrollTop()
        },
        _restoreScroll: function() {
            return this.$el.scrollTop(this.scrollTop)
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    n = i(13),
    s = Marionette.ItemView.extend({
        template: "templates/sidebar/user-details",
        events: {
            "click .logout-link": "_onLogoutClicked"
        },
        onRender: function() {
            return this.$el.find("#permissions-info").tooltip({
                placement: "bottom",
                title: n.getHTML("templates/sidebar/user-permissions-tooltip", this.model),
                html: !0
            })
        },
        serializeData: function() {
            return this.model.getAttributes()
        },
        _onLogoutClicked: function() {
            return W.loginManager.logout()
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o;
    n = i(1038),
    r = i(510),
    s = i(694),
    o = Marionette.LayoutView.extend({
        template: "templates/sidebar/user-info",
        className: "flex-parent",
        ui: {
            feedContainer: "#sidepanel-feed",
            feedRefresh: ".feed-refresh"
        },
        regions: {
            userDetailsRegion: "#user-details",
            preferencesRegion: "#sidepanel-prefs"
        },
        initialize: function(e) {
            return this.user = this.model.get("user"),
            this.feedControl = e.feedControl
        },
        onShow: function() {
            return this.archiveControl = new n,
            W.map.addControl(this.archiveControl),
            this.archiveControl.activate(),
            this.archiveControl.reset(),
            this.preferencesRegion.show(new s({
                model: W.prefs
            })),
            this.userDetailsRegion.show(new r({
                model: this.user
            })),
            this.feedControl.render({
                el: this.ui.feedContainer
            }),
            $(this.ui.feedRefresh).click(function(e) {
                return function() {
                    return e.feedControl.refresh()
                }
            }(this))
        },
        onDestroy: function() {
            var e;
            return this.archiveControl = null ,
            null != (e = this.preferencesView) && e.destroy(),
            this.preferencesView = null
        },
        serializeData: function() {
            return {
                user: this.model.get("user")
            }
        }
    }),
    e.exports = o
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        template: "templates/sidebar/user-sandbox"
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = OL.Class({
        _snapshot: !1,
        initialize: function(e) {
            this._actionManager = e,
            this._actionManager.events.on({
                hasActions: this._onActionsChanged,
                noActions: this._onActionsChanged,
                scope: this
            })
        },
        isSnapshotOn: function() {
            return this._snapshot
        },
        canToggleOn: function() {
            return !this._actionManager.canSave()
        },
        toggle: function(e) {
            if (e !== this._snapshot)
                return e === !1 && this._actionManager.clear(),
                this._snapshot = e,
                this._actionManager.toggleSavingEnabled(!e),
                this.trigger("change:state")
        },
        _onActionsChanged: function() {
            return this.trigger("change:togglable")
        }
    }),
    _.extend(i.prototype, Backbone.Events),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    n = i(18),
    l = i(29),
    o = i(301),
    a = i(2),
    s = i(489),
    r = new OpenLayers.Class(OpenLayers.Control.Button,n,{
        keyboardCodes: null ,
        keyboardHandler: null ,
        initialize: function(e, t) {
            n.prototype.initialize.apply(this, [t]),
            OpenLayers.Control.prototype.initialize.apply(this, [t]),
            this.model = e,
            this.keyboardCodes = [OpenLayers.Event.KEY_DELETE],
            this.keyboardHandler = new o(this,{
                keydown: this.handleKeypress
            }),
            this.setEnabled(!1),
            W.selectionManager.events.register("selectionchanged", this, this._onSelectionChanged)
        },
        destroy: function() {
            return n.prototype.destroy.apply(this, arguments),
            W.selectionManager.events.unregister("selectionchanged", this, this._onSelectionChanged)
        },
        _onSelectionChanged: function(e) {
            var t;
            t = _(e.selected).pluck("model"),
            this.setEnabledByFeatures(t || [])
        },
        trigger: function() {
            var e, t, i;
            if (this.enabled && (t = this.features,
            !t.isEmpty())) {
                switch (t.first().type) {
                case a.NODE:
                    this.model.deleteNodes(t);
                    break;
                case a.SEGMENT:
                    e = !0,
                    i = t.some(function(e) {
                        return e.attributes.hasHNs
                    }),
                    t.length > 1 ? e = i ? window.confirm(I18n.t("edit.segment.delete_confirm.multiple_hn")) : window.confirm(I18n.t("edit.segment.delete_confirm.multiple")) : i && (e = window.confirm(I18n.t("edit.segment.delete_confirm.hn"))),
                    e && this.model.deleteSegments(t);
                    break;
                case a.BIG_JUNCTION:
                    this.model.actionManager.add(new s(t[0]));
                    break;
                default:
                    this.model.deleteObjects(t)
                }
                this.onFeatureDelete(t)
            }
        },
        setEnabledByFeatures: function(e) {
            var t, i, n, s;
            return !e || e.isEmpty() ? void this.setEnabled(!1) : (n = 1 === e.length && e.first().type === a.NODE,
            s = !e.isEmpty() && e.every(function(e) {
                return e.type === a.SEGMENT
            }),
            t = !1,
            n ? (i = e.first(),
            t = i.isDeleteable(this.model)) : t = s ? e.every(function(e) {
                return e.isDeletable()
            }) : e.first().isDeletable(),
            this.features = e,
            void this.setEnabled(t))
        },
        handleKeypress: function(e) {
            this.keyboardCodes.contains(e.keyCode) && 1 === this.features.length && this.trigger()
        },
        setEnabled: function(e, t) {
            n.prototype.setEnabled.apply(this, arguments),
            e ? this.keyboardHandler.activate() : this.keyboardHandler.deactivate()
        },
        onFeatureDelete: function(e) {}
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o;
    s = i(73),
    o = i(7),
    r = i(48),
    n = OL.Class(s, {
        mode: OL.Control.ModifyFeature.DRAG | OL.Control.ModifyFeature.ROTATE,
        RadiusHandleDistance: 50,
        dragBoundary: null ,
        MaxDragDistance: 150,
        initialize: function() {
            s.prototype.initialize.apply(this, arguments),
            this.dragControl.handlers.feature.geometryTypeMatches = function(e) {
                return e._sketch
            }
        },
        destroy: function() {
            return this.removeDragBoundary(),
            s.prototype.destroy.apply(this, arguments)
        },
        resetVertices: function() {
            if (this.dragControl.feature && this.dragControl.outFeature(this.dragControl.feature),
            this.dragHandle && (this.layer.destroyFeatures([this.dragHandle], {
                silent: !0
            }),
            this.dragHandle = null ),
            this.removeDragBoundary(),
            this.removeRadiusHandle(),
            this.feature)
                return this.cameraDraggable() && this.collectDragHandle(),
                this.feature.model.isGeometryEditable() && this.collectRadiusHandle(),
                this._originalGeometry = this.feature.geometry.clone()
        },
        removeDragBoundary: function() {
            if (this.dragBoundary)
                return this.layer.destroyFeatures([this.dragBoundary], {
                    silent: !0
                }),
                this.dragBoundary = null
        },
        removeRadiusHandle: function() {
            if (this.radiusHandle)
                return this.layer.destroyFeatures([this.radiusHandle], {
                    silent: !0
                }),
                this.radiusHandle = null
        },
        cameraDraggable: function() {
            return this.feature.model.isGeometryEditable() && this.map.getZoom() >= W.Config.cameras.minDragZoom
        },
        collectDragHandle: function() {
            var e, t, i, n, s, r, o;
            return t = this.feature.geometry,
            o = this.map.getResolution(),
            s = new OL.Geometry.Point(t.x,t.y),
            n = new OL.Feature.Vector(s),
            this.feature.model.attributes.originalPosition || (this.feature.model.attributes.originalPosition = new OL.Geometry.Point(t.x,t.y)),
            r = this.feature.model.attributes.originalPosition,
            this.dragBoundary = new OL.Feature.Vector(r.clone(),{},{
                pointRadius: this.MaxDragDistance / o,
                fillOpacity: .2,
                pointerEvents: "none"
            }),
            i = this.layer,
            e = this.MaxDragDistance,
            s.move = function(i, n) {
                var s, o;
                if (o = {
                    x: this.x + i,
                    y: this.y + n
                },
                s = Math.sqrt(Math.pow(o.y - r.y, 2) + Math.pow(o.x - r.x, 2)),
                OL.Geometry.Point.prototype.move.apply(this, arguments),
                s < e)
                    return t.x = o.x,
                    t.y = o.y,
                    t.clearBounds()
            }
            ,
            this.dragHandle = n,
            n._sketch = !0,
            n._cameraAnchor = !0,
            this.layer.addFeatures([this.dragHandle, this.dragBoundary], {
                silent: !0
            })
        },
        collectRadiusHandle: function() {
            var e, t, i, n, s, r;
            return t = this.feature,
            i = t.geometry,
            e = (t.model.attributes.azymuth - 90).toRad(),
            n = new OL.Geometry.Point(i.x,i.y),
            r = new OL.Geometry.Point(i.x + this.RadiusHandleDistance * this.map.getResolution() * Math.cos(e),i.y - this.RadiusHandleDistance * this.map.getResolution() * Math.sin(e)),
            s = new OL.Feature.Vector(r),
            this.originalAngle = t.model.attributes.azymuth,
            r.move = function(i, s) {
                var r, o;
                return OL.Geometry.Point.prototype.move.call(this, i, s),
                r = this.x - n.x,
                o = this.y - n.y,
                e = Math.atan2(o, r),
                t.model.attributes.azymuth = 450 - e.toDeg()
            }
            ,
            s._sketch = !0,
            s._cameraRotator = !0,
            this.radiusHandle = s,
            this.layer.addFeatures([this.radiusHandle], {
                silent: !0
            })
        },
        dragVertex: function(e, t) {
            var i;
            return i = e === this.dragHandle,
            i && this.removeRadiusHandle(),
            this.layer.drawFeature(this.feature)
        },
        dragComplete: function(e) {
            var t;
            return e === this.radiusHandle ? (t = this.feature.model.attributes.azymuth,
            this.feature.model.attributes.azymuth = this.originalAngle,
            this.model.actionManager.add(new o(this.feature.model,{
                azymuth: t
            }))) : this.onModification(this.feature),
            this.resetVertices()
        },
        CLASS_NAME: "Waze.Control.GeometryEditing.Camera"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a;
    n = i(73),
    a = i(7),
    o = i(48),
    r = i(517),
    s = OL.Class(n, {
        MIN_COMPONENTS: 4,
        initialize: function(e, t) {
            this.mode = OL.Control.ModifyFeature.RESHAPE | OL.Control.ModifyFeature.DRAG,
            null == this.markerLayer && (this.markerLayer = new OL.Layer.Markers("navigationPointMarkers",{
                displayInLayerSwitcher: !1
            })),
            t.map.addLayer(this.markerLayer),
            n.prototype.initialize.apply(this, arguments),
            this.dragControl.handlers.feature.geometryTypeMatches = function(e) {
                var t;
                return e._sketch || (null != (t = e.model) ? t.isSelected() : void 0) && e.model.isPoint()
            }
        },
        handleKeypress: function(e) {
            var t, i, s;
            return this.feature && this.deleteCodes.contains(e.keyCode) ? (s = this.dragControl.feature,
            (null != s && null != (t = s.geometry) && null != (i = t.parent) ? i.components.length : void 0) > this.MIN_COMPONENTS ? n.prototype.handleKeypress.apply(this, arguments) : void 0) : n.prototype.handleKeypress.apply(this, arguments)
        },
        destroy: function() {
            return this.removeNavigationPoint(),
            this.removeDragBoundry(),
            null != this.markerLayer && this.map.removeLayer(this.markerLayer),
            n.prototype.destroy.apply(this, arguments)
        },
        resetVertices: function() {
            var e;
            return n.prototype.resetVertices.apply(this, arguments),
            this.feature.model.isPoint() ? void this.removeNavigationPoint() : (e = this.feature.model.getNavigationPoint().point.toLonLat(),
            this.navigationPoint || (this.navigationPoint = new r(e,this.feature.geometry,this.map),
            this.navigationPoint.layer = this.markerLayer,
            this.navigationPoint.events.register("dragEnd", this, this.onNavigationPointChange),
            this.navigationPoint.events.register("drag", this, this.onNavigationPointDrag),
            this.markerLayer.addMarker(this.navigationPoint)),
            this.navigationPoint.setLandmarkGeometry(this.feature.geometry),
            this.navigationPoint.lonlat = e,
            this.markerLayer.drawMarker(this.navigationPoint))
        },
        onNavigationPointChange: function() {
            var e, t;
            return t = {
                point: this.navigationPoint.lonlat.toPoint(),
                entry: !0,
                exit: !0
            },
            e = new a(this.feature.model,{
                entryExitPoints: [t]
            }),
            e.eachGeometryField = function(e, t) {
                var i, n, s, r, o;
                for (r = e.entryExitPoints,
                o = [],
                i = 0,
                n = r.length; i < n; i++)
                    s = r[i],
                    o.push(t.call(this, "point", s.point, s));
                return o
            }
            ,
            this.removeDragBoundry(),
            this.model.actionManager.add(e)
        },
        onNavigationPointDrag: function() {
            if (!this.dragBoundary)
                return this.addDragBoundry()
        },
        addDragBoundry: function() {
            return this.dragBoundary = new OL.Feature.Vector(this.navigationPoint.dragBounds.toGeometry(),{},{
                fillOpacity: .2,
                pointerEvents: "none"
            }),
            this.layer.addFeatures([this.dragBoundary], {
                silent: !0
            })
        },
        removeDragBoundry: function() {
            return this.dragBoundary && this.layer.removeFeatures([this.dragBoundary], {
                silent: !0
            }),
            this.dragBoundary = null
        },
        removeNavigationPoint: function() {
            if (null != this.navigationPoint)
                return this.markerLayer.removeMarker(this.navigationPoint),
                this.navigationPoint.destroy(),
                this.navigationPoint = null
        },
        collectDragHandle: function() {
            var e, t, i;
            return e = _.max(this.feature.geometry.getVertices(), function(e) {
                return e.y
            }),
            i = new OpenLayers.Geometry.Point(e.x,e.y + 30 * this.map.getResolution()),
            t = new OpenLayers.Feature.Vector(i),
            i.move = function(e) {
                return function(t, n) {
                    return OpenLayers.Geometry.Point.prototype.move.call(i, t, n),
                    e.feature.geometry.move(t, n)
                }
            }(this),
            t.dragPoint = !0,
            t._sketch = !0,
            this.dragHandle = t,
            this.layer.addFeatures([this.dragHandle], {
                silent: !0
            })
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o;
    s = i(55),
    n = i(11),
    r = i(8),
    o = OL.Class(OL.Marker, {
        dragging: null ,
        dragConstraint: null ,
        MAX_DISTANCE_FROM_LANDMARK_METERS: 500,
        initialize: function(e, t, i) {
            var r;
            this.map = i,
            r = new n("navigation-point fa fa-crosshairs"),
            OL.Marker.prototype.initialize.call(this, e, r),
            this.setLandmarkGeometry(t),
            this.dragging = new s(this.map),
            this.dragging.down = function(e) {
                return function(t) {
                    return e.icon.$div.addClass("dragging"),
                    e.events.triggerEvent("dragStart", {
                        xy: null != t ? t.xy : void 0,
                        marker: e
                    })
                }
            }(this),
            this.dragging.move = function(t) {
                return function(i) {
                    return e = t.map.getLonLatFromViewPortPx(i.xy),
                    t.dragBounds.containsLonLat(e) || (e.lon < t.dragBounds.left && (e.lon = t.dragBounds.left),
                    e.lon > t.dragBounds.right && (e.lon = t.dragBounds.right),
                    e.lat > t.dragBounds.top && (e.lat = t.dragBounds.top),
                    e.lat < t.dragBounds.bottom && (e.lat = t.dragBounds.bottom)),
                    t.lonlat = e,
                    t.layer.drawMarker(t),
                    t.events.triggerEvent("drag", {
                        xy: i.xy,
                        marker: t
                    })
                }
            }(this),
            this.dragging.done = function(e) {
                return function(t) {
                    return e.icon.$div.removeClass("dragging"),
                    e.events.triggerEvent("dragEnd", {
                        xy: null != t ? t.xy : void 0,
                        marker: e
                    })
                }
            }(this),
            this.dragging.activate(this.icon.$div)
        },
        setLandmarkGeometry: function(e) {
            var t, i, n, s;
            return t = e.getBounds().clone(),
            s = new OL.LonLat(t.left,t.top),
            s.transform(this.map.getProjectionObject(), this.map.displayProjection),
            i = r.destinationOnPlane(s, 0, this.MAX_DISTANCE_FROM_LANDMARK_METERS),
            n = r.destinationOnPlane(s, 90, this.MAX_DISTANCE_FROM_LANDMARK_METERS),
            i.transform(this.map.displayProjection, this.map.getProjectionObject()),
            n.transform(this.map.displayProjection, this.map.getProjectionObject()),
            i = i.lon - t.left,
            n = n.lat - t.top,
            t.left -= i,
            t.right += i,
            t.top += n,
            t.bottom -= n,
            this.dragBounds = t
        },
        destroy: function() {
            return OL.Marker.prototype.destroy.apply(this, arguments),
            this.dragging.deactivate()
        }
    }),
    e.exports = o
}
, function(e, t) {
    var i;
    i = OL.Class(OL.Control, {
        googleAerialLayer: null ,
        $div: null ,
        $link: null ,
        destroy: function() {
            return this.map.events.un({
                changelayer: this.toggleVisibility,
                scope: this
            }),
            OL.Control.prototype.destroy.apply(this, arguments)
        },
        draw: function() {
            return OL.Control.prototype.draw.apply(this, arguments),
            this.map.events.on({
                changelayer: this.toggleVisibility,
                scope: this
            }),
            this.$div = $(this.div).addClass("google-permalink"),
            this.$link = $("<a/>").attr({
                target: "blank",
                href: "http://maps.google.com"
            }).appendTo(this.$div),
            this.div
        },
        toggleVisibility: function() {
            var e, t;
            return e = this.map.baseLayer,
            t = e && e.getVisibility(),
            this.$div.toggle(t)
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h, p = {}.hasOwnProperty;
    o = i(536),
    a = i(117),
    h = i(494),
    d = i(113),
    r = i(491),
    c = i(71),
    u = i(679),
    n = i(23),
    s = i(535),
    l = Marionette.Controller.extend({
        MIN_EDIT_ZOOM: 6,
        HOUSE_NUMBERS_SAVE_ERROR_CODE: 716,
        _editingLock: null ,
        model: null ,
        segments: null ,
        houseNumberSets: null ,
        layer: null ,
        markerLayer: null ,
        fractionPoint: null ,
        fractionLine: null ,
        originalGeometry: null ,
        updating: !1,
        lightboxView: null ,
        fogOfWar: null ,
        selectedNumber: null ,
        invalidHouseNumbers: null ,
        failedLoading: !1,
        enabled: !0,
        active: !1,
        showingForceDialog: !1,
        segmentStyle: {
            fill: {
                strokeColor: "#00ece3",
                strokeWidth: 7,
                graphicZIndex: 2
            }
        },
        editAreaStyle: {
            maskID: "HNAreaMask",
            fillColor: "black",
            graphicZIndex: 1
        },
        fractionLineStyle: {
            strokeWidth: 2,
            strokeColor: "white",
            strokeDashstyle: "dash",
            strokeDashArray: "8, 8"
        },
        fractionLinePaddingStyle: {
            strokeWidth: 4,
            strokeColor: "#000",
            strokeOpacity: .5,
            strokeDashstyle: "dash",
            strokeDashArray: "8, 8"
        },
        initialize: function() {
            return this.model = this.options.model,
            this.map = this.options.map,
            this.editable = this.options.editable,
            this.enabled = this.options.editable,
            this.segments = this.options.segments,
            this.lightboxView = new u({
                model: this.model,
                pm: this
            }),
            this.lightboxView.olEvents.register("closed", this, this.destroy),
            this.lightboxView.onSave = function(e) {
                return function() {
                    return e.onSave()
                }
            }(this),
            this.lightboxView.onAdd = function(e) {
                return function() {
                    return e.onAddClicked()
                }
            }(this),
            this.lightboxView.disabled = !this.options.editable,
            this._initLayers(),
            this._setupSegments()
        },
        _initLayers: function() {
            return this.layer = new OL.Layer.Vector("houseNumbers",{
                displayInLayerSwitcher: !1,
                renderers: [n],
                rendererOptions: {
                    zIndexing: !0
                }
            }),
            this.markerLayer = new OL.Layer.Markers("houseNumberMarkers",{
                displayInLayerSwitcher: !1
            }),
            this.map.addLayer(this.layer),
            this.map.addLayer(this.markerLayer),
            $(this.markerLayer.div).addClass("house-numbers-layer")
        },
        _setupSegments: function() {
            var e, t, i, n;
            return e = function() {
                var e, n, s, r;
                for (s = this.segments,
                r = [],
                e = 0,
                n = s.length; e < n; e++)
                    i = s[e],
                    t = i.geometry.clone(),
                    t.model = i,
                    r.push(t);
                return r
            }
            .call(this),
            this.joinedGeometry = new OL.Geometry.MultiLineString(e),
            n = function() {
                var e, t, n, s;
                for (n = this.segments,
                s = [],
                e = 0,
                t = n.length; e < t; e++)
                    i = n[e],
                    s.push(i.getID());
                return s
            }
            .call(this),
            this.model.houseNumbers.get(n).done(function(e) {
                return function(t) {
                    var i, n, s;
                    if (e.active) {
                        for (e.houseNumberSets = {},
                        i = 0,
                        n = t.length; i < n; i++)
                            s = t[i],
                            e.houseNumberSets[s.id] = s;
                        return e.render()
                    }
                }
            }(this)).fail(function(e) {
                return function() {
                    return e.failedLoading = !0,
                    e.lightboxView.render(),
                    e.lightboxView.showErrorMessage()
                }
            }(this)).always(function(e) {
                return function() {
                    return e.lightboxView.setLoading(!1)
                }
            }(this)),
            this.lightboxView.address = this.segments.first().getAddressDetails(),
            this.activate(),
            this.lightboxView.setLoading(!0)
        },
        onDrag: function(e) {
            return this.selectedNumber.model.calculateProjection(this.joinedGeometry),
            this.fractionPoint.lonlat = this.selectedNumber.model.projectionLonLat,
            this.selectedNumber.updateSide(),
            this.markerLayer.drawMarker(this.fractionPoint),
            this.selectedNumber.icon.forceReflow(),
            this.fractionLine.geometry.components[0].x = this.fractionPoint.lonlat.lon,
            this.fractionLine.geometry.components[0].y = this.fractionPoint.lonlat.lat,
            this.fractionLine.geometry.components[1].x = this.selectedNumber.lonlat.lon,
            this.fractionLine.geometry.components[1].y = this.selectedNumber.lonlat.lat,
            this.fractionLinePadding.geometry.components[0].x = this.fractionPoint.lonlat.lon,
            this.fractionLinePadding.geometry.components[0].y = this.fractionPoint.lonlat.lat,
            this.fractionLinePadding.geometry.components[1].x = this.selectedNumber.lonlat.lon,
            this.fractionLinePadding.geometry.components[1].y = this.selectedNumber.lonlat.lat,
            this.layer.drawFeature(this.fractionLinePadding),
            this.layer.drawFeature(this.fractionLine)
        },
        onDragEnd: function(e) {
            var t, i;
            if (!this.selectedNumber.isNew)
                return i = new OL.Geometry.Point(this.selectedNumber.lonlat.lon,this.selectedNumber.lonlat.lat),
                t = new c,
                this.model.actionManager.add(t),
                this.ignoreUpdates(function(e) {
                    return function() {
                        var n, s;
                        return e.selectedNumber.model.changedSegment() && (s = e.houseNumberSets[e.selectedNumber.model.closestSegment.getID()],
                        n = new r.ReplaceHouseNumberSegment(e.selectedNumber.model,s),
                        e.selectedNumber.model.geometry = e.originalGeometry.clone(),
                        t.doSubAction(n),
                        e.selectedNumber.model = n.newHouseNumber),
                        t.doSubAction(new h(e.selectedNumber.model,e.originalGeometry,i)),
                        t.doSubAction(new d(e.selectedNumber.model.parent,e.selectedNumber.model,{
                            forced: !1,
                            valid: !0
                        })),
                        e.selectedNumber.setValid(!0),
                        e.selectedNumber.setForced(!1)
                    }
                }(this)),
                this.originalGeometry = i.clone()
        },
        reset: function() {
            var e, t, i, n;
            for (this.adding && null != this.selectedNumber && this.selectedNumber.dragging.forceEnd(),
            this.adding = !1,
            n = this.markerLayer.markers,
            e = 0,
            t = n.length; e < t; e++)
                i = n[e],
                i.destroy();
            return this.markerLayer.clearMarkers(),
            this.fractionPoint = null ,
            this.layer.destroyFeatures(this.layer.features),
            this.editArea = null
        },
        render: function() {
            var e, t, i, n, s, r, o;
            if (!this.updating && this.active) {
                this.reset(),
                s = this.houseNumberSets;
                for (o in s)
                    if (p.call(s, o))
                        for (e = s[o],
                        r = e.numbers,
                        t = 0,
                        i = r.length; t < i; t++)
                            n = r[t],
                            this.createHouseNumber(n);
                return this.drawFogOfWar(),
                this.drawEditArea(),
                this.drawSegments()
            }
        },
        drawSegments: function() {
            var e, t;
            return t = function() {
                var t, i, n, s;
                for (n = this.segments,
                s = [],
                t = 0,
                i = n.length; t < i; t++)
                    e = n[t],
                    s.push(new OL.Feature.Vector(e.geometry.clone(),{},this.segmentStyle.fill));
                return s
            }
            .call(this),
            this.layer.addFeatures(t)
        },
        drawEditArea: function() {
            var e, t;
            return this.editAreas = function() {
                var i, n;
                i = this.houseNumberSets,
                n = [];
                for (t in i)
                    p.call(i, t) && (e = i[t],
                    n.push(new OL.Feature.Vector(e.editArea,{},this.editAreaStyle)));
                return n
            }
            .call(this),
            this.layer.addFeatures(this.editAreas)
        },
        createHouseNumber: function(e) {
            var t;
            return e.calculateProjection(this.joinedGeometry),
            t = new o(e,new OL.LonLat(e.geometry.x,e.geometry.y),this.map),
            this.markerLayer.addMarker(t),
            t.events.register("click:input", this, this.onMarkerClick),
            t.events.register("change:number", this, this.onValueChanged),
            t.events.register("delete", this, this.onMarkerDelete),
            t.events.register("unselect", null , function(e) {
                return function() {
                    return e.unselectNumber(e.selectedNumber)
                }
            }(this)),
            t.events.register("drag", this, this.onDrag),
            t.events.register("dragEnd", this, this.onDragEnd),
            t.layer = this.markerLayer,
            t
        },
        onValueChanged: function(e) {
            var t, i;
            if (i = e.number,
            t = e.object,
            t.isNew && "" !== i)
                t.model.number = i,
                delete t.isNew,
                t.model.geometry = new OL.Geometry.Point(t.lonlat.lon,t.lonlat.lat),
                this.model.actionManager.add(new r.AddHouseNumber(t.model.parent,t.model));
            else if ("" !== i)
                return this.model.actionManager.add(new d(t.model.parent,t.model,{
                    number: i,
                    forced: !1,
                    valid: !0
                }))
        },
        onMarkerDelete: function(e) {
            var t;
            return t = e.object,
            this.unselectNumber(t),
            t.isNew ? this.cancelAdd() : this.model.actionManager.add(new r.DeleteHouseNumber(t.model.parent,t.model))
        },
        onMarkerClick: function(e) {
            var t;
            return t = e.object,
            this.selectNumber(t)
        },
        selectNumber: function(e) {
            var t;
            if (this.enabled && this.selectedNumber !== e)
                return this.unselectNumber(this.selectedNumber),
                this.selectedNumber = e,
                t = this.selectedNumber.model.fractionPoint.clone(),
                this.fractionPoint = new s(new OL.LonLat(t.x,t.y),this.joinedGeometry,this.map),
                this.markerLayer.addMarker(this.fractionPoint),
                this.fractionPoint.dragging.activate(this.fractionPoint.icon.$div),
                this.fractionPoint.layer = this.markerLayer,
                this.selectedNumber.icon.bringToFront(),
                this.selectedNumber.focus(),
                this.selectedNumber.setActive(!0),
                this.selectedNumber.dragging.activate(this.selectedNumber.icon.$div.find(".drag-handle")),
                this.originalGeometry = this.selectedNumber.model.geometry.clone(),
                this.fractionPoint.events.register("dragEnd", this, this.onFractionPointDragEnd),
                this.fractionPoint.events.register("drag", this, this.onFractionPointDrag),
                this.lightboxView.setLastEditedUser(this.selectedNumber.model.updatedBy),
                this.fractionLine = new OL.Feature.Vector(new OL.Geometry.LineString([new OL.Geometry.Point(t.x,t.y), new OL.Geometry.Point(this.originalGeometry.x,this.originalGeometry.y)]),{},this.fractionLineStyle),
                this.fractionLinePadding = new OL.Feature.Vector(new OL.Geometry.LineString([new OL.Geometry.Point(t.x,t.y), new OL.Geometry.Point(this.originalGeometry.x,this.originalGeometry.y)]),{},this.fractionLinePaddingStyle),
                this.layer.addFeatures([this.fractionLinePadding, this.fractionLine])
        },
        onFractionPointDrag: function() {
            return this.fractionLine.geometry.components[0].x = this.fractionPoint.lonlat.lon,
            this.fractionLine.geometry.components[0].y = this.fractionPoint.lonlat.lat,
            this.fractionLinePadding.geometry.components[0].x = this.fractionPoint.lonlat.lon,
            this.fractionLinePadding.geometry.components[0].y = this.fractionPoint.lonlat.lat,
            this.fractionPoint.icon.forceReflow(),
            this.layer.drawFeature(this.fractionLinePadding),
            this.layer.drawFeature(this.fractionLine)
        },
        onFractionPointDragEnd: function() {
            var e;
            e = new OL.Geometry.Point(this.fractionPoint.lonlat.lon,this.fractionPoint.lonlat.lat),
            this.selectedNumber.isNew ? this.selectedNumber.model.fractionPoint = e : this.ignoreUpdates(function(e) {
                return function() {
                    var t, i, n;
                    return t = new c,
                    e.model.actionManager.add(t),
                    i = e.houseNumberSets[e.fractionPoint.closestSegment.getID()],
                    n = new r.UpdateFractionPoint(e.selectedNumber.model,i,e.fractionPoint),
                    t.doSubAction(n),
                    e.selectedNumber.model = n.newHouseNumber,
                    t.doSubAction(new d(e.selectedNumber.model.parent,e.selectedNumber.model,{
                        forced: !1,
                        valid: !0
                    })),
                    e.selectedNumber.setValid(!0),
                    e.selectedNumber.setForced(!1)
                }
            }(this))
        },
        ignoreUpdates: function(e) {
            return this.updating = !0,
            e(),
            this.updating = !1
        },
        unselectNumber: function(e) {
            var t;
            if (null != e)
                return e.dragging.deactivate(),
                e.setActive(!1),
                this.selectedNumber = null ,
                this.lightboxView.setLastEditedUser(null ),
                this.fractionPoint && (this.fractionPoint.events.unregister("dragEnd", this, this.onFractionPointDragEnd),
                this.fractionPoint.events.unregister("drag", this, this.onFractionPointDrag),
                this.markerLayer.removeMarker(this.fractionPoint)),
                this.fractionLine && this.layer.destroyFeatures([this.fractionLine, this.fractionLinePadding]),
                "" === e.input.val() ? e.isNew ? this.markerLayer.removeMarker(e) : (t = e.input.get(0).valueAsNumber,
                isNaN(t) ? e.input.val(e.model.number) : this.model.actionManager.add(new r.DeleteHouseNumber(e.model.parent,e.model))) : e.isNew ? (e.model.number = e.input.val(),
                delete e.isNew,
                this.model.actionManager.add(new r.AddHouseNumber(e.model.parent,e.model))) : void 0
        },
        onAddClicked: function() {
            var e, t;
            if (!this.adding && this.enabled)
                return this.adding = !0,
                t = new a({
                    number: "",
                    geometry: new OL.Geometry.Point(0,0),
                    fractionPoint: new OL.Geometry.Point(0,0),
                    forced: !1
                }),
                e = this.createHouseNumber(t),
                t.parent = this.houseNumberSets[t.closestSegment.getID()],
                e.setNew(!0),
                e.isNew = !0,
                e.dragging.forceStart(),
                this.selectNumber(e),
                e.events.register("click:input", this, this.onAddEnd)
        },
        cancelAdd: function() {
            if (this.adding)
                return this.adding = !1,
                this.selectedNumber.dragging.forceEnd(),
                this.unselectNumber(this.selectedNumber)
        },
        onAddEnd: function(e) {
            var t, i;
            if (t = e.object,
            i = new OL.Geometry.Point(t.lonlat.lon,t.lonlat.lat),
            this.editAreas.some(function(e) {
                return e.geometry.containsPoint(i)
            }))
                return this.adding = !1,
                t.dragging.forceEnd(),
                t.model.geometry = i,
                t.model.fractionPoint = t.model.getFractionFromProjection(),
                t.model.parent = this.houseNumberSets[t.model.closestSegment.getID()],
                t.setNew(!1),
                t.events.unregister("click:input", this, this.onAddEnd),
                t.focus()
        },
        onMapClick: function(e) {
            if (null != this.selectedNumber)
                return this.unselectNumber(this.selectedNumber)
        },
        activate: function() {
            if (!this.active)
                return this.active = !0,
                this._editingLock = W.editingMediator.lockEditing(),
                this.map.showLightbox(this.lightboxView),
                this.map.events.register("click", this, this.onMapClick),
                this.map.events.register("moveend", this, this.drawFogOfWar),
                this.map.events.register("zoomend", this, this.onZoomChanged),
                this.onZoomChanged(),
                this.model.houseNumbers.on("objectschanged", this.render, this),
                W.commands.execute("save:setHandler", this.saveChanges, this)
        },
        onDestroy: function() {
            return this.deactivate(),
            this.lightboxView.destroy(),
            this.map.removeLayer(this.layer),
            this.map.removeLayer(this.markerLayer)
        },
        deactivate: function() {
            if (this.active)
                return this.active = !1,
                W.editingMediator.releaseEditing(this._editingLock),
                this._editingLock = null ,
                this.model.actionManager.clear(),
                this.map.events.unregister("click", this, this.onMapClick),
                this.map.events.unregister("moveend", this, this.drawFogOfWar),
                this.map.events.unregister("zoomend", this, this.onZoomChanged),
                this.model.houseNumbers.off("objectschanged", this.render, this),
                this.reset(),
                W.commands.execute("save:restoreDefaultHandler")
        },
        drawFogOfWar: function() {
            return this.fogOfWar && this.layer.destroyFeatures(this.fogOfWar),
            this.fogOfWar = new OL.Feature.Vector(this.map.getExtent().toGeometry(),{},{
                fillColor: "black",
                fillOpacity: .5,
                strokeWidth: 0,
                mask: "url(#HNAreaMask)"
            }),
            this.layer.addFeatures(this.fogOfWar),
            this.layer.redraw()
        },
        onSave: function() {
            return this.saveChanges()
        },
        saveChanges: function() {
            return this.unselectNumber(this.selectedNumber),
            this.enabled = !1,
            this.lightboxView.disable(),
            this.lightboxView.setLoading(!0),
            W.editingMediator.set({
                navigation: !1
            }),
            W.controller.save().done(function(e) {
                return function() {
                    return e.onSaveSuccess()
                }
            }(this)).fail(function(e) {
                return function(t) {
                    return e.onSaveFail(t)
                }
            }(this)).always(function(e) {
                return function() {
                    return e.lightboxView.setLoading(!1),
                    W.editingMediator.set({
                        navigation: !0
                    })
                }
            }(this))
        },
        onSaveFail: function(e) {
            var t, i, n, s, r, o;
            if (t = e[0],
            t.get("code") === this.HOUSE_NUMBERS_SAVE_ERROR_CODE) {
                if (this.invalidHouseNumbers = t.get("objects"),
                this.showingForceDialog = !0,
                this.lightboxView.showForceMessage(),
                null != this.invalidHouseNumbers)
                    for (o = this.invalidHouseNumbers,
                    i = 0,
                    n = o.length; i < n; i++)
                        r = o[i],
                        s = this.houseNumberSets[r.segID].getNumber(r.id),
                        r.model = s,
                        s.valid = !1,
                        s.invalidCode = r.errorType
            } else
                this.lightboxView.showSaveErrorMessage();
            return this.render()
        },
        onSaveSuccess: function() {
            return this.enabled = !0,
            this.lightboxView.enable(),
            this.lightboxView.showSuccessMessage(),
            this._setupSegments()
        },
        editingAllowedInZoom: function() {
            return this.map.getZoom() >= W.Config.houseNumbers.minEditZoom
        },
        onZoomChanged: function() {
            return $(this.markerLayer.div).toggleClass("preview", !this.editingAllowedInZoom()),
            this.editingAllowedInZoom() || (this.cancelAdd(),
            this.unselectNumber(this.selectedNumber)),
            this.lightboxView.render()
        },
        canForcedInvalid: function() {
            return Object.values(this.houseNumberSets).every(function(e) {
                var t;
                return t = e.getSegment(),
                null != t && t.canForceHouseNumbers()
            })
        },
        continueEditing: function() {
            return this.enabled = !0,
            this.showingForceDialog = !1,
            this.lightboxView.enable()
        },
        forceInvalid: function() {
            return this.showingForceDialog = !1,
            this.invalidHouseNumbers.isEmpty() || this.ignoreUpdates(function(e) {
                return function() {
                    var t, i, n, s, r, o;
                    for (n = new c,
                    e.model.actionManager.add(n),
                    r = e.invalidHouseNumbers,
                    o = [],
                    t = 0,
                    i = r.length; t < i; t++)
                        s = r[t],
                        o.push(n.doSubAction(new d(s.model.parent,s.model,{
                            forced: !0
                        })));
                    return o
                }
            }(this)),
            this.saveChanges()
        },
        CLASS_NAME: "W.Control.HouseNumbers"
    }),
    e.exports = l
}
, function(e, t, i) {
    var n, s, r, o, a;
    r = i(692),
    s = i(688),
    a = i(552),
    n = i(80),
    o = OL.Class({
        layer: null ,
        initialize: function(e) {
            return this.mediator = e.mediator,
            this.map = e.map,
            this.pannable = this.map.getPannable(),
            this.layer = new r({
                $el: this.map.placeUpdatesLayer.$div,
                mediator: e.mediator
            }),
            W.commands.setHandler("place_updates:list", this._showVenue.bind(this)),
            W.reqres.setHandler("updaterequests:browse", this._browseUpdateRequest.bind(this))
        },
        _showVenue: function(e) {
            var t, i;
            return i = {
                venue: e,
                venueIterator: function() {
                    var t, i;
                    return i = e.model.venues.getObjectArray(),
                    t = new a(i),
                    t.sortByDistanceFrom(e),
                    t
                }
            },
            t = this._createBrowser(i),
            t.show()
        },
        _browseUpdateRequest: function(e) {
            var t, i, s;
            return s = e.updateRequest.get("place"),
            e = {
                venue: s,
                updateRequests: [e.updateRequest],
                showNext: e.showNext,
                nextButtonString: e.nextButtonString,
                nextButtonClass: e.nextButtonClass,
                venueIterator: function() {
                    return new a([s])
                }
            },
            t = this._createBrowser(e),
            t.show(),
            this._showLayers(s),
            i = new n,
            t.on("nextClicked", function() {
                return i.next()
            }),
            i
        },
        _createBrowser: function(e) {
            var t;
            return _.defaults(e, {
                showDebug: this.mediator.get("advancedTools"),
                pannable: this.pannable
            }),
            t = new s(e),
            t.on("close", function(e) {
                return function() {
                    return e.layer.unhighlightAllMarkers()
                }
            }(this)),
            t.on("show", function(e) {
                return function(t) {
                    return e.layer.highlightMarker(t)
                }
            }(this)),
            t
        },
        _showLayers: function(e) {
            return this.map.showLayerByObjectType(e.type),
            this.map.placeUpdatesLayer.setVisibility(!0)
        }
    }),
    e.exports = o
}
, function(e, t, i) {
    var n, s;
    n = i(4),
    s = OpenLayers.Class(n, {
        nested: {
            segmentGeom: OL.Geometry,
            secondarySegmentGeom: OL.Geometry,
            venueGeom: OL.Geometry
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r;
    s = i(117),
    n = i(4),
    r = OpenLayers.Class(n, {
        nested: {
            numbers: s,
            editArea: OL.Geometry
        },
        initialize: function() {
            return n.prototype.initialize.apply(this, arguments),
            this.createNumbers()
        },
        createNumbers: function() {
            var e, t, i, n, s;
            for (s = this.numbers,
            e = t = 0,
            i = s.length; t < i; e = ++t)
                n = s[e],
                this.numbers[e].parent = this
        },
        merge: function(e) {
            return n.prototype.merge.apply(this, arguments),
            this.createNumbers()
        },
        getNumber: function(e) {
            var t, i, n, s;
            for (s = this.numbers,
            t = 0,
            i = s.length; t < i; t++)
                if (n = s[t],
                n.id === e)
                    return n;
            return null
        },
        getSegment: function() {
            return this.segment || (this.segment = this.model.segments.get(this.id))
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    n = i(4),
    s = OpenLayers.Class(n, {
        nested: {
            geometry: OL.Geometry
        },
        initialize: function(e) {
            return e.id = e.id + "ma",
            n.prototype.initialize.apply(this, arguments)
        },
        getUserName: function() {
            var e;
            return e = this.model.users.get(this.userID),
            (null != e ? e.userName : void 0) || ""
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r;
    r = i(525),
    n = i(4),
    s = OL.Class(n, {
        nested: {
            sessions: r,
            average: r
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(4),
    s = OpenLayers.Class(n, {
        nested: {
            geometry: OL.Geometry,
            nextSegGeom: OL.Geometry,
            prevSegGeom: OL.Geometry
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    s = i(4),
    n = OL.Class(s, {
        nested: {
            averageGeom: OL.Geometry
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r;
    n = i(526),
    s = i(4),
    r = OL.Class(s, {
        nested: {
            routeNextSeg: OL.Geometry,
            routePrevSeg: OL.Geometry,
            alternatives: n
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    n = i(4),
    s = OpenLayers.Class(n, {
        nested: {
            geometry: OL.Geometry
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    s = i(49),
    n = OL.Class(s, {
        _location: null ,
        nested: {
            geometry: OL.Geometry,
            bounds: OL.Geometry,
            endPoint: OL.Geometry
        },
        initialize: function() {
            s.prototype.initialize.apply(this, arguments),
            this._calcLocation()
        },
        _calcLocation: function() {
            return this.hasEndPoint() ? this._location = this._getMiddlePoint() : this._location = this.attributes.geometry
        },
        _getMiddlePoint: function() {
            return this.attributes.geometry.clone().resize(.5, this.attributes.endPoint)
        },
        hasEndPoint: function() {
            return null != this.attributes.endPoint
        },
        getLocation: function() {
            return this._location
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    s = i(49),
    l = i(1052),
    n = i(529),
    o = s.prototype.TYPE,
    a = {},
    a[o.DISCONNECTION] = s,
    a[o.TURN] = l,
    a[o.DATA] = s,
    a[o.ROAD_CLOSURE] = n,
    r = {
        create: function(e) {
            var t;
            return new (t = a[e.problemType])(e,{
                parse: !0
            })
        }
    },
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    s = i(524),
    l = i(527),
    n = i(521),
    o = i(49).prototype.TYPE,
    a = {},
    a[o.DISCONNECTION] = s,
    a[o.TURN] = l,
    a[o.DATA] = n,
    r = {
        create: function(e) {
            var t;
            return new (t = a[e.problemType])(e,{
                parse: !0
            })
        }
    },
    e.exports = r
}
, function(e, t, i) {
    var n;
    n = OL.Class({
        LocalStorageKey: "hiddenMessages",
        name: null ,
        initialize: function(e) {
            return this.name = e
        },
        shouldShow: function() {
            return !this.hiddenMessages[this.name]
        },
        render: function() {
            var e;
            return e = i(13),
            e.getHTML("templates/" + this.name)
        },
        hide: function(e) {
            var t, i;
            return null != e && "function" == typeof e.preventDefault && e.preventDefault(),
            t = $(this),
            i = t.data("hide-message"),
            t.parents(".hidable-message").fadeOut("fast"),
            n.prototype.hiddenMessages[i] = !0,
            n.persist()
        }
    }),
    n.restore = function() {
        var e, t;
        return e = localStorage.getItem(this.prototype.LocalStorageKey),
        this.prototype.hiddenMessages = function() {
            if (null == e)
                return {};
            try {
                return JSON.parse(e)
            } catch (e) {
                return t = e,
                {}
            }
        }()
    }
    ,
    n.persist = function() {
        try {
            return localStorage.setItem(this.prototype.LocalStorageKey, JSON.stringify(this.prototype.hiddenMessages))
        } catch (e) {}
    }
    ,
    n.init = function() {
        return this.restore(),
        $(document).on("click.hidable-messages", "[data-hide-message]", n.prototype.hide)
    }
    ,
    n.init(),
    e.exports = n
}
, function(e, t) {
    var i, n, s = {}.hasOwnProperty;
    i = "map-marker",
    n = OL.Class(OL.Layer, {
        isBaseLayer: !1,
        markers: null ,
        repo: null ,
        drawn: !1,
        $div: null ,
        className: null ,
        markerClass: OL.Marker,
        filter: null ,
        initialize: function(e, t, i) {
            OL.Layer.prototype.initialize.apply(this, [e, i]),
            this.markers = {},
            this.repo = t,
            i.className && (this.className = i.className),
            this._registerEvents()
        },
        destroy: function() {
            return this.clearMarkers(),
            this.markers = null ,
            this._unregisterEvents(),
            OL.Layer.prototype.destroy.apply(this, arguments)
        },
        _registerEvents: function() {
            return this.div.addEventListener("click", this._onDivClick.bind(this)),
            this._registerRepoEvents()
        },
        _unregisterEvents: function() {
            return this.div.removeEventListener("click", this._onDivClick),
            this._unregisterRepoEvents()
        },
        _registerRepoEvents: function() {
            var e, t, i, n, s;
            for (i = this.repo,
            s = [],
            e = 0,
            t = i.length; e < t; e++)
                n = i[e],
                n.on("objectsadded", this.onFeaturesAdded, this),
                n.on("objectschanged", this.onFeaturesChanged, this),
                s.push(n.on("objectsremoved", this.onFeaturesRemoved, this));
            return s
        },
        _unregisterRepoEvents: function() {
            var e, t, i, n, s;
            for (i = this.repo,
            s = [],
            e = 0,
            t = i.length; e < t; e++)
                n = i[e],
                n.off("objectsadded", this.onFeaturesAdded, this),
                n.off("objectschanged", this.onFeaturesChanged, this),
                s.push(n.off("objectsremoved", this.onFeaturesRemoved, this));
            return s
        },
        shouldAddFeature: function(e) {
            return !this.filter || this.filter(e)
        },
        onFeaturesAdded: function(e) {
            var t, i, n, s;
            for (i = 0,
            n = e.length; i < n; i++)
                t = e[i],
                this.shouldAddFeature(t) && (s = new this.markerClass(t),
                this.addMarker(s, t.getID()))
        },
        onFeaturesChanged: function(e) {
            var t, i, n, s;
            for (i = 0,
            n = e.length; i < n; i++)
                t = e[i],
                s = this._findMarker(t),
                null != s ? this.shouldAddFeature(t) ? (this.drawMarker(s),
                s.render()) : this.removeMarker(s) : this.shouldAddFeature(t) && (s = new this.markerClass(t),
                this.addMarker(s, t.getID()))
        },
        _findMarker: function(e) {
            return this.markers[e.getID()] || this._findMarkerByOldID(e)
        },
        _findMarkerByOldID: function(e) {
            var t;
            return null != e._prevID && (t = this.markers[e._prevID],
            null != t) ? (t.id = e.getID(),
            this.markers[t.id] = t,
            delete this.markers[e._prevID],
            t) : null
        },
        onFeaturesRemoved: function(e) {
            var t, i, n, s;
            for (i = 0,
            n = e.length; i < n; i++)
                t = e[i],
                s = this.markers[t.getID()],
                null != s && this.removeMarker(s)
        },
        setOpacity: function(e) {
            var t, i, n, r;
            if (e !== this.opacity) {
                this.opacity = e,
                n = this.markers,
                r = [];
                for (t in n)
                    s.call(n, t) && (i = n[t],
                    r.push(i.setOpacity(this.opacity)));
                return r
            }
        },
        moveTo: function(e, t, i) {
            var n, r, o;
            if (OL.Layer.prototype.moveTo.apply(this, arguments),
            t || !this.drawn) {
                o = this.markers;
                for (n in o)
                    s.call(o, n) && (r = o[n],
                    this.drawMarker(r));
                return this.drawn = !0
            }
        },
        addMarker: function(e, t) {
            if (this.markers[t] = e,
            e.id = t,
            this.map && this.map.getExtent())
                return e.map = this.map,
                this.drawMarker(e)
        },
        getMarker: function(e) {
            return this.markers[e]
        },
        removeMarker: function(e) {
            if (this.markers)
                return OL.Util.removeItem(this.markers, e),
                e.erase(),
                delete this.markers[e.id]
        },
        clearMarkers: function() {
            var e, t, i, n;
            i = this.markers,
            n = [];
            for (e in i)
                s.call(i, e) && (t = i[e],
                n.push(this.removeMarker(t)));
            return n
        },
        drawMarker: function(e) {
            var t, n;
            return n = this.map.getLayerPxFromLonLat(e.lonlat),
            null == n ? e.display(!1) : e.isDrawn() ? e.icon ? e.icon.moveTo(n) : void 0 : (t = e.draw(n),
            t.classList.add(i),
            this.div.appendChild(t))
        },
        setMap: function() {
            if (OL.Layer.prototype.setMap.apply(this, arguments),
            this.$div = $(this.div),
            this.$div.addClass("marker-layer"),
            this.className)
                return this.$div.addClass(this.className)
        },
        getDataExtent: function() {
            var e, t, i, n;
            if (i = null ,
            this.markers) {
                i = new OL.Bounds,
                n = this.markers;
                for (e in n)
                    s.call(n, e) && (t = n[e],
                    i.extend(t.lonlat))
            }
            return i
        },
        getContainer: function() {
            return this.div
        },
        _onDivClick: function(e) {
            if (e.target.classList.contains(i))
                return this.events.triggerEvent("markerclick", e),
                !1
        },
        CLASS_NAME: "W.Layer.Markers"
    }),
    e.exports = n
}
, function(e, t) {
    var i;
    i = OL.Class(OL.Layer.XYZ, {
        getURL: function(e) {
            var t, i;
            return i = OL.Layer.XYZ.prototype.getURL.apply(this, arguments),
            t = OL.Util.getParameterString(this.params),
            OL.Util.urlAppend(i, t)
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    n = i(11),
    s = i(55),
    r = OL.Class(OL.Marker, {
        dragging: null ,
        dragConstraint: null ,
        closestSegment: null ,
        initialize: function(e, t, i) {
            var r, o, a, l, u;
            for (this.map = i,
            a = new n("fraction-point"),
            OL.Marker.prototype.initialize.call(this, e, a),
            this.dragConstraint = t,
            u = ["drag", "dragEnd"],
            o = 0,
            l = u.length; o < l; o++)
                r = u[o],
                this.events.addEventType(r);
            this.dragging = new s(this.map),
            this.dragging.down = function(e) {
                return function(t) {
                    return e.icon.$div.addClass("dragging")
                }
            }(this),
            this.dragging.move = function(t) {
                return function(i) {
                    var n;
                    return e = t.map.getLonLatFromViewPortPx(i.xy),
                    n = t.dragConstraint.distanceTo(new OL.Geometry.Point(e.lon,e.lat), {
                        details: !0
                    }),
                    t.lonlat = new OL.LonLat(n.x0,n.y0),
                    t.closestSegment = n.model,
                    t.layer.drawMarker(t),
                    t.events.triggerEvent("drag", {
                        xy: i.xy,
                        marker: t
                    })
                }
            }(this),
            this.dragging.done = function(e) {
                return function(t) {
                    return e.icon.$div.removeClass("dragging"),
                    e.events.triggerEvent("dragEnd", {
                        xy: null != t ? t.xy : void 0,
                        marker: e
                    })
                }
            }(this),
            this.icon.$div.on("click", function() {
                return !1
            })
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o;
    n = i(11),
    s = i(55),
    o = i(13),
    r = OL.Class(OL.Marker, {
        model: null ,
        input: null ,
        ENTER: 13,
        ESC: 27,
        dragging: null ,
        hasTooltip: !1,
        initialize: function(e, t, i) {
            var r, o, a, l, u;
            for (this.map = i,
            this.model = e,
            a = new n("house-number"),
            OL.Marker.prototype.initialize.call(this, t, a),
            this.render(),
            this.input = this.icon.$div.find("input"),
            this.inputWrapper = this.icon.$div.find(".input-wrapper"),
            this.icon.$div.find(".input-wrapper, .drag-handle").on("click", function(e) {
                return function(t) {
                    return e.events.triggerEvent("click:input"),
                    !1
                }
            }(this)),
            this.input.on("click", function(e) {
                return function() {
                    return e.input.focus()
                }
            }(this)),
            this.input.on("dblclick", function(e) {
                return e.stopPropagation()
            }),
            this.input.on("mousedown", function(e) {
                return e.stopPropagation()
            }),
            this.input.on("keydown", this.forceNumeric),
            this.input.on("keyup", function(e) {
                return function(t) {
                    if (t.which === e.ESC)
                        return t.stopPropagation(),
                        e.input.blur(),
                        e.events.triggerEvent("unselect")
                }
            }(this)),
            this.input.on("change", function(e) {
                return function() {
                    return e.events.triggerEvent("change:number", {
                        number: e.input.val()
                    })
                }
            }(this)),
            this.inputWrapper.find(".delete-button").on("click", function(e) {
                return function() {
                    return e.events.triggerEvent("delete")
                }
            }(this)),
            u = ["change:number", "delete", "drag", "dragEnd", "unselect", "click:input"],
            o = 0,
            l = u.length; o < l; o++)
                r = u[o],
                this.events.addEventType(r);
            this.dragging = new s(this.map),
            this.dragging.move = function(e) {
                return function(t) {
                    return e.destroyTooltip(),
                    e.lonlat = e.map.getLonLatFromViewPortPx(t.xy),
                    e.layer.drawMarker(e),
                    e.model.geometry.x = e.lonlat.lon,
                    e.model.geometry.y = e.lonlat.lat,
                    e.events.triggerEvent("drag", {
                        xy: t.xy,
                        marker: e
                    })
                }
            }(this),
            this.dragging.done = function(e) {
                return function(t) {
                    return e.createTooltip(),
                    e.events.triggerEvent("dragEnd", {
                        xy: null != t ? t.xy : void 0,
                        marker: e
                    })
                }
            }(this),
            this.createTooltip()
        },
        createTooltip: function() {
            if (this.model.valid === !1 && !this.hasTooltip)
                return this.hasTooltip = !0,
                this.inputWrapper.tooltip({
                    title: I18n.t("edit.house_numbers.errors")[this.model.invalidCode],
                    placement: "bottom"
                })
        },
        destroyTooltip: function() {
            return this.hasTooltip && this.inputWrapper.tooltip("destroy"),
            this.hasTooltip = !1
        },
        destroy: function() {
            return this.destroyTooltip()
        },
        focus: function() {
            return this.input.focus(),
            this.input.val(this.input.val())
        },
        select: function(e) {
            e.stopPropagation(),
            this.input.focus()
        },
        render: function() {
            return this.icon.$div.html(o.getHTML("templates/house-number", this.model))
        },
        setActive: function(e) {
            return this.icon.$div.find(".content").toggleClass("active", e)
        },
        setNew: function(e) {
            return this.icon.$div.find(".content").toggleClass("new", e)
        },
        setValid: function(e) {
            var t;
            return e && this.destroyTooltip(),
            t = this.icon.$div.find(".content"),
            t.removeClass("valid-" + !e),
            t.addClass("valid-" + e)
        },
        setForced: function(e) {
            var t;
            return t = this.icon.$div.find(".content"),
            t.removeClass("forced-" + !e),
            t.addClass("forced-" + e)
        },
        updateSide: function() {
            return this.inputWrapper.toggleClass("side-left", this.model.isLeft)
        },
        forceNumeric: function(e) {
            var t, i;
            return t = e.which,
            i = 65 === t && (e.ctrlKey || e.metaKey),
            !!((!e.shiftKey && !e.altKey && !e.ctrlKey || i) && t >= 48 && t <= 57 || t >= 97 && t <= 122 || t >= 65 && t <= 90 || 32 === t || 191 === t || 189 === t || t >= 96 && t <= 105 || 8 === t || 9 === t || 13 === t || 35 === t || 36 === t || 37 === t || 39 === t || 46 === t || 45 === t || i)
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    n = i(11),
    s = OL.Class(OL.Marker, {
        initialize: function(e, t, i) {
            var s;
            return this.model = e,
            this.map = t,
            this.layer = i,
            s = new n("live-user-marker",!0),
            OL.Marker.prototype.initialize.call(this, this.getLonLat(), s),
            this.model.on("moved", this._onMoved, this)
        },
        render: function() {
            return this.icon.$div.tooltip({
                title: this.model.get("name")
            })
        },
        getLonLat: function() {
            return this.model.get("center")
        },
        _onMoved: function() {
            return this.icon.$div.one("transitionend", function(e) {
                return function() {
                    return e.icon.$div.removeClass("moving")
                }
            }(this)),
            this.lonlat = this.getLonLat(),
            this.icon.$div.addClass("moving"),
            this.layer.drawMarker(this)
        },
        center: function() {
            return this.map.setCenter(this.getLonLat())
        },
        destroy: function() {
            return this.icon.$div.tooltip("destroy")
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(11),
    s = OL.Class(OL.Marker, {
        model: null ,
        initialize: function(e) {
            var t, i;
            this.model = e,
            t = new n("place-update"),
            i = this._getLocation(),
            OL.Marker.prototype.initialize.call(this, i, t),
            this.render(),
            this.icon.$div.data("model", this.model),
            this.icon.$div.attr("data-id", this.model.getID())
        },
        render: function() {
            var e, t;
            return e = this.icon.$div,
            t = e.hasClass("selected"),
            e.removeClass(),
            e.addClass("place-update"),
            this._hasMultipleUpdates() ? (e.addClass("multiple"),
            e.attr("data-update-count", this._getUpdateCount())) : e.addClass(this._getUpdateType()),
            this.model.hasOpenUpdateRequests() || e.addClass("approved"),
            t && e.addClass("selected"),
            e.addClass(this._getSeverity()),
            this._reposition(this._getLocation())
        },
        _reposition: function(e) {
            if (!e.equals(this.lonlat))
                return this.lonlat = e,
                this.moveTo(this.map.getLayerPxFromLonLat(this.lonlat))
        },
        _getLocation: function() {
            return this.model.geometry.getBounds().getCenterLonLat()
        },
        _hasMultipleUpdates: function() {
            return this.model.attributes.venueUpdateRequests.length > 1
        },
        _getUpdateCount: function() {
            return this.model.attributes.venueUpdateRequests.length
        },
        _getUpdateType: function() {
            var e;
            return e = this.model.attributes.venueUpdateRequests[0],
            e.get("updateType").toLowerCase()
        },
        _getSeverity: function() {
            var e;
            return e = this.model.attributes.venueUpdateRequests[0],
            e.getSeverity()
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o;
    s = i(11),
    r = i(8),
    n = i(74),
    o = OL.Class(OL.Marker, {
        model: null ,
        initialize: function(e) {
            var t, i;
            this.model = e,
            i = new s("road-closure"),
            this.segment = W.model.segments.get(this.model.segID),
            t = null != this.segment ? this._getSegmentCenter(this.segment) : {
                angle: 0,
                lonlat: new OL.LonLat(0,0)
            },
            OL.Marker.prototype.initialize.call(this, t.lonlat, i),
            this.icon.$div.data("model", this.model),
            this._createArrow(t.angle).appendTo(this.icon.$div),
            this.render()
        },
        _createArrow: function(e) {
            var t, i;
            return i = 360 - e.toDeg(),
            t = "forward",
            this.model.forward || (i -= 180,
            t = "backward"),
            this.arrow = $("<div>").addClass("arrow").addClass(t).css({
                transform: "rotate(" + i + "deg)"
            })
        },
        _getSegmentCenter: function(e) {
            var t, i, n;
            return t = e.geometry.getLength(),
            n = r.getPointAlongLine(e.geometry.getVertices(), t / 2),
            i = n.point,
            {
                angle: n.angle,
                lonlat: new OL.LonLat(i.x,i.y)
            }
        },
        render: function() {
            return this.icon.$div.toggleClass("inactive", !this.model.active)
        },
        toggle: function(e) {
            return this.icon.$div.toggle(e)
        }
    }),
    e.exports = o
}
, function(e, t, i) {
    var n, s;
    n = i(122),
    s = OL.Class(n, {
        initialize: function(e) {
            n.prototype.initialize.apply(this, arguments)
        },
        render: function() {
            if (n.prototype.render.apply(this, arguments),
            this.icon.$div.addClass("user-generated"),
            this.model.attributes.hasComments)
                return this.icon.$div.addClass("has-comments")
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h = {}.hasOwnProperty;
    u = i(21),
    l = i(83),
    a = i(124),
    s = i(123),
    d = i(6),
    c = "chatSettings",
    n = OL.Class(u, {
        initialize: function(e, t) {
            return this._wazeModel = e,
            this._marx = t,
            u.prototype.initialize.apply(this),
            this.messages = new s.Collection,
            this.users = new l([],{
                model: a
            }),
            this.rooms = new o,
            this._refreshRooms(),
            this._marx.on("firstConnect", this._onMarxFirstConnect, this),
            this._marx.on("reconnect", this._onMarxReconnect, this),
            this._marx.on("disconnect", this._onMarxDisconnect, this),
            this._registerWazeModelEvents(),
            this.set({
                room: this._getTopRoom(),
                currentUser: null ,
                active: !1,
                visible: null ,
                open: !1
            }),
            this._loadFromLocalStorage(),
            this.on("change:room", this._onRoomChange, this),
            this.on("change:visible", this._onVisibilityChanged, this),
            this.on("change:open", this._onOpenChanged, this)
        },
        _loadFromLocalStorage: function() {
            var e;
            if (e = d.localStorage.get(c),
            null != e)
                return this.set(e)
        },
        _saveToLocalStorage: function() {
            return d.localStorage.set(c, {
                visible: this.get("visible"),
                open: this.get("open")
            })
        },
        _onMarxFirstConnect: function() {
            this._registerSocketEvents(),
            this._activate()
        },
        _onMarxReconnect: function() {
            this._activate()
        },
        _onMarxDisconnect: function() {
            this._deactivate()
        },
        _canActivate: function() {
            var e;
            return e = this._wazeModel.loginManager.user,
            null != e && this._canUserChat(e)
        },
        _canUserChat: function(e) {
            return !W.Config.chat.staffOnly || e.isStaff
        },
        _getDefaultVisibility: function() {
            return !1
        },
        _activate: function(e) {
            var t, i;
            if (this._canActivate())
                return i = this.get("visible"),
                null == i && (i = this._getDefaultVisibility()),
                this._refreshRooms(),
                t = this.get("room") || this._getTopRoom(),
                this.set({
                    currentUser: this._createMyUser(),
                    visible: i,
                    active: this._canActivate(),
                    room: t
                }),
                null == this.get("visible") && (i = this._getDefaultVisibility()),
                null != t && this._onRoomChange(),
                this._onVisibilityChanged()
        },
        _createMyUser: function() {
            var e;
            return e = this._wazeModel.loginManager.user,
            new a({
                id: e.id,
                rank: e.rank,
                name: e.userName
            })
        },
        _registerWazeModelEvents: function() {
            return this._wazeModel.events.on({
                mergeend: this._onMergeEnd,
                scope: this
            })
        },
        _registerSocketEvents: function() {
            return this._marx.socket.on("room:userJoin", $.proxy(this._onRoomUserJoin, this)),
            this._marx.socket.on("room:userLeave", $.proxy(this._onRoomUserLeave, this)),
            this._marx.socket.on("room:userPan", $.proxy(this._onRoomUserPan, this)),
            this._marx.socket.on("room:userEdit", $.proxy(this._onRoomUserEdit, this)),
            this._marx.socket.on("room:newMessage", $.proxy(this._onMessage, this)),
            this._marx.socket.on("me:newMessage", $.proxy(this._onMessageFromOtherTab, this)),
            this._marx.socket.on("me:change:room", $.proxy(this._onMeChangeRoom, this)),
            this._marx.socket.on("me:change:visible", $.proxy(this._onMeChangeVisible, this))
        },
        _onMergeEnd: function() {
            this.get("active") && (this._refreshRooms(),
            null == this.get("room") && this.set("room", this._getTopRoom()))
        },
        _getTopRoom: function() {
            return null != this._wazeModel.countries.top ? this.rooms.findById(this._wazeModel.countries.top.id) : this.rooms.first()
        },
        _refreshRooms: function() {
            var e;
            return e = this._wazeModel.countries.objects || {},
            this.rooms.update(e)
        },
        _deactivate: function() {
            return this.users.reset([]),
            this.set({
                active: !1
            })
        },
        _onMeChangeVisible: function(e) {
            return this._silent = !0,
            this.set("visible", e.visible),
            this._silent = !1
        },
        _onMeChangeRoom: function(e) {
            var t;
            return t = e.room,
            this.users.reset(t.users || []),
            this.set({
                room: this._findOrCreateRoom(t.name)
            }, {
                pushToServer: !1
            }),
            this.messages.add({
                type: "system",
                body: "Joined room " + t.name,
                from: {}
            }),
            this._showOrHideMeInUsersList()
        },
        _findOrCreateRoom: function(e) {
            var t;
            return t = this.rooms.findWhere({
                name: e
            }),
            null == t && (t = new r({
                name: e
            }),
            this.rooms.add(t)),
            t
        },
        _onRoomUserJoin: function(e) {
            var t;
            t = this.getUserById(e.user.id),
            null == t && this.users.addSorted(e.user, {
                ascending: !1,
                attribute: "rank"
            })
        },
        _onRoomUserLeave: function(e) {
            var t;
            t = this.getUserById(e.user.id),
            null != t && this.users.remove(t)
        },
        _onRoomUserPan: function(e) {
            var t;
            t = this.getUserById(e.user.id),
            t.set(e.user)
        },
        _onRoomUserEdit: function(e) {
            var t;
            t = this.getUserById(e.user.id),
            t.set(e.user)
        },
        _onMessage: function(e) {
            this.messages.add(e),
            W.Report.chatAction("chat_message")
        },
        _onMessageFromOtherTab: function(e) {
            e.from = this.get("currentUser").toJSON(),
            this.messages.add(e)
        },
        getUserById: function(e) {
            return this.users.first(function(t) {
                return t.get("id") === e
            })
        },
        _onRoomChange: function(e) {
            null == e && (e = {}),
            this.set({
                roomName: this._getCurrentRoomName()
            }),
            e = _.defaults(e, {
                pushToServer: !0
            }),
            this.get("active") && e.pushToServer && this._marx.socket.emit("user:change:roomName", {
                roomName: this.get("roomName")
            })
        },
        _getCurrentRoomName: function() {
            var e;
            return (null != (e = this.get("room")) && "function" == typeof e.get ? e.get("name") : void 0) || null
        },
        _onVisibilityChanged: function() {
            this.get("active") && (this._saveToLocalStorage(),
            this._silent || this._sendVisibilityChangedMessage(),
            this._showOrHideMeInUsersList())
        },
        _showOrHideMeInUsersList: function() {
            return this.get("visible") ? this._addMeToUsers() : this._removeMeFromUsers()
        },
        _addMeToUsers: function() {
            var e, t;
            if (t = this.get("currentUser"),
            e = this.getUserById(t.get("id")),
            null == e)
                return this.users.add(t)
        },
        _removeMeFromUsers: function() {
            var e, t;
            if (t = this.get("currentUser").get("id"),
            e = this.getUserById(t),
            null != e)
                return this.users.remove(e)
        },
        _onOpenChanged: function() {
            this.get("active") && this._saveToLocalStorage()
        },
        _sendVisibilityChangedMessage: function() {
            return this._marx.socket.emit("user:change:visible", {
                visible: this.get("visible")
            })
        },
        sendMessage: function(e) {
            var t, i, n;
            return n = this.get("currentUser"),
            t = {
                body: e
            },
            this._marx.socket.emit("user:newMessage", t),
            i = {
                body: e,
                from: {
                    id: n.get("id"),
                    name: n.get("name")
                }
            },
            this.messages.add(i)
        }
    }),
    r = OL.Class(u, {
        initialize: function() {
            return u.prototype.initialize.apply(this, arguments)
        },
        getName: function() {
            return this.attributes.name
        },
        equals: function(e) {
            return null != e && this.getName() === e.getName()
        },
        matchesId: function(e) {
            var t;
            return t = this.get("ids") || [],
            t.indexOf(e) !== -1
        },
        addId: function(e) {
            var t;
            if (t = this.get("ids") || [],
            t.indexOf(e) === -1)
                return t.push(e),
                this.set({
                    ids: t
                })
        }
    }),
    o = OL.Class(l, {
        model: r,
        _aliases: {
            Belgium: "Benelux",
            Netherlands: "Benelux",
            Luxembourg: "Benelux",
            "Palestinian Territory": "Israel",
            "West Bank": "Israel",
            "Gaza Strip": "Israel"
        },
        update: function(e) {
            var t, i, n, s, o, a, l, u, c;
            for (c = {},
            a = this.models,
            n = 0,
            s = a.length; n < s; n++)
                u = a[n],
                c[u.getName()] = u;
            l = [];
            for (i in e)
                h.call(e, i) && (t = e[i],
                o = this._getRoomNameByCountry(t),
                u = c[o],
                null != u ? l.push(u.addId(t.id)) : (u = new r({
                    name: o,
                    ids: [t.id]
                }),
                c[o] = u,
                l.push(this.add(u))));
            return l
        },
        _getRoomNameByCountry: function(e) {
            return this._aliases[e.name] || e.name
        },
        findById: function(e) {
            var t, i, n, s;
            for (n = this.models,
            t = 0,
            i = n.length; t < i; t++)
                if (s = n[t],
                s.matchesId(e))
                    return s;
            return null
        }
    }),
    e.exports = {
        Chat: n,
        ChatRoom: r,
        ChatRooms: o
    }
}
, function(e, t, i) {
    var n, s, r, o, a, l, u;
    a = i(21),
    n = i(83),
    u = i(6),
    l = 3e3,
    s = 3e3,
    o = OL.Class(a, {
        initialize: function(e, t, i) {
            this._wazeModel = e,
            this._marx = t,
            this._adapter = i,
            a.prototype.initialize.apply(this),
            this.users = new n([],{
                model: r
            }),
            this.throttleUserPanMessage = _.throttle(this.sendUserPanMessage, l, {
                leading: !1
            }),
            this.throttleUserEditMessage = _.throttle(this.sendUserEditMessage, s, {
                leading: !1
            }),
            this._connected = !1,
            this._adapter.events.on({
                "change:editArea": this._onEditAreaChange,
                "change:viewArea": this._onViewAreaChange,
                scope: this
            }),
            this._marx.on("firstConnect", this._onMarxFirstConnect, this),
            this._marx.on("reconnect", this._onMarxReconnect, this),
            this._marx.on("disconnect", this._onMarxDisconnect, this)
        },
        _onMarxFirstConnect: function() {
            this._isUserAuthorized() && this._registerMarxEvents(),
            this._activate()
        },
        _registerMarxEvents: function() {
            return this._marx.socket.on("viewport:userPan", $.proxy(this._onUserPan, this)),
            this._marx.socket.on("viewport:userEdit", $.proxy(this._onUserEdit, this)),
            this._marx.socket.on("viewport:userLeave", $.proxy(this._onUserLeave, this)),
            this._marx.socket.on("viewport:reset", $.proxy(this._onViewportReset, this))
        },
        _onMarxReconnect: function() {
            this._activate()
        },
        _activate: function() {
            return this._connected || (this._connected = !0,
            this._adapter.activate(),
            this._isUserAuthorized() && this.set({
                showLayer: !0
            })),
            this.sendUserPanMessage()
        },
        _onUserPan: function(e) {
            return this._mergeUser(e.user)
        },
        _onUserEdit: function(e) {
            return this._mergeUser(e.user)
        },
        _onUserLeave: function(e) {
            var t;
            if (t = this.findUserById(e.user.id),
            null != t)
                return this.users.remove(t)
        },
        _isUserAuthorized: function() {
            return !W.Config.chat.staffOnly || this._wazeModel.loginManager.user.isStaff
        },
        _onMarxDisconnect: function() {
            this._connected && (this._adapter.deactivate(),
            this._connected = !1)
        },
        _onViewportReset: function(e) {
            return this.mergeUsers(e)
        },
        mergeUsers: function(e) {
            var t, i, n, s;
            for (this._removeUsersNotIn(e),
            n = [],
            t = 0,
            i = e.length; t < i; t++)
                s = e[t],
                n.push(this._mergeUser(s));
            return n
        },
        _mergeUser: function(e) {
            var t;
            return e = $.extend({}, e),
            this._transformCenterFromMarx(e),
            t = this.findUserById(e.id),
            null != t ? t.set(e) : this.users.add(e)
        },
        _removeUsersNotIn: function(e) {
            var t, i, n, s, r, o;
            for (i = {},
            n = 0,
            s = e.length; n < s; n++)
                o = e[n],
                i[o.id] = !0;
            for (t = 0,
            r = []; t < this.users.models.length; )
                o = this.users.models[t],
                i[o.get("id")] ? r.push(t++) : r.push(this.users.removeAt(t));
            return r
        },
        _transformCenterFromMarx: function(e) {
            var t;
            if (null != e.center)
                return t = e.center,
                t = new OL.LonLat(t.lon,t.lat),
                e.center = this._adapter.convertFromMarx(t)
        },
        findUserById: function(e) {
            return this.users.first(function(t) {
                return t.get("id") === e
            })
        },
        _onEditAreaChange: function(e) {
            return this.throttleUserEditMessage()
        },
        sendUserEditMessage: function() {
            var e;
            return e = {
                editArea: this._adapter.getEditArea()
            },
            this._marx.socket.emit("user:edit", e)
        },
        _onViewAreaChange: function(e) {
            return this.throttleUserPanMessage()
        },
        sendUserPanMessage: function() {
            var e;
            if (null != this._marx.socket)
                return e = {
                    center: this._adapter.getCenter(),
                    viewArea: this._adapter.getViewArea()
                },
                this._marx.socket.emit("user:pan", e)
        }
    }),
    r = OL.Class(a, {
        initialize: function() {
            return a.prototype.initialize.apply(this, arguments),
            this.on("change:center", this._onCenterChanged, this)
        },
        _onCenterChanged: function(e) {
            if (null != e.newValue && null != e.oldValue && e.newValue.lon !== e.oldValue.lon && e.newValue.lat !== e.oldValue.lat)
                return this.trigger("moved")
        }
    }),
    e.exports = o
}
, function(e, t) {
    var i;
    i = OL.Class({
        initialize: function(e, t, i) {
            return this._wazeModel = e,
            this._marx = t,
            this._map = i,
            this.events = new OL.Events,
            this._active = !1,
            this
        },
        activate: function() {
            if (!this._active)
                return this._active = !0,
                this._wazeModel.actionManager.events.on({
                    afteraction: this._onEditAreaChange,
                    afterundoaction: this._onEditAreaChange,
                    afterclearactions: this._onEditAreaChange,
                    scope: this
                }),
                this._map.events.on({
                    moveend: this._onViewAreaChange,
                    scope: this
                })
        },
        deactivate: function() {
            if (this._active)
                return this._wazeModel.actionManager.events.un({
                    afteraction: this._onEditAreaChange,
                    afterundoaction: this._onEditAreaChange,
                    afterclearactions: this._onEditAreaChange,
                    scope: this
                }),
                this._map.events.un({
                    moveend: this._onViewAreaChange,
                    scope: this
                }),
                this._active = !1
        },
        _onEditAreaChange: function() {
            return this.events.triggerEvent("change:editArea", {
                editArea: this.getEditArea()
            })
        },
        _onViewAreaChange: function() {
            return this.events.triggerEvent("change:viewArea", {
                viewArea: this.getViewArea()
            })
        },
        getEditArea: function() {
            var e;
            return e = this._wazeModel.actionManager.getChangesBounds(),
            this.convertToMarx(e)
        },
        getCenter: function() {
            return this.convertToMarx(this._map.getCenter())
        },
        getViewArea: function() {
            return this.convertToMarx(this._map.getExtent())
        },
        convertToMarx: function(e) {
            return null == e && (e = null ),
            e = this.parseGeometry(e),
            null != e && (e = e.transform(this._map.getProjectionObject(), this._marx.displayProjection)),
            e
        },
        convertFromMarx: function(e) {
            return null == e && (e = null ),
            e = this.parseGeometry(e),
            null != e && (e = e.transform(this._marx.displayProjection, this._map.getProjectionObject())),
            e
        },
        parseGeometry: function(e) {
            return null != e && (e instanceof OL.LonLat || (e instanceof OL.Bounds ? 0 === e.getWidth() && 0 === e.getHeight() && (e = null ) : null != e.lon && null != e.lat && (e = new OL.LonLat(e.lon,e.lat)))),
            e
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o, a, l, u = {}.hasOwnProperty;
    r = i(21),
    l = i(91),
    n = i(56),
    a = i(6),
    o = i(17),
    s = OL.Class(r, {
        locationsPerEnv: null ,
        layerVisibility: null ,
        mapLocation: null ,
        isMapLocationChanged: !1,
        mapSelection: null ,
        selectedProblem: null ,
        preselectedProblem: null ,
        marker: null ,
        urlParams: null ,
        initialize: function(e, t, i, s) {
            var a, l, u, c, d, h;
            for (this.map = e,
            this.selectionManager = t,
            this.app = i,
            this.attributes = null != s ? s : {},
            r.prototype.initialize.apply(this, arguments),
            this.mapSelection = {},
            this.marker = !1,
            this._layerVisibilityBitmask = _.clone(n.layerVisibilityBitmask),
            c = o.getLayers(),
            a = 0,
            l = c.length; a < l; a++)
                d = c[a],
                h = d.uniqueName,
                u = d.permalinkBitNumber,
                this._layerVisibilityBitmask[h] = u;
            return this.layerVisibility = this.map.layers.reduce(function(e, t) {
                return t.displayInLayerSwitcher && (e[t.uniqueName] = t.getVisibility()),
                e
            }, {}),
            this.locationsPerEnv = {},
            this._restore(),
            this.map.events.on({
                changelayer: this._onLayerVisibilityChanged,
                moveend: this._onMapLocationChanged,
                addlayer: this._onLayerAdd,
                scope: this
            }),
            this.selectionManager.events.on({
                selectionchanged: this._onSelectionChanged,
                scope: this
            }),
            this.app.on("change:loggedIn", this._onUserChanged, this),
            W.vent.on({
                "problems:shown": this._onProblemShown,
                "problems:closed": this._onProblemClosed
            }, this),
            !0
        },
        destroy: function() {
            return this.map.events.un({
                changelayer: this._onLayerVisibilityChanged,
                moveend: this._onMapLocationChanged,
                addlayer: this._onLayerAdd,
                scope: this
            }),
            this.selectionManager.events.un({
                selectionchanged: this._onSelectionChanged,
                scope: this
            })
        },
        _onMapLocationChanged: function() {
            return this.updateMapLocation()
        },
        _onUserChanged: function() {
            if (this.app.get("loggedIn") && !this.isMapLocationChanged)
                return this._setLocationToUserDrive(this.app.get("user"))
        },
        _setLocationToUserDrive: function(e) {
            var t, i, n, s, r;
            if (s = (null != (n = e.editableAreas) ? n.components : void 0) || [],
            0 !== s.length)
                return t = s[0].getBounds(),
                r = this.map.getZoomForExtent(t),
                i = t.getCenterLonLat(),
                i.zoom = r,
                this.mapLocation = i,
                this._setMapLocation()
        },
        _getLayerVisibilityBitmask: function() {
            var e, t, i, n;
            i = 0,
            t = this.layerVisibility;
            for (e in t)
                u.call(t, e) && (n = t[e],
                n && !_.isUndefined(this._layerVisibilityBitmask[e]) && (i += 1 << this._layerVisibilityBitmask[e]));
            return i
        },
        _onLayerAdd: function(e) {
            var t;
            if (t = e.layer.uniqueName)
                return null != this.layerVisibility[t] ? this.map.setLayerVisibility(t, this.layerVisibility[t]) : void 0
        },
        _onLayerVisibilityChanged: function(e) {
            var t;
            return t = e.layer.uniqueName,
            "visibility" === e.property && null != this.layerVisibility[t] && (this.layerVisibility[t] = e.layer.visibility,
            this._setLocalStorage(s.LOCAL_STORAGE_LAYER_VISIBILITY, this.layerVisibility),
            this._triggerStateChanged()),
            !0
        },
        _setLocalStorage: function(e, t) {
            if (!W.app.isSandboxMode())
                return a.localStorage.set(e, t)
        },
        updateMapLocation: function(e) {
            var t, i;
            if (null == e && (e = W.location.code),
            t = this.map.getCenter(),
            i = this.map.getZoom(),
            null != t)
                return t.zoom = i,
                this.mapLocation = t,
                this.locationsPerEnv[e] = t,
                this._setLocalStorage(s.LOCAL_STORAGE_MAP_LOCATION, this.locationsPerEnv),
                this.isMapLocationChanged = !0,
                this._triggerStateChanged(),
                !0
        },
        _getSelectedFeaturesByType: function() {
            var e, t, i, n, s, r;
            for (r = {},
            s = this.selectionManager.selectedItems,
            t = 0,
            n = s.length; t < n; t++)
                e = s[t],
                e.model.isNew() || (i = r[e.model.type + "s"] || [],
                r[e.model.type + "s"] = i,
                i.push(e.model.getID()));
            return this.selectedProblem && (r[this.selectedProblem.type] = this.selectedProblem.getID()),
            r
        },
        _onSelectionChanged: function(e) {
            return this._updateMapSelection(),
            !0
        },
        _onProblemShown: function(e) {
            return this.selectedProblem = e,
            this._updateMapSelection()
        },
        _onProblemClosed: function() {
            return this.selectedProblem = null ,
            this._updateMapSelection()
        },
        _updateMapSelection: function() {
            return this.mapSelection = this._getSelectedFeaturesByType(),
            this._triggerStateChanged()
        },
        _triggerStateChanged: function() {
            return this.trigger("statechanged", {
                center: this._getProjectedCenter(),
                layers: this._getLayerVisibilityBitmask(),
                selection: this.mapSelection,
                marker: this.marker
            })
        },
        _getProjectedCenter: function() {
            var e, t;
            return t = this.mapLocation.zoom,
            e = this.mapLocation.clone(),
            e.transform(this.map.getProjectionObject(), this.map.displayProjection),
            e.zoom = t,
            e
        },
        _restoreLayerVisibility: function() {
            this._enableLayersFromPermalink(),
            this._enableLayersWithSelectedObjects()
        },
        _enableLayersFromPermalink: function() {
            var e, t, i, n, r;
            if (this.urlParams.layers && /^\d+$/.test(this.urlParams.layers)) {
                t = this._layerVisibilityBitmask,
                i = [];
                for (n in t)
                    u.call(t, n) && (e = t[n],
                    r = 0 !== (this.urlParams.layers & 1 << e),
                    i.push(this.layerVisibility[n] = r));
                return i
            }
            return this.layerVisibility = _.extend(this.layerVisibility, a.localStorage.get(s.LOCAL_STORAGE_LAYER_VISIBILITY))
        },
        _enableLayersWithSelectedObjects: function() {
            null != this.mapSelection && this._enableLayersByRepos(_.keys(this.mapSelection))
        },
        _enableLayersByRepos: function(e) {
            var t, i, n, s, r, o;
            for (this.preselectedProblem && e.push(this.preselectedProblem.repo.name),
            n = this.map.getLayersByRepos(e),
            o = [],
            t = 0,
            s = e.length; t < s; t++)
                r = e[t],
                null != n[r] ? o.push(function() {
                    var e, t, s, o;
                    for (s = n[r],
                    o = [],
                    e = 0,
                    t = s.length; e < t; e++)
                        i = s[e],
                        o.push(this.layerVisibility[i.uniqueName] = !0);
                    return o
                }
                .call(this)) : o.push(void 0);
            return o
        },
        _restoreMapLocation: function() {
            var e, t, i, n;
            return this.locationsPerEnv = a.localStorage.get(s.LOCAL_STORAGE_MAP_LOCATION),
            null == this.locationsPerEnv && (this.locationsPerEnv = {}),
            i = this.locationsPerEnv[W.location.code],
            this.urlParams.lat && this.urlParams.lon ? (e = new OL.LonLat(parseFloat(this.urlParams.lon),parseFloat(this.urlParams.lat)),
            e.transform(this.map.displayProjection, this.map.getProjectionObject()),
            this.urlParams.zoom && (n = parseFloat(this.urlParams.zoom),
            e.zoom = n),
            this.mapLocation = e,
            this.isMapLocationChanged = !0) : null != i ? (t = new OL.LonLat(i.lon,i.lat),
            t.zoom = i.zoom,
            this.mapLocation = t,
            this.isMapLocationChanged = !0) : void 0
        },
        _restoreMarker: function() {
            return this.marker = this.urlParams.marker
        },
        _restoreSelection: function() {
            var e, t, i, n, s, r, o;
            for (r = W.Config.permalink.features,
            o = [],
            t = 0,
            n = r.length; t < n; t++)
                s = r[t],
                e = [],
                i = this.urlParams[s],
                i ? (i instanceof Array || (i = [i]),
                o.push(this.mapSelection[s] = i)) : o.push(void 0);
            return o
        },
        _selectObjects: function() {
            var e, t, i, n, s, r, o, a, l;
            if (W.model.events.unregister("mergeend", this, this._selectObjects),
            this.mapSelection) {
                n = [],
                a = this.mapSelection;
                for (i in a)
                    if (u.call(a, i) && (t = a[i],
                    l = W.model[i],
                    t && l))
                        for (s = 0,
                        o = t.length; s < o; s++)
                            r = t[s],
                            e = l.get(r),
                            e && n.push(e);
                n.isEmpty() || this.selectionManager.select(n)
            }
            return this._selectProblem()
        },
        _restoreProblemSelection: function() {
            var e, t, i, n, s, r;
            for (s = [W.model.mapUpdateRequests, W.model.problems],
            e = 0,
            i = s.length; e < i; e++)
                if (r = s[e],
                n = r.objectType,
                t = this.urlParams[n],
                null != t)
                    return void (this.preselectedProblem = {
                        repo: r,
                        problemID: t
                    })
        },
        _selectProblem: function() {
            var e;
            this.preselectedProblem && (e = this.preselectedProblem.repo.get(this.preselectedProblem.problemID),
            e && W.commands.execute("problems:show", e))
        },
        _setupMap: function() {
            var e, t, i, n, s, r, o;
            s = this.layerVisibility;
            for (r in s)
                u.call(s, r) && (o = s[r],
                this.map.setLayerVisibility(r, o));
            return this._setMapLocation(),
            this.marker && (i = new OL.Layer.Vector("PermalinkMarker",{
                styleMap: l.permalinkMarker,
                displayInLayerSwitcher: !1
            }),
            e = this.mapLocation ? this.mapLocation.clone() : this.map.getCenter(),
            t = new OL.Geometry.Point(e.lon,e.lat),
            n = new OL.Feature.Vector(t),
            this.map.addLayer(i),
            i.addFeatures(n)),
            W.model.events.register("mergeend", this, this._selectObjects)
        },
        _setMapLocation: function() {
            var e;
            if (this.mapLocation)
                return e = this.mapLocation.clone(),
                this.map.setCenter(e, this.mapLocation.zoom)
        },
        _restore: function() {
            return this.urlParams = OL.Util.getParameters(window.location.href),
            this._restoreMapLocation(),
            this._restoreMarker(),
            this._restoreSelection(),
            this._restoreProblemSelection(),
            this._restoreLayerVisibility(),
            this._setupMap()
        }
    }),
    _.extend(s, {
        LOCAL_STORAGE_MAP_LOCATION: "mapLocation",
        LOCAL_STORAGE_LAYER_VISIBILITY: "layerVisibility"
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r;
    n = i(296),
    r = {
        NotConnected: 0,
        FirstConnection: 1,
        Reconnection: 2
    },
    s = Backbone.Model.extend({
        socket: null ,
        displayProjection: new OpenLayers.Projection("EPSG:4326"),
        initialize: function() {
            return this.mode = r.NotConnected,
            W.app.on("change:loggedIn", this._onLoginChanged, this)
        },
        _onLoginChanged: function() {
            if (W.app.get("loggedIn"))
                return this.activate()
        },
        activate: function() {
            var e, t, i;
            if (null == this.socket) {
                e = {};
                try {
                    i = $.cookie(n.prototype.COOKIE_NAME)
                } catch (e) {}
                return e.sessionId = i,
                t = Waze.Config.marx.server + "/chat?" + $.param(e),
                this.socket = io.connect(t, {
                    "try multiple transports": !1
                }),
                this.socket.on("connect", function(e) {
                    return function() {
                        return e.mode === r.NotConnected ? (e.mode = r.FirstConnection,
                        e.trigger("firstConnect")) : (e.mode = r.Reconnection,
                        e.trigger("reconnect"))
                    }
                }(this)),
                this.socket.on("disconnect", function(e) {
                    return function() {
                        return e.trigger("disconnect")
                    }
                }(this))
            }
        },
        CLASS_NAME: "Waze.Model.Marx"
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    s = i(4),
    n = OL.Class(s, {
        MATCH_TYPE: {
            UNMATCHED: "UNMATCHED",
            MATCHED: "MATCHED",
            PAVED: "PAVED"
        },
        nested: {
            geometry: OL.Geometry
        },
        isMatched: function() {
            return this.matchType === this.MATCH_TYPE.MATCHED
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        constructor: function() {
            Backbone.Model.prototype.constructor.apply(this, arguments),
            Object.freeze(this.attributes),
            this.set = this._error
        },
        _error: function() {
            throw new TypeError("Cannot change attributes of an immutable object")
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s;
    n = i(4),
    s = OL.Class(n, {
        getAllSegments: function() {
            return this.model.segments.getByIds(this.segIDs)
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(4),
    s = OL.Class(n, {
        nested: {
            point: OL.Geometry
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a;
    o = i(59),
    r = i(551),
    n = i(84),
    s = i(133),
    a = OL.Class({
        TYPE: {
            VENUE: "VENUE",
            REQUEST: "REQUEST",
            IMAGE: "IMAGE"
        },
        SUB_TYPE: {
            UPDATE: "UPDATE",
            DELETE: "DELETE",
            FLAG: "FLAG"
        },
        initialize: function(e) {
            return _.extend(this, e)
        },
        build: function(e) {
            return this._isFlag(e) ? this._buildFlag(e) : this._buildRegularUpdate(e)
        },
        _isFlag: function(e) {
            return e.type === this.TYPE.REQUEST && e.subType === this.SUB_TYPE.FLAG
        },
        _buildFlag: function(e) {
            return new r({
                subject: e.flagSubjectType,
                type: e.flagType,
                comment: e.flagComment,
                place: e.place,
                dateAdded: e.dateAdded,
                createdBy: e.createdBy,
                entityId: e.flagEntityID,
                id: e.id,
                isInEditArea: this.isInEditArea,
                isEditable: this.isEditable,
                isAdLockedEditable: this.isAdLockedEditable
            })
        },
        _buildRegularUpdate: function(e) {
            var t, i, n;
            return n = o.prototype.SUBJECT.VENUE,
            t = o.prototype.ACTION.ADD,
            e.type === this.TYPE.REQUEST ? t = e.subType === this.SUB_TYPE.UPDATE ? o.prototype.ACTION.UPDATE : o.prototype.ACTION.DELETE : e.type === this.TYPE.IMAGE && (n = o.prototype.SUBJECT.IMAGE),
            i = this._parseChangedFields(e.changedVenue, e.place),
            new o({
                action: t,
                subject: n,
                changedFields: i,
                place: e.place,
                dateAdded: e.dateAdded,
                createdBy: e.createdBy,
                id: e.id,
                isInEditArea: this.isInEditArea,
                isEditable: this.isEditable,
                isAdLockedEditable: this.isAdLockedEditable
            })
        },
        _parseChangedFields: function(e, t) {
            var i, r, o, a, l;
            return null == e && (e = {}),
            o = ["permissions", "categoryAttributes"],
            l = _.omit(e, o),
            i = e.categoryAttributes || {},
            r = i.PARKING_LOT || {},
            a = [].concat(n.build(l, t)).concat(s.build(r, t))
        }
    }),
    e.exports = a
}
, function(e, t, i) {
    var n, s;
    s = i(59),
    n = s.extend({
        TYPE: {
            CLOSED: "CLOSED",
            MOVED: "MOVED",
            RESIDENTIAL: "RESIDENTIAL",
            DUPLICATE: "DUPLICATE",
            INAPPROPRIATE: "INAPPROPRIATE",
            WRONG_DETAILS: "WRONG_DETAILS",
            LOW_QUALITY: "LOW_QUALITY",
            UNRELATED: "UNRELATED",
            OTHER: "OTHER"
        },
        initialize: function() {
            if (this.set("updateType", "flag"),
            this.isImage() && this.set("imageId", this.get("entityId")),
            this.isVenue() && this.get("type") === this.TYPE.DUPLICATE)
                return this.set("duplicateVenueId", this.get("entityId"))
        },
        getDuplicateVenue: function() {
            var e;
            return e = this.get("duplicateVenueId"),
            this.get("place").model.venues.get(e)
        },
        getImage: function() {
            return this._findImage(this.getImageId())
        },
        getImageId: function() {
            return this.get("imageId")
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i;
    i = OL.Class({
        _currentIndex: 0,
        _venues: null ,
        initialize: function(e) {
            this._venues = _.filter(e, function(e) {
                return e.areUpdateRequestsEditable() && e.hasOpenUpdateRequests() && !e.attributes.residential && !e.attributes.adLocked
            })
        },
        sortByDistanceFrom: function(e) {
            var t;
            return this.reset(),
            t = e.geometry.getBounds().getCenterLonLat(),
            this._venues = _(this._venues).sortBy(function(e) {
                var i, n, s;
                return s = e.geometry.getBounds().getCenterLonLat(),
                i = t.lon - s.lon,
                n = t.lat - s.lat,
                i * i + n * n
            })
        },
        getNext: function() {
            return this._currentIndex >= this._venues.length ? null : this._venues[this._currentIndex++]
        },
        reset: function() {
            return this._currentIndex = 0
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        defaults: {
            id: 1,
            isImperial: null ,
            twoWaySegmentsByDefault: !1,
            enableTurnsByDefault: !1,
            requireFeatureDeselect: !1
        },
        localStorage: new Backbone.LocalStorage("preferences"),
        initialize: function() {
            return this.on("change", function(e) {
                return function() {
                    return e.save()
                }
            }(this))
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s;
    s = i(6),
    n = Backbone.Model.extend({
        LOCAL_STORAGE_KEY: "layerFilters",
        defaults: {
            mapProblem: 0,
            mapUpdateRequest: 0,
            venue: 0
        },
        initialize: function() {
            return this.on("change", function(e) {
                return function() {
                    return e.persist()
                }
            }(this))
        },
        persist: function() {
            return s.localStorage.set(this.LOCAL_STORAGE_KEY, this.toJSON())
        }
    }),
    n.restore = function() {
        var e;
        return e = s.localStorage.get(n.prototype.LOCAL_STORAGE_KEY),
        new n(e)
    }
    ,
    e.exports = n
}
, function(e, t, i) {
    var n, s, r;
    n = i(39),
    s = i(129),
    r = OL.Class(n, {
        MIN_CONVERAGE: .9,
        getInvalidEnvs: function() {
            return this.getObjectArray(function(e) {
                return function(t) {
                    var i;
                    return i = t.attributes.geometry.getArea() / e.currentDataBounds.toGeometry().getArea(),
                    t.attributes.type === s.TYPE.INVALID_ENV && i >= e.MIN_CONVERAGE
                }
            }(this))
        }
    }),
    e.exports = r
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        TYPE: {
            ENTRY: "entry",
            EXIT: "exit"
        },
        defaults: function() {
            return {
                paths: []
            }
        },
        getID: function() {
            return this.get("graphNode").getID()
        },
        getGeometry: function() {
            var e, t;
            return e = this.get("graphNode"),
            t = e.node,
            t.geometry.clone()
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s;
    n = i(119),
    s = OL.Class({
        graphNodes: null ,
        initialize: function(e) {
            this.junction = e,
            this.graphNodes = []
        },
        appendNode: function(e) {
            return this.graphNodes.push(e)
        },
        removeLastNode: function() {
            return this.graphNodes.pop()
        },
        isPathLegal: function() {
            return this.graphNodes.length >= 2
        },
        build: function() {
            var e, t;
            return e = _.first(this.graphNodes),
            t = _.last(this.graphNodes),
            new n({
                fromSegID: e.segment.getID(),
                fromSegFwd: e.isForward,
                toSegID: t.segment.getID(),
                toSegFwd: t.isForward,
                junctionID: this.junction.getID(),
                segmentPath: this._getShortSegmentIDs()
            })
        },
        _getShortSegmentIDs: function() {
            var e;
            return e = this.graphNodes.slice(1, -1).map(function(e) {
                return e.segment.getID()
            })
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    s = i(11),
    n = OL.Class(OL.Marker, {
        EVENT_SUFFIX: ".access-point-view",
        initialize: function(e, t, i) {
            this.accessPoint = e,
            this.icon = new s("path-access-point"),
            OL.Marker.prototype.initialize.call(this, t, this.icon),
            this.icon.$div.text(i),
            this.icon.$div.addClass(this.accessPoint.get("type")),
            this.icon.$div.on("mouseenter" + this.EVENT_SUFFIX, function(e) {
                return function() {
                    return e.events.triggerEvent("hover", {
                        accessPoint: e.accessPoint
                    })
                }
            }(this)),
            this.icon.$div.on("mouseout" + this.EVENT_SUFFIX, function(e) {
                return function() {
                    return e.events.triggerEvent("unhover", {
                        accessPoint: e.accessPoint
                    })
                }
            }(this))
        },
        erase: function() {
            return this.icon.$div.off(this.EVENT_SUFFIX)
        },
        setSelected: function(e) {
            return e ? this.icon.$div.addClass("selected") : this.icon.$div.removeClass("selected")
        },
        addOffset: function() {
            return this.icon.$div.addClass("offset")
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r;
    s = i(561),
    r = i(562),
    n = Marionette.Controller.extend({
        initialize: function() {
            var e, t, i, n, o, a, l, u, c, d, h, p;
            for (this.junction = this.options.junction,
            n = this.junction.getEntryPoints(),
            o = this.junction.getExitPoints(),
            t = {},
            h = n.concat(o),
            a = l = 0,
            c = h.length; l < c; a = ++l)
                e = h[a],
                t[e.getID()] = String.fromCharCode("A".charCodeAt() + a);
            for (u = 0,
            d = n.length; u < d; u++)
                i = n[u],
                p = _.sortBy(i.get("paths"), function(e) {
                    return t[e.getExitGraphNode().getID()]
                }),
                i.set({
                    paths: p
                });
            return this.listView = new s({
                el: this.options.listContainer,
                accessPointNames: t,
                enableEditing: this.options.enableEditing,
                collection: new Backbone.Collection(n)
            }),
            this.mapView = new r({
                map: this.options.map,
                accessPointNames: t,
                entryPoints: n,
                exitPoints: o,
                junction: this.junction
            }),
            this.listenTo(this.listView, "pathHovered", function(e) {
                return function(t) {
                    return e.mapView.drawPaths([t])
                }
            }(this)),
            this.listenTo(this.listView, "pathUnhovered", function(e) {
                return function(t) {
                    return e.mapView.removeAllPaths()
                }
            }(this)),
            this.listenTo(this.listView, "pathNavigableChanged", function(e) {
                return function(t, i) {
                    return e.trigger("pathNavigableChanged", t, i)
                }
            }(this)),
            this.listView.render()
        },
        onDestroy: function() {
            return this.mapView.destroy(),
            this.listView.destroy()
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        template: "Waze/Modules/BigJunction/templates/path_item",
        events: {
            "mouseenter .path-item": "_onPathHovered",
            "mouseleave .path-item": "_onPathUnhovered",
            "change .navigable-checkbox": "_onNavigableChanged"
        },
        serializeData: function() {
            return {
                paths: this.model.get("paths"),
                accessPointNames: this.options.accessPointNames,
                enableEditing: this.options.enableEditing
            }
        },
        _onPathHovered: function(e) {
            return this.trigger("pathHovered", this._getPathFromElement(e))
        },
        _onPathUnhovered: function(e) {
            return this.trigger("pathUnhovered", this._getPathFromElement(e))
        },
        _onNavigableChanged: function(e) {
            var t;
            return t = $(e.target).is(":checked"),
            this.trigger("pathNavigableChanged", this._getPathFromElement(e), t)
        },
        _getPathFromElement: function(e) {
            var t;
            return t = $(e.currentTarget).data("path-index"),
            this.model.get("paths")[t]
        },
        templateHelpers: {
            getPathName: function(e) {
                var t, i;
                return t = this.getFromName(e),
                i = this.getToName(e),
                t + " to " + i
            },
            getFromName: function(e) {
                return this.accessPointNames[e.getEntryGraphNode().getID()]
            },
            getToName: function(e) {
                return this.accessPointNames[e.getExitGraphNode().getID()]
            },
            getCheckboxID: function(e, t) {
                return "navigable-checkbox-" + e.cid
            }
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s;
    n = i(560),
    s = Marionette.CollectionView.extend({
        template: "Waze/Modules/BigJunction/templates/path_list",
        childView: n,
        childViewOptions: function() {
            return {
                accessPointNames: this.options.accessPointNames,
                enableEditing: this.options.enableEditing
            }
        },
        events: {
            "click .add": "_onAddClicked"
        },
        childEvents: function() {
            return {
                pathHovered: this._onPathHovered,
                pathUnhovered: this._onPathUnhovered,
                pathNavigableChanged: this._onPathNavigableChanged
            }
        },
        _onPathHovered: function(e, t) {
            return this.trigger("pathHovered", t)
        },
        _onPathUnhovered: function(e, t) {
            return this.trigger("pathUnhovered", t)
        },
        _onPathNavigableChanged: function(e, t, i) {
            return this.trigger("pathNavigableChanged", t, i)
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o = {}.hasOwnProperty;
    n = i(558),
    r = i(75),
    s = Marionette.Controller.extend({
        _pathVectors: null ,
        _idToMarker: null ,
        initialize: function() {
            return this._idToMarker = {},
            this.map = this.options.map,
            this.pathLayer = this.map.bigJunctionPathLayer,
            this.driveRenderer = new r(this.pathLayer),
            this.accessPointLayer = new OL.Layer.Markers("accessPointLayer",{
                displayInLayerSwitcher: !1
            }),
            this.map.addLayer(this.accessPointLayer),
            this._drawAccessPoints(),
            this._drawShortSegments()
        },
        drawPaths: function(e) {
            var t, i, n, s;
            for (this.removeAllPaths(),
            this._pathVectors = e.map(function(e) {
                return function(t) {
                    var i;
                    return i = t.getStenciledGeometry(e.options.junction.geometry),
                    e.driveRenderer.drawSuggestedRoute(i)
                }
            }(this)),
            s = [],
            t = 0,
            i = e.length; t < i; t++)
                n = e[t],
                s.push(this._highlightMarkers(n));
            return s
        },
        removeAllPaths: function() {
            var e, t, i, n, s, r, a;
            s = this._idToMarker;
            for (t in s)
                o.call(s, t) && (n = s[t],
                n.setSelected(!1));
            if (null !== this._pathVectors) {
                for (r = this._pathVectors,
                e = 0,
                i = r.length; e < i; e++)
                    a = r[e],
                    this.pathLayer.removeFeatures(a);
                return this._pathVectors = null
            }
        },
        _drawAccessPoints: function() {
            var e, t, i, s, r, o, a, l, u, c, d, h, p, g, m;
            for (s = {},
            p = this.options.exitPoints.concat(this.options.entryPoints),
            g = [],
            r = 0,
            l = p.length; r < l; r++)
                e = p[r],
                o = e.getID(),
                h = this.options.accessPointNames[o],
                m = e.get("graphNode").segment.geometry,
                i = this.options.junction.geometry.distanceTo(m, {
                    details: !0
                }),
                u = i.x0,
                a = i.y0,
                c = new OL.LonLat(u,a),
                d = new n(e,c,h),
                t = c.toString(),
                s[t] && d.addOffset(),
                s[t] = !0,
                d.events.on({
                    hover: this._onAccessPointHover,
                    unhover: this._onAccessPointUnhover,
                    scope: this
                }),
                this._idToMarker[o] = d,
                g.push(this.accessPointLayer.addMarker(d));
            return g
        },
        _highlightMarkers: function(e) {
            var t, i, n, s, r, o, a;
            for (t = this._idToMarker[e.getEntryPoint().getID()],
            i = this._idToMarker[e.getExitPoint().getID()],
            o = [t, i],
            a = [],
            n = 0,
            s = o.length; n < s; n++)
                r = o[n],
                null != r && r.setSelected(!0),
                a.push(null != r ? r.icon.bringToFront() : void 0);
            return a
        },
        _drawShortSegments: function() {
            var e, t, i, n, s;
            for (i = this.options.junction.getShortSegments(),
            n = [],
            e = 0,
            t = i.length; e < t; e++)
                s = i[e],
                n.push(this.driveRenderer.drawShortSegment(s.geometry.clone()));
            return n
        },
        _onAccessPointHover: function(e) {
            return this.drawPaths(e.accessPoint.get("paths"))
        },
        _onAccessPointUnhover: function() {
            return this.removeAllPaths()
        },
        onDestroy: function() {
            return this._idToMarker = null ,
            this.pathLayer.removeAllFeatures(),
            this.map.removeLayer(this.accessPointLayer),
            this.accessPointLayer.destroy()
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r;
    n = i(134),
    s = i(557),
    r = OL.Class({
        MAX_PATHS: 100,
        initialize: function(e) {
            this.bigJunction = e
        },
        getAllPaths: function() {
            var e, t, i, n, r, o, a;
            for (r = [],
            o = this._getEntryGraphNodes(),
            t = 0,
            i = o.length; t < i; t++)
                e = o[t],
                n = new s(this.bigJunction),
                a = {},
                this._findAllPaths(e, n, a, r);
            return r
        },
        _findAllPaths: function(e, t, i, n) {
            var s, r, o, a;
            if (!(n.length >= this.MAX_PATHS)) {
                for (i[e] = !0,
                t.appendNode(e),
                a = e.getConnectedGraphNodes(),
                r = 0,
                o = a.length; r < o; r++)
                    s = a[r],
                    this._isSegmentOutOfBigJunction(s.segment) ? t.isPathLegal() && (t.appendNode(s),
                    n.push(t.build()),
                    t.removeLastNode()) : i[s] || this._findAllPaths(s, t, i, n);
                return t.removeLastNode(),
                i[e] = !1
            }
        },
        _getEntryGraphNodes: function() {
            var e, t, i, s, r, o, a, l;
            for (i = [],
            r = this.bigJunction.getID(),
            a = this._getAccessSegments(),
            s = 0,
            o = a.length; s < o; s++)
                l = a[s],
                e = null ,
                l.hasFromBigJunction(r) && l.attributes.revDirection ? e = !1 : l.hasToBigJunction(r) && l.attributes.fwdDirection && (e = !0),
                null !== e && (t = n.forSegmentInDirection(l, e),
                i.push(t));
            return i
        },
        _getAccessSegments: function() {
            var e, t, i, n, s;
            for (n = [],
            i = this.bigJunction.getShortSegments(),
            e = 0,
            t = i.length; e < t; e++)
                s = i[e],
                n = n.concat(s.getConnectedSegmentsByDirection("from")),
                n = n.concat(s.getConnectedSegmentsByDirection("to"));
            return n = n.filter(this._isSegmentOutOfBigJunction),
            _.uniq(n, function(e) {
                return e.getID()
            })
        },
        _isSegmentOutOfBigJunction: function(e) {
            return !e.isBigJunctionShort() && e.isDrivable()
        }
    }),
    r.for = function(e) {
        return new r(e)
    }
    ,
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h, p;
    d = i(76),
    r = i(457),
    o = i(105),
    a = i(458),
    s = i(459),
    n = i(565),
    c = i(17),
    l = i(456),
    u = c.LAYER_TYPE,
    h = "city",
    p = "cities",
    e.exports = {
        entryPoint: {
            callback: "init",
            class: l
        },
        feature: {
            repositoryName: p,
            repositoryClass: a,
            featureType: h,
            modelClass: o,
            featureEditorClass: s,
            repositoryConfig: {
                onDemand: !1,
                storePersistentSeparately: !0
            }
        },
        layers: [{
            type: u.FEATURE,
            uniqueName: d.FEATURES_LAYER_NAME,
            permalinkBitNumber: 15,
            options: {
                objectType: h,
                selectable: !0,
                toggleable: !1,
                visibleByDefault: !1
            }
        }, {
            type: u.MARKER,
            uniqueName: d.MARKERS_LAYER_NAME,
            permalinkBitNumber: 16,
            parentLayerUniqueName: d.RASTER_LAYER_NAME,
            options: {
                name: I18n.t("layers.name.city_names"),
                objectType: h,
                toggleable: !1,
                visibleByDefault: !1,
                markerClass: r,
                filter: function(e) {
                    return e.showMarker()
                }
            }
        }, {
            type: u.RASTER,
            uniqueName: d.RASTER_LAYER_NAME,
            permalinkBitNumber: 1,
            options: {
                uniqueName: "cities",
                visible: !1,
                type: "mapnik",
                options: {
                    alpha: !1,
                    opacity: 1,
                    transitionEffect: null ,
                    isBaseLayer: !1,
                    zoomOffset: 12,
                    draggable: !0,
                    gutter: 0
                },
                params: {
                    clientLayer: "cities"
                }
            },
            layerSwitcherOptions: {
                viewClass: n,
                options: {
                    translations: I18n.t("layer_switcher.filters.city_names")
                }
            }
        }]
    }
}
, function(e, t, i) {
    var n, s, r;
    r = i(76),
    n = i(89),
    s = n.extend({
        template: "Waze/Modules/Toolbar/templates/layer-switcher-filter",
        events: {
            "click .closed-filter": "_onFilterClicked"
        },
        initialize: function() {
            return this.layer = this.model.get("layer"),
            this.cityNamesLayer = W.map.getLayerByUniqueName(r.MARKERS_LAYER_NAME),
            this.filter = this.cityNamesLayer.getVisibility()
        },
        serializeData: function() {
            return {
                layer: this.layer,
                filter: this.filter,
                onText: this.options.translations.active,
                offText: this.options.translations.inactive
            }
        },
        _onFilterClicked: function() {
            return this.filter = !this.filter,
            this.cityNamesLayer.setVisibility(this.filter)
        }
    }),
    s.prototype.events = _.extend(s.prototype.events, n.prototype.events),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c;
    l = i(130),
    a = i(71),
    n = i(488),
    c = i(496),
    o = i(490),
    u = i(32),
    r = u.DIRECTION,
    s = {
        nextClosureID: -101,
        add: function(e) {
            var t, i, s, r, o, a, l, u, c, d;
            for (t = [],
            c = e.get("segments"),
            o = 0,
            l = c.length; o < l; o++)
                for (d = c[o],
                r = e.calculateForwardValuesForSegment(d.getID()),
                a = 0,
                u = r.length; a < u; a++)
                    s = r[a],
                    i = this._createRoadClosure(e, d.getID()),
                    i.forward = s,
                    t.push(new n(i,d));
            return this._wrapInMultiAction(t)
        },
        _createRoadClosure: function(e, t) {
            var i;
            return i = new l({
                id: this._getNewClosureID(),
                segID: t,
                active: !0
            }),
            e.saveSimpleFieldsToClosure(i),
            i
        },
        delete: function(e) {
            var t;
            return t = _.map(e.get("closures"), function(t) {
                var i;
                return i = e.findSegmentByID(t.segID),
                new o(t,i)
            }),
            this._wrapInMultiAction(t)
        },
        update: function(e) {
            var t, i, n, s, r, a, l, u, c, d;
            for (t = [],
            s = e.get("closures"),
            a = e.isOppositeToOriginal(),
            i = this._changedToOneWay(e),
            d = this._shouldUpdate(e),
            c = this._shouldCreateOpposite(e),
            r = 0,
            l = s.length; r < l; r++)
                n = s[r],
                a ? (t.push(this._createAddOppositeAction(e, n)),
                u = e.findSegmentByID(n.segID),
                t.push(new o(n,u))) : i && this._hasObsoleteDirection(e, n) ? (u = e.findSegmentByID(n.segID),
                t.push(new o(n,u))) : (d && t.push(this._createUpdateAction(e, n)),
                c && t.push(this._createAddOppositeAction(e, n)));
            return this._wrapInMultiAction(t)
        },
        _shouldUpdate: function(e) {
            return e.hasChanged()
        },
        _createUpdateAction: function(e, t) {
            var i;
            return i = new l(t),
            e.saveSimpleFieldsToClosure(i),
            e.isOppositeToOriginal() && (i.forward = !i.forward),
            new c(i)
        },
        _shouldCreateOpposite: function(e) {
            return e.differsFromOriginal("direction") && e.get("direction") === r.TWO_WAY
        },
        _createAddOppositeAction: function(e, t) {
            var i, s;
            return i = this._createRoadClosure(e, t.segID),
            i.forward = !t.forward,
            s = e.findSegmentByID(t.segID),
            new n(i,s)
        },
        _getNewClosureID: function() {
            return this.nextClosureID--
        },
        _changedToOneWay: function(e) {
            return e.differsFromOriginal("direction") && e.original("direction") === r.TWO_WAY
        },
        _hasObsoleteDirection: function(e, t) {
            var i;
            return i = e.calculateForwardValuesForSegment(t.segID),
            !_.contains(i, t.forward)
        },
        applyToAllSegments: function(e, t, i) {
            var s, r, o, a, l, c, d, h, p, g, m;
            for (null == i && (i = {}),
            p = this._findMissingSegments(e, t),
            s = [],
            m = new u({
                segments: p,
                reverseSegments: i,
                direction: e.get("direction")
            }),
            l = 0,
            d = p.length; l < d; l++)
                for (g = p[l],
                a = m.calculateForwardValuesForSegment(g.getID()),
                c = 0,
                h = a.length; c < h; c++)
                    o = a[c],
                    r = this._createRoadClosure(e, g.getID()),
                    r.forward = o,
                    s.push(new n(r,g));
            return this._wrapInMultiAction(s)
        },
        _findMissingSegments: function(e, t) {
            return _.reject(t, function(t) {
                return null != e.findSegmentByID(t.getID())
            })
        },
        _wrapInMultiAction: function(e) {
            var t, i, n, s;
            for (s = new a,
            i = 0,
            n = e.length; i < n; i++)
                t = e[i],
                s.doSubAction(t);
            return s
        }
    },
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(32),
    s = Backbone.Collection.extend({
        model: n,
        findOpposite: function(e) {
            return this.find(function(t) {
                return t.isOppositeTo(e)
            })
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o = {}.hasOwnProperty;
    n = i(32),
    s = i(567),
    r = {
        getSharedClosures: function(e, t, i) {
            var r, a, l, u, c, d, h, p;
            null == t && (t = {}),
            null == i && (i = null ),
            r = _.indexBy(e, function(e) {
                return e.getID()
            }),
            i || (i = this._getClosuresForSegments(r)),
            l = _(i).groupBy(function(e) {
                return function(i) {
                    return e._getClosureKey(i, t)
                }
            }(this)),
            p = new s;
            for (u in l)
                o.call(l, u) && (a = l[u],
                d = _.chain(a).map(function(e) {
                    return r[e.segID]
                }).uniq().value(),
                h = new n({
                    closures: a,
                    segments: d,
                    partial: d.length !== e.length,
                    reverseSegments: this._getClosureReverseSegments(d, t)
                }),
                c = p.findOpposite(h),
                null != c ? c.mergeWithOpposite(h) : p.push(h));
            return p
        },
        _getClosuresForSegments: function(e) {
            return W.model.roadClosures.getObjectArray(function(t) {
                return null != e[t.segID]
            })
        },
        _getClosureReverseSegments: function(e, t) {
            var i;
            return i = _(e).invoke("getID"),
            _(t).pick(i)
        },
        _getClosureKey: function(e, t) {
            var i, n, s;
            return null == t && (t = {}),
            i = e.forward || !1,
            n = t[e.segID] === !0,
            n && (i = !i),
            s = [e.startDate, e.endDate, e.reason, e.location, i, e.createdBy, e.eventId].join(":")
        }
    },
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o;
    r = i(32),
    o = i(90),
    n = i(60),
    s = Marionette.ItemView.extend({
        template: "Waze/Modules/Closures/templates/edit",
        behaviors: {
            dateTimePickers: {
                behaviorClass: n
            }
        },
        bindings: {
            "[name=closure_event]": "event",
            "[name=closure_permanent]": "permanent",
            "[name=closure_reason]": "reason",
            "[name=closure_direction]": {
                observe: "direction",
                onGet: function(e) {
                    return "" + e
                },
                onSet: function(e) {
                    return parseInt(e, 10)
                }
            }
        },
        mteBindings: {
            ".mte-message-empty": {
                observe: ["startDate", "endDate"],
                visible: "_datesNotSet"
            },
            "[name=closure_eventId]": {
                observe: "eventId",
                attributes: [{
                    name: "disabled",
                    observe: ["startDate", "endDate"],
                    onGet: "_datesNotSet"
                }],
                update: function(e, t, i, n) {
                    var s;
                    if (Backbone.Stickit.getConfiguration(e).update.apply(this, arguments),
                    this.options.newClosure)
                        return s = o.selectionRequiredOption(I18n.t("closures.choose_event")),
                        e.prepend(s)
                },
                selectOptions: {
                    collection: "this.eventOptions",
                    defaultOption: {
                        label: "None",
                        value: null
                    }
                }
            }
        },
        ui: {
            form: "form",
            formSubmit: "form input[type=submit]",
            message: ".message",
            mteTooltip: ".mte-tooltip",
            permanentTooltip: ".permanent-tooltip"
        },
        events: {
            "change .start-time, .end-time, .start-date, .end-date": function() {
                if (this.options.canEditMTE)
                    return this._populateMTEOptions()
            },
            "click .save-button": "save",
            "submit form": "save"
        },
        triggers: {
            "click .cancel-button": "editCancelled"
        },
        initialize: function(e) {
            return this._populateMTEOptions()
        },
        onRender: function() {
            return this.stickit(this.model, this.bindings),
            this.options.canEditMTE && this.stickit(this.model, this.mteBindings),
            this.message = new W.brara.StatusMessageView(this.ui.message),
            this.ui.mteTooltip.tooltip(),
            this.ui.permanentTooltip.tooltip()
        },
        save: function(e) {
            var t;
            return "function" == typeof e.preventDefault && e.preventDefault(),
            this._hideErrors(),
            t = this.ui.form.get(0).checkValidity(),
            this.model.validate() && t ? this.trigger("save") : this._showErrors()
        },
        _datesNotSet: function() {
            return !this.model.get("startDate") || !this.model.get("endDate")
        },
        _showErrors: function() {
            var e, t, i, n;
            this.ui.formSubmit.click(),
            i = this.model.errors,
            n = [];
            for (t in i)
                e = i[t],
                n.push(this._showError(t, e));
            return n
        },
        _showError: function(e, t) {
            var i;
            return e = this.$el.find("[name=closure_" + e + "]"),
            i = e.closest(".form-group"),
            i.addClass("has-error"),
            $("<span>").addClass("help-block error-message").text(I18n.t("closures.validation." + t)).appendTo(i.find(".controls"))
        },
        _hideErrors: function() {
            return this.$el.find(".error-message").remove(),
            this.$el.find(".form-group").removeClass("has-error")
        },
        _populateMTEOptions: function() {
            var e, t, i, n;
            return e = this.options.availableEvents,
            n = this.model.get("startDate"),
            t = this.model.get("endDate"),
            n && (e = e.filter(function(e) {
                return new Date(e.get("startDate")) <= new Date(n)
            })),
            t && (e = e.filter(function(e) {
                return new Date(e.get("endDate")) >= new Date(t)
            })),
            i = e.map(function(e) {
                return {
                    label: e.getEnglishName() || e.getID(),
                    value: e.getID()
                }
            }),
            this.eventOptions = _.sortBy(i, function(e) {
                return e.label.toString().toLowerCase()
            }),
            this.model.get("eventId") && e.map(function(e) {
                return e.getID()
            }).indexOf(this.model.get("eventId")) < 0 && this.model.set("eventId", null ),
            this.stickit(this.model, this.mteBindings)
        },
        serializeData: function() {
            var e;
            return e = Marionette.ItemView.prototype.serializeData.apply(this, arguments),
            e.newClosure = this.options.newClosure,
            e.showHeader = this.options.newClosure,
            e.showFooterCancelButton = !this.options.newClosure,
            e.canEditMTE = this.options.canEditMTE,
            e
        },
        templateHelpers: {
            getProvider: function() {
                var e;
                return null != (e = this.closures[0]) ? e.provider : void 0
            }
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(32).DIRECTION,
    s = Marionette.ItemView.extend({
        template: "Waze/Modules/Closures/templates/item",
        className: "closure-item",
        tagName: "li",
        triggers: {
            "click .edit": "edit",
            "click .delete": "delete",
            "click .locate": "locate",
            "click .apply-to-all": "applyToAll"
        },
        serializeData: function() {
            var e;
            return e = Marionette.ItemView.prototype.serializeData.apply(this, arguments),
            e.isEndDateSet = this.model.isEndDateSet(),
            e.isStartDateSet = this.model.isStartDateSet(),
            e.startDate = this.model.getStartDate(),
            e.endDate = this.model.getEndDate(),
            e.showApplyToAll = this.model.attributes.partial && this.options.allowApplyToAll,
            e.description = this.options.getDescription(this.model),
            e.canEdit = this.options.canEdit,
            e.showLocateButton = this.options.showLocateButton,
            e.eventName = this._getEventName(),
            e.DIRECTION = n,
            e
        },
        _getEventName: function() {
            var e;
            return this.options.showEventName ? (e = this.options.dataModel.majorTrafficEvents.get(this.model.get("eventId")),
            null != e ? e.getEnglishName() : void 0) : null
        },
        templateHelpers: {
            formatTime: function(e) {
                return I18n.strftime(e, "%H:%M")
            }
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(570),
    s = Marionette.CompositeView.extend({
        template: "Waze/Modules/Closures/templates/list",
        className: "closures-list",
        childView: n,
        childViewOptions: function() {
            var e;
            return e = _.pick(this.options, ["dataModel", "canEdit"]),
            _.extend(e, this.options.extendedChildViewOptions)
        },
        ui: {
            message: ".message",
            partial: ".partial-closures",
            partialHeader: ".partial-closures-header",
            full: ".full-closures"
        },
        triggers: {
            "click .add-closure-button": "add"
        },
        initialize: function() {
            return this.on("childview:edit", function(e) {
                return function(t) {
                    return e.trigger("edit", t.model)
                }
            }(this)),
            this.on("childview:delete", function(e) {
                return function(t) {
                    return e.trigger("delete", t.model)
                }
            }(this)),
            this.on("childview:locate", function(e) {
                return function(t) {
                    return e.trigger("locate", t.model)
                }
            }(this)),
            this.on("childview:applyToAll", function(e) {
                return function(t) {
                    return e.trigger("applyToAll", t.model)
                }
            }(this))
        },
        attachHtml: function(e, t, i) {
            return t.model.get("partial") ? (this.ui.partial.append(t.el),
            this.ui.partialHeader.show()) : this.ui.full.append(t.el)
        },
        viewComparator: function(e, t) {
            var i, n, s, r;
            if (s = new Date(e.get("startDate")),
            r = new Date(t.get("startDate")),
            i = new Date(e.get("endDate")),
            n = new Date(t.get("endDate")),
            s > r)
                return 1;
            if (s === r) {
                if (i > n)
                    return 1;
                if (i === n)
                    return 0
            }
            return -1
        },
        onRender: function() {
            return this.message = new W.brara.StatusMessageView(this.ui.message),
            null != this.options.successMessage ? this.message.showSuccess(this.options.successMessage) : null != this.options.errorMessage ? this.message.showError(this.options.errorMessage) : void 0
        },
        serializeData: function() {
            return {
                canAdd: this.options.canAdd,
                canEdit: this.options.canEdit,
                showActivateRepoMessage: this.options.showActivateRepoMessage,
                showSaveMessage: this.options.showSaveMessage,
                showPartialClosuresHeader: this.options.showPartialClosuresHeader
            }
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d;
    s = i(460),
    r = i(573),
    n = i(574),
    o = i(38),
    u = i(17),
    a = u.LAYER_TYPE,
    c = "mapComment",
    l = "mapComments",
    d = "mapComments",
    e.exports = {
        feature: {
            repositoryName: d,
            featureType: c,
            modelClass: s,
            featureEditorClass: n
        },
        layers: [{
            type: a.FEATURE,
            uniqueName: l,
            permalinkBitNumber: 14,
            options: {
                name: I18n.t("layers.name.comments"),
                objectType: c,
                selectable: !0,
                toggleable: !0,
                visibleByDefault: !0,
                styleMap: r,
                enableZIndexing: !0,
                enableGeometryEditing: !0
            }
        }],
        menu: {
            name: "map-comments",
            displayClass: "waze-icon-bubble",
            items: [{
                title: "",
                featureName: I18n.t("drawing.map_comment"),
                primaryShape: "point",
                secondaryShape: "polygon",
                layerUniqueName: l,
                createFeature: function(e, t) {
                    var i, n;
                    return n = new s({
                        geometry: e
                    }),
                    i = new o(n,t.mapComments),
                    t.actionManager.add(i),
                    i.object
                }
            }]
        }
    }
}
, function(e, t) {
    var i, n, s, r, o, a, l, u, c, d, h, p, g;
    r = "#f8bf16",
    o = "#f8bf96",
    i = "#00ece3",
    n = "#ff8383",
    s = "#ff9292",
    h = {
        strokeColor: o,
        fillColor: r,
        strokeDashstyle: "solid",
        strokeOpacity: 1,
        strokeWidth: 2,
        fillOpacity: .3,
        graphicZIndex: "${getZIndex}"
    },
    d = {
        pointRadius: 6,
        strokeWidth: 2,
        strokeColor: "white",
        fillColor: r,
        graphicZIndex: 0,
        fillOpacity: 1
    },
    u = function(e) {
        var t;
        return t = W.defaultRule({
            Point: d,
            Polygon: h
        }),
        new OL.Style(null ,{
            rules: [t].concat(e),
            context: {
                getZIndex: function(e) {
                    var t;
                    return t = e.geometry.getBounds(),
                    -Math.floor(t.getHeight() * t.getWidth())
                }
            }
        })
    }
    ,
    p = W.defaultRule({
        Point: {
            fillColor: i,
            strokeColor: i,
            fontFamily: "FontAwesome",
            label: "",
            labelOutlineWidth: 0,
            fontColor: "white",
            fontSize: 11,
            labelYOffset: 0,
            pointRadius: 12,
            strokeOpacity: 1,
            fillOpacity: .3
        },
        Polygon: {
            strokeColor: i,
            fillColor: i
        }
    }),
    c = W.defaultRule({
        Point: {
            fillColor: n,
            strokeDashstyle: "dot",
            fillOpacity: .3
        },
        Polygon: {
            strokeDashstyle: "dash",
            strokeColor: "white",
            fillColor: n
        }
    }),
    l = W.rule("isUnchanged", !1, {
        Point: {
            fillColor: n
        },
        Polygon: {
            fillColor: n,
            strokeColor: n
        }
    }),
    a = W.rule("isUnchanged", !1, {
        Point: {
            fillColor: s
        },
        Polygon: {
            fillColor: s,
            strokeColor: s
        }
    }),
    g = W.rule("_sketch", !0, {
        externalGraphic: null ,
        strokeWidth: 3,
        strokeColor: "#00ece3",
        strokeOpacity: 1,
        pointRadius: 6,
        fillColor: "white",
        fillOpacity: 1,
        graphicZIndex: 0
    }),
    e.exports = new OL.StyleMap({
        default: u([g, l]),
        highlight: u([W.defaultRule({
            Point: {
                fontColor: "white",
                fontSize: 16,
                pointRadius: 12,
                fillColor: o,
                fillOpacity: 1,
                strokeOpacity: 1
            },
            Polygon: {
                strokeColor: o,
                fillColor: o
            }
        }), g, a]),
        select: u([p]),
        highlightselected: u([p]),
        delete: u([c]),
        highlightdeleted: u([c])
    })
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    o = i(24),
    a = i(461),
    s = i(138),
    r = i(60),
    l = i(48),
    n = o.extend({
        template: "Waze/Modules/Comments/templates/feature_editor",
        className: "map-comment-feature-editor",
        regions: {
            nameEditorRegion: ".name-editor-region",
            conversationRegion: ".conversation-region"
        },
        behaviors: {
            dateTimePickers: {
                behaviorClass: r,
                modelAttribute: "endDateModel"
            }
        },
        initialize: function() {
            o.prototype.initialize.apply(this, arguments),
            this.endDateModel = new Backbone.Model({
                endDate: this.model.attributes.endDate
            }),
            this.endDateModel.on("change:endDate", function(e) {
                return function(t, i, n) {
                    if (n.stickitChange)
                        return e.changed({
                            endDate: i
                        })
                }
            }(this))
        },
        onRender: function() {
            if (!this.model.isNew())
                return this._renderNameEditor(),
                this._renderConversationRegion()
        },
        _renderNameEditor: function() {
            var e;
            return e = new a({
                subject: this.model.attributes.subject,
                body: this.model.attributes.body,
                editable: this.model.arePropertiesEditable()
            }),
            e.on("changed", function(e) {
                return function(t) {
                    return e.changed(t)
                }
            }(this)),
            this.nameEditorRegion.show(e)
        },
        _renderConversationRegion: function() {
            var e;
            return e = new s({
                commentable: this.model,
                enabled: this.model.arePropertiesEditable()
            }),
            this.conversationRegion.show(e)
        },
        onFeaturesChanged: function(e) {
            if (o.prototype.onFeaturesChanged.apply(this, arguments),
            this.hasEditedModelChanged(e))
                return this.endDateModel.set({
                    endDate: this.model.attributes.endDate
                })
        },
        serializeData: function() {
            return {
                userRank: this.dataModel.loginManager.getUserRank(),
                editable: this.model.arePropertiesEditable(),
                comment: this.model
            }
        },
        isPointChanged: function(e) {
            var t, i;
            return i = "true" === e ? this.model.getPointGeometry() : this.model.getPolygonGeometry(),
            t = new l(this.model,this.dataModel.mapComments,this.model.geometry,i),
            this.preventRender(function(e) {
                return function() {
                    return e.dataModel.actionManager.add(t)
                }
            }(this))
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    s = i(9),
    n = Marionette.ItemView.extend({
        tagName: "li",
        className: "comment",
        template: "Waze/Modules/Conversation/templates/item",
        templateHelpers: {
            getUserName: function() {
                return this.isByReporter() ? I18n.t("conversation.reporter") : s.formatUserName(this.userID)
            },
            isByReporter: function() {
                return this.userID === -1
            },
            getCommentLines: function() {
                return this.text.split("\n")
            }
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        MAX_LENGTH: {
            STREET_NAME: 100,
            CITY_NAME: 100,
            HOUSE_NUMBER: 20
        },
        defaults: {
            houseNumber: "",
            streetName: "",
            emptyStreet: !1,
            cityName: "",
            emptyCity: !1,
            cityID: null ,
            stateID: null ,
            countryID: null ,
            addressFormShown: !1,
            editable: !0,
            fullAddress: ""
        },
        populateFromAddressModel: function(e, t) {
            var i;
            return i = e.attributes,
            this.set({
                cityID: i.city.getID(),
                cityName: i.city.attributes.name,
                emptyCity: i.city.isEmpty(),
                stateID: i.state.getID(),
                countryID: i.country.getID(),
                houseNumber: i.houseNumber
            }),
            null != i.street && this.set({
                streetName: i.street.name,
                emptyStreet: i.street.isEmpty
            }),
            this
        }
    }),
    i.fromAddress = function(e, t) {
        var n, s, r;
        return e.get("isEmpty") ? new i({
            countryID: null != (s = t.countries.top) ? s.getID() : void 0,
            stateID: null != (r = t.states.top) ? r.getID() : void 0
        }) : (n = new i,
        n.populateFromAddressModel(e, t),
        n)
    }
    ,
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    r = i(24),
    l = i(28),
    a = i(559),
    o = i(493),
    n = i(85),
    s = r.extend({
        events: _.extend({}, r.prototype.events, {
            "click .select-short-segments": "_selectShortSegments"
        }),
        template: "templates/big-junction-edit",
        ui: {
            pathListContainer: ".path-list-container"
        },
        regions: {
            addressEdit: ".address-edit"
        },
        previousGeometry: null ,
        pathEditController: null ,
        initialize: function(e) {
            return r.prototype.initialize.apply(this, arguments),
            this.selectionManager = this.options.selectionManager,
            this.previousGeometry = this.model.geometry
        },
        serializeData: function() {
            return {
                bigJunction: this.model,
                dataModel: this.dataModel
            }
        },
        _isStaffLocked: function() {
            return this.model.getLockRank() === l.prototype.StaffRank
        },
        _selectShortSegments: function(e) {
            var t;
            return t = this.dataModel.segments.getByIds(this.model.attributes.segIDs),
            this.selectionManager.select(t)
        },
        onRender: function() {
            var e;
            return this.addressEdit.show(new n({
                addressModel: this.model.getAddress(),
                dataModel: this.dataModel,
                feature: this.model,
                editable: this.model.arePropertiesEditable(),
                editStreet: !1
            })),
            null != (e = this.pathEditController) && e.destroy(),
            this.pathEditController = new a({
                junction: this.model,
                listContainer: this.ui.pathListContainer,
                enableEditing: this.dataModel.loginManager.canEditBigJunctions() && this.model.arePropertiesEditable(),
                map: W.map
            }),
            this.listenTo(this.pathEditController, "pathNavigableChanged", this._onPathNavigableChanged)
        },
        _onPathNavigableChanged: function(e, t) {
            var i;
            return i = new o(this.model,e,t),
            this.changing = !0,
            this.dataModel.actionManager.add(i),
            this.changing = !1
        },
        onDestroy: function() {
            var e;
            return null != (e = this.pathEditController) ? e.destroy() : void 0
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    s = i(24),
    n = s.extend({
        template: "templates/camera-edit"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h;
    n = i(577),
    s = i(578),
    o = i(580),
    l = i(1072),
    u = i(2),
    c = i(462),
    a = i(17),
    r = Marionette.Object.extend({
        TYPE_TO_EDITOR_CLASS: (d = {},
        d["" + u.SEGMENT] = c,
        d["" + u.VENUE] = o,
        d["" + u.NODE] = l,
        d["" + u.SPEED_CAMERA] = s,
        d["" + u.BIG_JUNCTION] = n,
        d),
        TYPE_TO_OPTIONS: (h = {},
        h["" + u.SEGMENT] = function() {
            return {
                selectionManager: this.options.selectionManager,
                reversedSegments: this.options.selectionManager.getReversedSegments()
            }
        }
        ,
        h["" + u.BIG_JUNCTION] = function() {
            return {
                selectionManager: this.options.selectionManager
            }
        }
        ,
        h),
        initialize: function() {
            var e, t, i, n, s, r, o;
            for (this.typeToEditorClass = _.clone(this.TYPE_TO_EDITOR_CLASS),
            s = a.getFeatureEditors(),
            o = [],
            i = 0,
            n = s.length; i < n; i++)
                r = s[i],
                t = r.featureType,
                e = r.featureEditorClass,
                o.push(this.typeToEditorClass[t] = e);
            return o
        },
        create: function() {
            var e, t, i, n, s, r, o, a;
            return o = this.options.selectionManager,
            e = this.options.dataModel,
            r = _(o.selectedItems).pluck("model"),
            i = r.first().type,
            t = this.typeToEditorClass[i],
            a = null != (s = this.TYPE_TO_OPTIONS[i]) ? s.call(this) : void 0,
            n = _.defaults({
                dataModel: e,
                selection: r
            }, a),
            new t(n)
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h, p, g, m, f, v, y, b;
    l = i(24),
    d = i(582),
    m = i(687),
    y = i(7),
    v = i(48),
    c = i(40),
    b = i(28),
    u = i(161),
    s = i(82).Item,
    r = i(82).Collection,
    o = i(671),
    a = i(677),
    f = i(141),
    n = i(85),
    g = i(140),
    p = i(581),
    h = l.extend({
        behaviors: {
            restoreLastTab: {
                behaviorClass: f
            }
        },
        ui: {
            categoriesTooltip: ".categories-tooltip"
        },
        events: _.extend({}, l.prototype.events, {
            "click .image-delete-button": "_onDeleteImageClicked",
            "click .image-preview-container": "_onImagePreviewClicked",
            "click .pending-changes-alert": "_onPendingChangesAlertClicked",
            "click .toggle-residential": "_onResidentialToggled",
            "click .convert-to-polygon": "_onConvertToPolygonClicked"
        }),
        template: "templates/venue/venue-edit",
        regions: {
            categoriesRegion: ".categories",
            openingHoursRegion: ".opening-hours",
            aliasesRegion: ".aliases-view",
            externalProvidersRegion: ".external-providers-view",
            moreInfoRegion: ".more-info",
            addressEdit: ".address-edit"
        },
        previousGeometry: null ,
        initialize: function(e) {
            if (l.prototype.initialize.apply(this, arguments),
            this.previousGeometry = null ,
            !this.model.isPoint())
                return this.previousGeometry = this.model.geometry
        },
        serializeData: function() {
            var e;
            return e = this._getApprovedImages(),
            {
                landmark: this.model,
                dataModel: this.dataModel,
                canEditType: this._canEditType(),
                canEditCategories: this._canEditCategories(),
                showStatesSelection: this.dataModel.hasStates(),
                showExternalProviderView: this._isExternalProviderEditingAllowed(),
                lockRankRange: this._getLockRankRange(),
                imageCount: e.length,
                hasImages: e.length > 0,
                showUnapprovedAlert: !this.model.attributes.approved,
                showPendingChangesAlert: this.model.hasUpdateRequests(),
                showRequiresModerationAlert: this._requiresModeration(),
                showAdLockedAlert: this.model.attributes.adLocked,
                brands: this._getBrands(),
                images: e
            }
        },
        _getServiceTypes: function() {
            return this.model.isParkingLot() ? c.prototype.SERVICE_TYPES.PARKING_LOT : c.prototype.SERVICE_TYPES.GENERAL
        },
        _getBrands: function() {
            var e;
            return e = [],
            this.model.isGasStation() && (e = this.dataModel.venues.categoryBrands.GAS_STATION),
            this.model.isParkingLot() && (e = this.dataModel.venues.categoryBrands.PARKING_LOT),
            e || []
        },
        _canEditType: function() {
            return !this.model.isParkingLot() || this.model.isPoint()
        },
        _canEditCategories: function() {
            return !this.model.isParkingLot()
        },
        _getApprovedImages: function() {
            return _.filter(this.model.attributes.images, function(e) {
                return e.get("approved")
            })
        },
        _getLockRankRange: function() {
            var e, t, i, n;
            return i = this.dataModel.loginManager.getUserRank(),
            n = this.model.attributes.lockRank,
            e = Math.max(i, n),
            function() {
                t = [];
                for (var i = 0; 0 <= e ? i <= e : i >= e; 0 <= e ? i++ : i--)
                    t.push(i);
                return t
            }
            .apply(this)
        },
        _requiresModeration: function() {
            return this.dataModel.loginManager.getUserRank() < this.model.attributes.lockRank
        },
        _isExternalProviderEditingAllowed: function() {
            return this.model.areExternalProvidersEditable()
        },
        _onPendingChangesAlertClicked: function() {
            return W.commands.execute("place_updates:list", this.model)
        },
        _onConvertToPolygonClicked: function(e) {
            return $(e.target).attr("disabled", !0),
            this.isPointChanged(!1)
        },
        isPointChanged: function(e) {
            var t, i, n;
            return i = this.model,
            n = "true" === e ? i.getPointGeometry() : this.previousGeometry ? this.previousGeometry.clone() : i.getPolygonGeometry(),
            t = new v(i,this.dataModel.venues,i.geometry,n),
            this.changing = !0,
            this.dataModel.actionManager.add(t),
            this.changing = !1
        },
        categoriesChanged: function(e) {
            var t;
            return _.isArray(e) || (e = _(e.split(",")).compact()),
            this.changed({
                categories: e
            }, !0),
            null != (t = this.suggestedCategoriesView) ? t.categoriesChanged(e) : void 0
        },
        onFeaturesChanged: function(e) {
            if (l.prototype.onFeaturesChanged.apply(this, arguments),
            this.hasEditedModelChanged(e) && !this.model.isPoint())
                return this.previousGeometry = this.model.geometry
        },
        _onCategoryClicked: function(e) {
            var t;
            return t = this.model.attributes.categories.clone(),
            e.replace && t.pop(),
            t.push(e.category),
            this.categoriesChanged(t)
        },
        onOpeningHoursChanged: function() {
            var e;
            return this.changing = !0,
            e = {
                openingHours: this.openingHoursLayout.collection.toJSON()
            },
            this.dataModel.actionManager.add(new y(this.model,e)),
            this.changing = !1
        },
        _onDeleteImageClicked: function(e) {
            var t, i, n;
            return i = $(e.target).parent(".image-preview-container").data("id"),
            n = _(this.model.attributes.images).reject(function(e) {
                return e.id === i
            }),
            t = {
                images: n
            },
            this.dataModel.actionManager.add(new y(this.model,t)),
            !1
        },
        _onImagePreviewClicked: function(e) {
            var t, i;
            return i = $(e.currentTarget).data("id"),
            t = new u({
                venue: this.model,
                imageId: i
            }),
            W.app.layout.dialogRegion.show(t),
            "function" == typeof e.preventDefault ? e.preventDefault() : void 0
        },
        _onAliasesChanged: function() {
            var e, t;
            return e = this.aliasesLayout.collection.removeEmpty().map(function(e) {
                return e.get("name")
            }),
            t = {
                aliases: e
            },
            this.dataModel.actionManager.add(new y(this.model,t))
        },
        _onResidentialToggled: function(e) {
            var t;
            return e.preventDefault(),
            t = this.model.attributes.residential,
            this.dataModel.actionManager.add(new y(this.model,{
                residential: !t
            }))
        },
        _initAliasesView: function() {
            var e;
            return e = this.model.attributes.aliases.map(function(e) {
                return new s({
                    name: e
                })
            }),
            this.aliasesLayout = new o({
                collection: new r(e),
                editable: this.model.arePropertiesEditable()
            }),
            this.listenTo(this.aliasesLayout.collection, "remove change", this._onAliasesChanged),
            this.aliasesRegion.show(this.aliasesLayout)
        },
        _initExternalProvidersView: function() {
            var e;
            return e = new a({
                venue: this.model,
                editable: !0
            }),
            this.listenTo(e, "change", function(e) {
                return function(t) {
                    var i;
                    return i = {
                        externalProviderIDs: t
                    },
                    e.preventRender(function() {
                        return e.dataModel.actionManager.add(new y(e.model,i))
                    })
                }
            }(this)),
            this.externalProvidersRegion.show(e)
        },
        _initOpeningHoursView: function() {
            return this.openingHoursLayout = new m({
                collection: this.model.getOpeningHours(),
                editable: this.model.arePropertiesEditable()
            }),
            this.listenTo(this.openingHoursLayout.collection, "remove add change", this.onOpeningHoursChanged),
            this.openingHoursRegion.show(this.openingHoursLayout)
        },
        _initCategoriesView: function() {
            return this.suggestedCategoriesView = new d({
                venue: this.model,
                editable: this.model.arePropertiesEditable()
            }),
            this.listenTo(this.suggestedCategoriesView, "categoryClicked", this._onCategoryClicked),
            this.categoriesRegion.show(this.suggestedCategoriesView)
        },
        _initMoreInfoTab: function() {
            var e;
            return e = this.model.isParkingLot() ? p : g,
            this.moreInfoView = new e({
                model: this.model,
                serviceTypes: this._getServiceTypes(),
                serviceSet: this.model.getServiceSet()
            }),
            this.listenTo(this.moreInfoView, "change", this._onMoreInfoChanged),
            this.moreInfoRegion.show(this.moreInfoView)
        },
        _onMoreInfoChanged: function(e) {
            return this.changed(e.newAttributes)
        },
        onRender: function() {
            return this.ui.categoriesTooltip.tooltip({
                title: I18n.t(this.model.isParkingLot() ? "edit.landmark.tooltip.parking_lot" : "edit.landmark.tooltip.categories")
            }),
            this.model.isResidential() || (this._canEditCategories() && this._initCategoriesView(),
            this._initMoreInfoTab(),
            this._initOpeningHoursView(),
            this._initAliasesView(),
            this._isExternalProviderEditingAllowed() && this._initExternalProvidersView()),
            this.addressEdit.show(new n({
                addressModel: this.model.getAddress(),
                dataModel: this.dataModel,
                feature: this.model,
                editable: this.model.arePropertiesEditable(),
                editHouseNumber: !0
            }))
        }
    }),
    e.exports = h
}
, function(e, t, i) {
    var n, s, r, o, a;
    s = i(140),
    a = i(90),
    o = i(50),
    r = i(454),
    n = s.extend({
        template: "templates/venue/venue-edit-more-info-parking-lot",
        bindings: {
            "[name=canExitWhileClosed]": "canExitWhileClosed",
            "[name=lotType]": "lotType",
            "[name=paymentType]": a.checkboxList("paymentType"),
            "[name=estimatedNumberOfSpots]": {
                observe: "estimatedNumberOfSpots",
                selectOptions: a.selectOptionsFromList(o.SPOTS_ESTIMATE.map(function(e) {
                    return e.value
                }), function(e) {
                    return I18n.t("edit.landmark.parking.types.estimatedNumberOfSpots." + e)
                })
            },
            "[name=costType]": {
                observe: "costType",
                selectOptions: {
                    collection: o.COST_TYPE.map(function(e) {
                        return {
                            value: e,
                            label: I18n.t("edit.landmark.parking.types.costType." + e)
                        }
                    }),
                    defaultOption: {
                        value: o.UNKNOWN,
                        label: ""
                    }
                }
            }
        },
        initialize: function() {
            var e;
            e = $.extend(!0, {}, this.model.attributes.categoryAttributes.PARKING_LOT),
            this.viewModel = new r(e),
            this.viewModel.on("change", this._onViewModelChange.bind(this))
        },
        onRender: function() {
            return this.stickit(this.viewModel)
        },
        _onViewModelChange: function() {
            var e;
            return e = $.extend(!0, {}, this.model.attributes.categoryAttributes),
            e.PARKING_LOT = this.viewModel.attributes,
            this.trigger("change", {
                newAttributes: {
                    categoryAttributes: e
                }
            })
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r;
    n = i(86),
    r = i(13),
    s = Marionette.ItemView.extend({
        events: {
            "click .category": "onCategoryClicked"
        },
        template: "templates/venue/venue-categories",
        ui: {
            select: "[name=categories]",
            suggestedCategories: ".suggested-categories"
        },
        initialize: function(e) {
            return this.venue = e.venue,
            this.editable = e.editable,
            this.mainCategories = n.mainCategories,
            this.categoryMap = this.venue.getCategorySet()
        },
        serializeData: function() {
            return {
                view: this,
                categoryMap: this.categoryMap
            }
        },
        getSuggestedCategories: function() {
            var e, t;
            return this.editable ? (e = this.venue.attributes.categories,
            e.isEmpty() ? this.mainCategories : (t = 1 === e.length && this.isMainCategory(e.first()),
            t ? W.Config.venues.subcategories[e.first()] : [])) : []
        },
        isMainCategory: function(e) {
            return n.mainCategoryMap[e]
        },
        categoriesChanged: function(e, t) {
            return this.categoryMap = this.venue.getCategorySet(),
            this.setSelectedCategories(),
            this.ui.suggestedCategories.hide(),
            this.ui.suggestedCategories.html(r.getHTML("templates/venue/suggested-categories", this.serializeData())),
            this.ui.suggestedCategories.fadeIn("fast")
        },
        onRender: function() {
            return this.ui.select.select2({
                width: "100%",
                formatResult: this.format,
                formatSelection: function(e) {
                    return function(t) {
                        return r.getHTML("templates/venue/category-tag", {
                            category: t.id,
                            hideClose: !e.editable
                        })
                    }
                }(this),
                data: {
                    results: n.allCategories,
                    text: this.format
                },
                multiple: !0,
                sortResults: function(e, t, i) {
                    return e.sort(function(e, t) {
                        return e.id.localeCompare(t.id)
                    })
                }
            }),
            this.setSelectedCategories()
        },
        setSelectedCategories: function() {
            return this.ui.select.select2("data", _(this.venue.attributes.categories).map(function(e) {
                return {
                    id: e
                }
            }))
        },
        format: function(e) {
            return I18n.t("venues.categories." + e.id)
        },
        onCategoryClicked: function(e) {
            var t;
            return e.preventDefault(),
            t = $(e.target).data("category"),
            this.trigger("categoryClicked", {
                category: t,
                replace: !this.isMainCategory(t)
            })
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        defaults: {
            name: null ,
            isEmpty: !1,
            lonlat: null ,
            country: null
        },
        getTTSLocales: function() {
            var e;
            return (null != (e = this.get("country")) ? e.ttsLocales : void 0) || [W.Config.tts.default_locale]
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    s = i(703),
    r = i(13),
    n = Marionette.ItemView.extend({
        template: "templates/segment/tts-playback",
        className: "tts-playback",
        ui: {
            ttsButton: ".tts-button"
        },
        events: {
            "click .play-button": "_playButtonClicked"
        },
        modelEvents: {
            "change:isEmpty": "render",
            "change:country": "render"
        },
        _ttsPlayer: null ,
        initialize: function() {
            return this._ttsPlayer = new s
        },
        _playButtonClicked: function() {
            var e;
            return e = this._getSelectedTTSLocale(),
            this._ttsPlayer.sayStreetName(this.model, e)
        },
        _getSelectedTTSLocale: function() {
            return this.$el.find(".locale-select option:selected").val()
        },
        onRender: function() {
            var e;
            return e = this.model.getTTSLocales(),
            this.ui.ttsButton.popover({
                html: !0,
                content: r.getHTML("templates/segment/tts-playback-popover", {
                    locales: e
                }),
                placement: "bottom"
            })
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a, l, u;
    n = i(80),
    l = i(61),
    u = i(145),
    o = i(600),
    a = i(61).prototype.TYPE,
    r = i(22).prototype.TYPE,
    s = Marionette.Controller.extend({
        initialize: function(e) {
            return this.currentFeedItem = null ,
            this.collection = e.collection,
            this.container = e.container,
            this.listenTo(this.container, "closeClicked", this.destroy),
            W.accelerators.events.register("nextFeedItem", this, this._nextItemClicked),
            W.accelerators.events.register("prevFeedItem", this, this._prevItemClicked)
        },
        browse: function(e) {
            return null == e && (e = 0),
            this._setCurrent(this.collection.at(e)),
            this._show(this.currentFeedItem)
        },
        showNext: function() {
            var e;
            return e = this.collection.indexOf(this.currentFeedItem),
            this._reportEvent("show_next", this.currentFeedItem),
            this._setCurrent(this.collection.at(++e)),
            this._show(this.currentFeedItem)
        },
        showPrev: function() {
            var e;
            return e = this.collection.indexOf(this.currentFeedItem),
            this._reportEvent("show_prev", this.currentFeedItem),
            this._setCurrent(this.collection.at(--e)),
            this._show(this.currentFeedItem)
        },
        _reportEvent: function(e, t) {
            var i;
            return i = t.get("type"),
            W.Report.feedAction(e, i)
        },
        _nextItemClicked: function() {
            if (!this._isDone())
                return this.showNext()
        },
        _prevItemClicked: function() {
            if (!this._isAtBeginning())
                return this.showPrev()
        },
        onDestroy: function() {
            return this._clearCurrent(),
            W.accelerators.events.unregister("nextFeedItem", this, this._nextItemClicked),
            W.accelerators.events.unregister("prevFeedItem", this, this._prevItemClicked)
        },
        _show: function(e) {
            return e instanceof l ? this._showNotification(e) : this._showIssue(e),
            W.Report.feedAction("show", e.get("type"))
        },
        _showNotification: function(e) {
            var t, i, n;
            return n = e.get("type"),
            t = n === a.PRIVATE_FORUM_MESSAGE ? o : u,
            i = new t({
                model: e,
                hasNext: !this._isDone()
            }),
            this.listenTo(i, "nextClicked", this.showNext),
            this.container.show(i)
        },
        _showIssue: function(e) {
            var t, i, n;
            switch (i = {
                showNext: !this._isDone(),
                nextButtonString: I18n.t("feed.issues.next"),
                nextButtonClass: "btn-primary"
            },
            n = e.get("type")) {
            case r.MAP_PROBLEM:
                t = W.reqres.request("problems:browse", _.extend(i, {
                    problem: e.get("problem")
                }));
                break;
            case r.UPDATE_REQUEST:
                t = W.reqres.request("problems:browse", _.extend(i, {
                    problem: e.get("updateRequest")
                }));
                break;
            case r.VENUE_UPDATE_REQUEST:
                t = W.reqres.request("updaterequests:browse", _.extend(i, {
                    updateRequest: e.get("updateRequest")
                }))
            }
            return t.on("next", this.showNext.bind(this))
        },
        _isDone: function() {
            return this.currentFeedItem === this.collection.last()
        },
        _isAtBeginning: function() {
            return this.currentFeedItem === this.collection.first()
        },
        _onItemDestroy: function() {
            return this._isDone() ? (this._clearCurrent(),
            this.container.empty()) : this.showNext()
        },
        _setCurrent: function(e) {
            return this._clearCurrent(),
            this.currentFeedItem = e,
            this.currentFeedItem.set("selected", !0),
            this.currentFeedItem.on("destroy", this._onItemDestroy, this)
        },
        _clearCurrent: function() {
            var e, t;
            return null != (e = this.currentFeedItem) && e.set("selected", !1),
            null != (t = this.currentFeedItem) && t.off("destroy", this._onItemDestroy),
            this.currentFeedItem = null
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l, u;
    o = i(589),
    r = i(588),
    n = i(585),
    u = i(144),
    l = i(599),
    a = i(595),
    s = Marionette.Controller.extend({
        browser: null ,
        initialize: function(e) {
            return this.model = new o,
            this.container = e.container
        },
        render: function(e) {
            return this.layout = new r({
                el: e.el,
                model: this.model
            }),
            this.layout.render(),
            this._createViews(),
            this._bindEvents(),
            this._showViews()
        },
        refresh: function() {
            return this.model.refresh()
        },
        destroy: function() {
            var e, t;
            return null != (e = this.layout) && e.destroy(),
            null != (t = this.browser) ? t.destroy() : void 0
        },
        _createViews: function() {
            return this.views = {
                notifications: new u({
                    collection: this.model.notifications
                }),
                messages: new l({
                    collection: this.model.messages
                }),
                issues: new a({
                    collection: this.model.issues
                })
            }
        },
        _showViews: function() {
            return this.layout.notifications.show(this.views.notifications),
            this.layout.messages.show(this.views.messages),
            this.layout.issues.show(this.views.issues)
        },
        _bindEvents: function() {
            return this.listenTo(this.views.issues, "issues:click", this._onItemClick),
            this.listenTo(this.views.messages, "messages:click", this._onItemClick),
            this.listenTo(this.views.notifications, "notifications:click", this._onItemClick)
        },
        _onItemClick: function(e, t) {
            var i, s, r, o;
            return null != (o = this.browser) && o.destroy(),
            r = t.model,
            i = r.collection,
            s = i.indexOf(r),
            this.browser = new n({
                collection: i,
                container: this.container
            }),
            this.browser.browse(s),
            this.listenTo(this.browser, "destroy", function() {
                return this.browser = null
            })
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    o = i(22).prototype.TYPE,
    s = i(591),
    r = i(592),
    l = i(593),
    a = {},
    a[o.MAP_PROBLEM] = s,
    a[o.VENUE_UPDATE_REQUEST] = r,
    a[o.UPDATE_REQUEST] = l,
    n = {
        create: function(e) {
            var t;
            return new (t = a[e.type])(e)
        }
    },
    e.exports = n
}
, function(e, t) {
    var i;
    i = Marionette.LayoutView.extend({
        template: "Waze/Modules/Feed/templates/feed",
        events: {
            "click .feed-load-more": "_onLoadMoreClick"
        },
        regions: {
            notifications: ".feed-notifications",
            messages: ".feed-messages",
            issues: ".feed-issues"
        },
        bindings: {
            ".feed-loading": {
                observe: "loading",
                visible: !0
            },
            ".feed-content": {
                observe: "loading",
                visible: function(e) {
                    return !e
                }
            },
            ".feed-empty": {
                observe: ["empty", "loading"],
                visible: function(e) {
                    return e[0] && !e[1]
                }
            },
            ".feed-load-more": {
                observe: ["loading", "loadingMore"],
                visible: function(e) {
                    return !e[0] && !e[1]
                }
            },
            ".feed-loading-more": {
                observe: "loadingMore",
                visible: !0
            }
        },
        onRender: function() {
            return this.stickit()
        },
        _onLoadMoreClick: function() {
            return this.model.loadMore(),
            W.Report.feedAction("load_more")
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o, a;
    a = i(31),
    o = i(143),
    r = i(594),
    s = i(590),
    n = Backbone.Model.extend({
        defaults: {
            empty: !0,
            loading: !1,
            loadingMore: !1,
            lastIssueId: null
        },
        initialize: function() {
            return this.serializer = new a,
            this.notifications = new o,
            this.notifications.on("all", this._updateSelf, this),
            this.messages = new r,
            this.messages.on("all", this._updateSelf, this),
            this.issues = new s,
            this.issues.on("all", this._updateSelf, this)
        },
        refresh: function() {
            var e, t;
            if (!this.attributes.loading)
                return this.set("loading", !0),
                t = $.get(W.Config.paths.notifications),
                e = this.issues.fetch({
                    reset: !0
                }),
                $.when(t, e).always(function(e) {
                    return function() {
                        return e.set("loading", !1)
                    }
                }(this)).done(function(e) {
                    return function(t, i) {
                        var n, s, r;
                        return r = t[0],
                        s = i[0],
                        e.serializer.read(r),
                        n = _.partition(r.notifications.objects, function(e) {
                            return e.isForumMessage()
                        }),
                        e.notifications.reset(n[1]),
                        e.messages.reset(n[0]),
                        e.set("lastIssueId", s.lastIssueId)
                    }
                }(this))
        },
        loadMore: function() {
            if (!this.attributes.loadingMore)
                return this.set("loadingMore", !0),
                this.issues.fetch({
                    remove: !1,
                    data: {
                        lastIssueId: this.get("lastIssueId")
                    }
                }).always(function(e) {
                    return function() {
                        return e.set("loadingMore", !1)
                    }
                }(this)).done(function(e) {
                    return function(t) {
                        return e.set("lastIssueId", t.lastIssueId)
                    }
                }(this))
        },
        _updateSelf: function() {
            var e;
            return e = this.notifications.length + this.messages.length + this.issues.length === 0,
            this.set("empty", e)
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a;
    o = i(31),
    s = i(22),
    n = i(10),
    a = s.prototype.TYPE,
    r = Backbone.Collection.extend({
        model: s,
        initialize: function() {
            return this.dataModel = W.model,
            this.dataModelRefs = {},
            this.serializer = new o
        },
        url: function() {
            return W.Config.paths.issues
        },
        parse: function(e) {
            var t, i;
            return (null != (i = e.issues) ? i.objects : void 0) ? (this.serializer.read(e),
            this.dataModel.putPersistent(e),
            t = this._setReferences(e.issues.objects),
            this._setListeners(),
            t) : []
        },
        _setReferences: function(e) {
            var t, i, n, s, r, o, l, u, c, d;
            for (c = [],
            t = 0,
            s = e.length; t < s; t++) {
                switch (i = e[t],
                l = i.attributes.type,
                o = {},
                l) {
                case a.MAP_PROBLEM:
                    r = this._getProblem(i),
                    u = null != r,
                    o = {
                        problem: r
                    };
                    break;
                case a.UPDATE_REQUEST:
                    r = this._getUpdateRequest(i),
                    u = null != r,
                    o = {
                        updateRequest: r
                    };
                    break;
                case a.VENUE_UPDATE_REQUEST:
                    r = this._getVenue(i),
                    d = this._getVenueUpdateRequest(i),
                    u = null != r && null != d,
                    o = {
                        venue: r,
                        updateRequest: d,
                        initialApproved: null != d ? d.get("approved") : void 0
                    }
                }
                n = this._getKey(r),
                u && null != n && (i.set(o),
                this.dataModelRefs[n] || (this.dataModelRefs[n] = []),
                this.dataModelRefs[n].push(i),
                c.push(i))
            }
            return c
        },
        _setListeners: function() {
            return this._bindRepositoryEvents(this.dataModel.problems),
            this._bindRepositoryEvents(this.dataModel.mapUpdateRequests),
            this._bindRepositoryEvents(this.dataModel.venues)
        },
        _bindRepositoryEvents: function(e) {
            var t, i, s, r;
            s = {},
            s[n.CHANGED] = this._makeTrigger("onModelChanged"),
            s[n.REMOVED] = this._makeTrigger("onModelRemoved"),
            s[n.SYNCED] = this._makeTrigger("onModelSynced"),
            r = [];
            for (t in s)
                i = s[t],
                r.push(e.on(t, i, this));
            return r
        },
        _makeTrigger: function(e) {
            return function(t) {
                var i, n, s, r, o;
                for (o = [],
                i = 0,
                s = t.length; i < s; i++)
                    r = t[i],
                    n = this._getIssues(r),
                    null != n ? o.push(n.forEach(function(t) {
                        return t[e].call(t)
                    })) : o.push(void 0);
                return o
            }
        },
        _getProblem: function(e) {
            var t;
            if (t = e.attributes.referenceId)
                return this.dataModel.problems.get(t)
        },
        _getUpdateRequest: function(e) {
            var t;
            if (t = e.attributes.referenceId)
                return this.dataModel.mapUpdateRequests.get(t)
        },
        _getVenue: function(e) {
            var t;
            if (t = e.attributes.referenceId)
                return this.dataModel.venues.get(t)
        },
        _getVenueUpdateRequest: function(e) {
            var t, i, n;
            return n = this._getVenue(e),
            i = n.attributes.venueUpdateRequests,
            t = e.attributes.venueUpdateRequestId,
            _(i).findWhere({
                id: t
            })
        },
        _getKey: function(e) {
            if (e)
                return e.type + "_" + e.getID()
        },
        _getIssues: function(e) {
            var t;
            return t = this._getKey(e),
            this.dataModelRefs[t]
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    n = i(22),
    s = n.extend({
        _isModified: function() {
            return this.attributes.problem.isUpdated()
        },
        _isResolved: function() {
            return !this.attributes.problem.attributes.open
        },
        getSeverity: function() {
            return this.attributes.problem.attributes.severity
        }
    }),
    s.prototype.defaults = _.extend({
        problem: null
    }, n.prototype.defaults),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(22),
    s = n.extend({
        _isModified: function() {
            return this.attributes.initialApproved !== this.attributes.updateRequest.get("approved")
        },
        _isResolved: function() {
            return null !== this.attributes.updateRequest.get("approved")
        },
        getSeverity: function() {
            return this.attributes.updateRequest.getSeverity()
        }
    }),
    s.prototype.defaults = _.extend({
        venue: null ,
        updateRequest: null ,
        initialApproved: null
    }, n.prototype.defaults),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(22),
    s = n.extend({
        _isModified: function() {
            return this.attributes.updateRequest.isUpdated()
        },
        _isResolved: function() {
            return !this.attributes.updateRequest.attributes.open
        },
        getSeverity: function() {
            return this.attributes.updateRequest.attributes.severity
        }
    }),
    s.prototype.defaults = _.extend({
        updateRequest: null
    }, n.prototype.defaults),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    s = i(143),
    n = s.extend({
        parse: function(e) {
            return this.serializer.read(e),
            _.filter(e.notifications.objects, function(e) {
                return e.isForumMessage()
            })
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a, l, u;
    a = i(22).prototype.TYPE,
    s = i(62),
    r = i(596),
    u = i(598),
    o = i(597),
    l = {},
    l[a.MAP_PROBLEM] = r,
    l[a.UPDATE_REQUEST] = u,
    l[a.VENUE_UPDATE_REQUEST] = o,
    n = Marionette.CollectionView.extend({
        tagName: "ul",
        className: "feed-list",
        childView: s,
        childViewEventPrefix: "issues",
        buildChildView: function(e, t, i) {
            var n, s;
            return s = e.attributes.type,
            new (n = l[s])({
                model: e
            })
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    n = i(62),
    s = n.extend({
        className: function() {
            return "feed-item feed-issue-mp " + this._getSeverityClass()
        },
        getType: function() {
            var e;
            return e = this.model.attributes.problem,
            I18n.t("problems.types." + e.attributes.subType + ".title")
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(62),
    s = n.extend({
        className: function() {
            return "feed-item feed-issue-pu " + this._getSeverityClass()
        },
        getType: function() {
            var e;
            return e = this.model.attributes.updateRequest,
            "flag" === e.get("updateType") ? I18n.t("venues.update_requests.panel.flag_title." + e.get("subject")) : I18n.t("venues.update_requests.panel.title." + e.get("updateType"))
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(62),
    s = n.extend({
        className: function() {
            return "feed-item feed-issue-ur " + this._getSeverityClass()
        },
        getType: function() {
            return this.model.attributes.updateRequest.getTypeText()
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r;
    r = i(144),
    s = i(601),
    n = r.extend({
        childView: s,
        childViewEventPrefix: "messages",
        moreItemsMessage: "feed.messages.more_items"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    s = i(145),
    n = s.extend({
        className: "notification-detail notification-detail-pm",
        serializeData: function() {
            return _.extend(s.prototype.serializeData.apply(this, arguments), {
                type: "pm",
                sender: this.model.getParameter("sender"),
                senderURL: this.model.getParameter("senderURL")
            })
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    n = i(87),
    s = n.extend({
        className: "feed-item feed-notification-pm",
        template: "Waze/Modules/Feed/templates/message_item",
        serializeData: function() {
            return _.extend(n.prototype.serializeData.apply(this, arguments), {
                title: this.model.getParameter("subject"),
                sender: this.model.getParameter("sender")
            })
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o;
    s = i(603),
    o = i(604),
    r = i(8),
    n = Marionette.Controller.extend({
        LOCATION_REQUEST_TIMEOUT_MILLIS: 1e4,
        initialize: function(e) {
            return this.locationProvider = new s,
            this.map = e.map,
            this.panButtonView = new o({
                el: e.viewContainer
            }),
            this.listenTo(this.panButtonView, "click:pan", this._onPanClicked),
            this.panButtonView.render()
        },
        _onMapMoved: function() {
            return this.panButtonView.toggleGeoLocated(!1),
            this.map.events.unregister("moveend", this, this._onMapMoved)
        },
        _onPanClicked: function() {
            return this.panButtonView.toggleLoading(!0),
            this.locationProvider.getLonLat(this.LOCATION_REQUEST_TIMEOUT_MILLIS).done(function(e) {
                return function(t) {
                    return t = t.clone(),
                    r.project(t),
                    e.map.setCenter(t),
                    e.map.events.register("moveend", e, e._onMapMoved),
                    e.panButtonView.toggleGeoLocated(!0)
                }
            }(this)).always(function(e) {
                return function() {
                    return e.panButtonView.toggleLoading(!1)
                }
            }(this))
        }
    }),
    e.exports = n;
}
, function(e, t) {
    var i;
    i = OL.Class({
        _cachedLonLat: null ,
        initialize: function() {},
        getLonLat: function(e) {
            var t;
            return t = $.Deferred(),
            null !== this._cachedLonLat ? t.resolve(this._cachedLonLat) : (this._getLonLatFromBrowser(e, t),
            window.setTimeout(function(e) {
                return function() {
                    return e._onTimeoutExpired(t)
                }
            }(this), e)),
            t.promise()
        },
        _getLonLatFromBrowser: function(e, t) {
            return navigator.geolocation.getCurrentPosition(function(e) {
                return function(i) {
                    return e._onGetPostionSuccess(i, t)
                }
            }(this), function(e) {
                return function(i) {
                    return e._onGetPositionError(i, t)
                }
            }(this), {
                timeout: e
            })
        },
        _onGetPostionSuccess: function(e, t) {
            var i;
            return i = e.coords,
            this._cachedLonLat = new OL.LonLat(i.longitude,i.latitude),
            t.resolve(this._cachedLonLat)
        },
        _onGetPositionError: function(e, t) {
            return t.reject({
                code: e.code
            })
        },
        _onTimeoutExpired: function(e) {
            return e.reject({
                code: i.ERROR_CODES.USER_TIMEOUT
            })
        }
    }),
    i.ERROR_CODES = {
        PERMISSION_DENIED: 1,
        POSITION_UNAVAILABLE: 2,
        TIMEOUT: 3,
        USER_TIMEOUT: 4
    },
    e.exports = i
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        TOOLTIP_SHOW_DELAY_MILLIS: 750,
        template: "Waze/Modules/GeoLocation/templates/pan_button",
        events: {
            "click .pan-button": "_onPanClicked"
        },
        ui: {
            panButton: ".pan-button",
            loading: ".loading"
        },
        _onPanClicked: function() {
            return this.trigger("click:pan")
        },
        toggleGeoLocated: function(e) {
            return this.ui.panButton.toggleClass("geo-located", e)
        },
        toggleLoading: function(e) {
            return this.ui.loading.toggle(e),
            this.ui.panButton.toggle(!e)
        },
        onRender: function() {
            return this.toggleLoading(!1),
            this.ui.panButton.tooltip({
                title: I18n.t("geolocation.tooltip"),
                placement: "right",
                container: "body",
                delay: {
                    show: this.TOOLTIP_SHOW_DELAY_MILLIS
                }
            })
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        defaults: {
            segments: null ,
            closures: null ,
            contributors: null ,
            partners: null ,
            availablePartners: null
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i, n, s, r, o;
    o = "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~",
    r = "a-zA-Z0-9",
    i = 25,
    n = new RegExp("^[" + r + "]{1,1}[\\s" + r + o + "]{0," + (i - 1) + "}$","i"),
    s = Backbone.Model.extend({
        isValid: function() {
            return _.isEmpty(this.attributes)
        },
        clearErrorFor: function(e) {
            return this.unset(e)
        }
    }),
    s.validate = function(e) {
        var t, r, o, a;
        return o = {},
        a = e.get("startDate"),
        t = e.get("endDate"),
        r = e.getEnglishName(),
        e.getAddress().get("isEmpty") && (o.cityID = I18n.t("mte.edit.validation_errors.location")),
        null === r ? o.names = I18n.t("mte.edit.validation_errors.names") : r.length > i ? o.names = I18n.t("mte.edit.validation_errors.english_name_length") : n.test(r) || (o.names = I18n.t("mte.edit.validation_errors.english_name")),
        null === a && (o.startDate = I18n.t("mte.edit.validation_errors.start_date")),
        null === t && (o.endDate = I18n.t("mte.edit.validation_errors.end_date")),
        null !== a && null !== t && new Date(a) > new Date(t) && (o.endDate = I18n.t("mte.edit.validation_errors.end_before_start")),
        new s(o)
    }
    ,
    s.ENGLISH_NAME_PATTERN = n,
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d;
    n = i(618),
    s = i(292),
    r = i(10),
    o = i(611),
    l = i(619),
    u = i(88),
    c = i(150),
    d = i(151),
    a = Marionette.Object.extend({
        initialize: function(e) {
            return this.toolbarController = e.toolbarController,
            this.sidebarLayout = e.sidebarLayout,
            this.mteModeState = e.mteModeState,
            this.dataModel = e.dataModel,
            this.repository = e.repository,
            this.controller = e.controller,
            this.editingMediator = e.editingMediator,
            this.map = e.map,
            this.mteCollection = new o,
            this.mteListView = new n({
                collection: this.mteCollection,
                dataModel: this.dataModel
            }),
            this.listenTo(this.repository, r.UPDATED, this._updateCollection),
            this.listenTo(this.toolbarController, "saveClicked", this._onSaveClicked),
            this.listenTo(this.toolbarController, "addClicked", this._onAddClicked),
            this.listenTo(this.toolbarController, "deleteClicked", this._onDeleteClicked),
            this.listenTo(this.mteListView, "mteItemClicked", this._onMteItemClicked),
            this.savePopoverRegion = new c({
                saveButtonSelector: ".toolbar-mte .save-button"
            }),
            this.listenTo(this.sidebarLayout, "show", function(e) {
                return function() {
                    return e._updateCollection(),
                    e._showListView()
                }
            }(this))
        },
        _updateCollection: function(e) {
            return this.mteCollection.reset(this.repository.getObjectArray())
        },
        _onSaveClicked: function() {
            return this.editView.validate().done(function(e) {
                return function() {
                    return e._save(e.editView.getAction())
                }
            }(this))
        },
        _save: function(e) {
            var t, i, n;
            return t = $.Deferred(),
            e.doAction(),
            this.mteModeState.set({
                saving: !0
            }),
            n = this.controller.save({
                actions: [e]
            }).fail(function(t) {
                return function(i) {
                    return t._rollbackChanges(e)
                }
            }(this)),
            i = new d({
                saveResult: n,
                map: this.map,
                mediator: this.editingMediator,
                popoverRegion: this.savePopoverRegion
            }),
            i.on("done", function(e) {
                return function() {
                    return e.mteModeState.set({
                        saving: !1
                    })
                }
            }(this)),
            i.on("saveSuccess", function(e) {
                return function() {
                    return e.mteModeState.set({
                        pendingChanges: !1
                    }),
                    t.resolve()
                }
            }(this)),
            t.promise()
        },
        _onMteItemClicked: function(e) {
            return this.showEditView(e.model)
        },
        showEditView: function(e) {
            return this.mteModeState.set({
                showingList: !1,
                pendingChanges: !1,
                editedModel: e
            }),
            this.editView = new l({
                model: e,
                dataModel: this.dataModel,
                map: this.map,
                mteModeState: this.mteModeState
            }),
            this.sidebarLayout.mainRegion.show(this.editView, {
                preventDestroy: !0
            }),
            this.editView.on("backButtonClicked", this._showListView, this),
            this.editView.on("modelChanged", this._onModelChanged, this)
        },
        _onAddClicked: function() {
            var e;
            return e = new u,
            e.model = this.dataModel,
            this.showEditView(e),
            this.mteModeState.set({
                pendingChanges: !0
            })
        },
        _onDeleteClicked: function() {
            var e;
            if (!this.mteModeState.get("pendingChanges") || confirm(I18n.t("mte.edit.pending_changes_delete")))
                return e = new s(this.mteModeState.get("editedModel")),
                e.setModel(this.dataModel),
                this._save(e).done(this._showListView.bind(this))
        },
        _onModelChanged: function() {
            return this.mteModeState.set({
                pendingChanges: !0
            })
        },
        _showListView: function() {
            return this.mteModeState.set({
                showingList: !0,
                pendingChanges: !1,
                editedModel: null
            }),
            this.sidebarLayout.mainRegion.show(this.mteListView)
        },
        _rollbackChanges: function(e) {
            return e.undoAction(),
            this.dataModel.actionManager.clear()
        },
        onDestroy: function() {
            return this.savePopoverRegion.destroy()
        }
    }),
    e.exports = a
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c;
    n = i(54),
    s = i(10),
    l = i(609),
    u = i(621),
    c = i(623),
    r = i(607),
    a = Backbone.Model.extend({
        defaults: {
            pendingChanges: !1,
            showingList: !0,
            saving: !1,
            editedModel: null
        }
    }),
    o = Marionette.Object.extend({
        _editingLock: null ,
        initialize: function() {
            return this.app = W.app,
            this.map = W.map,
            this.dataModel = W.model,
            this.repo = this.dataModel.majorTrafficEvents,
            this.mteModeState = new a,
            this.listenTo(this.mteModeState, "change", this.trigger.bind(this, n.STATE_CHANGED)),
            this.toolbarController = new l({
                app: W.app,
                map: this.map,
                editingMediator: W.editingMediator,
                actionManager: this.dataModel.actionManager,
                mteModeState: this.mteModeState
            }),
            this.topbarLayout = new c({
                map: this.map,
                dataModel: this.dataModel,
                globalVent: W.vent
            }),
            this.sidebarLayout = new u({
                app: W.app
            }),
            this.mteController = new r({
                toolbarController: this.toolbarController,
                sidebarLayout: this.sidebarLayout,
                mteModeState: this.mteModeState,
                dataModel: this.dataModel,
                repository: this.repo,
                controller: W.controller,
                editingMediator: W.editingMediator,
                map: this.map
            })
        },
        enter: function() {
            return this._editingLock = W.editingMediator.lockEditing()
        },
        exit: function() {
            return W.editingMediator.releaseEditing(this._editingLock),
            this.toolbarController.destroy(),
            this.mteController.destroy()
        },
        blockingExit: function() {
            return this.mteModeState.get("pendingChanges")
        },
        blockingExitReason: function() {
            return I18n.t("modes.exit.save_changes")
        },
        getSidebarLayout: function() {
            return this.sidebarLayout
        },
        getTopbarLayout: function() {
            return this.topbarLayout
        },
        getToolbarLayout: function() {
            return this.toolbarController.toolbarLayout
        },
        getState: function() {
            var e;
            return e = this.mteModeState.get("editedModel"),
            {
                majorTrafficEvent: null != e ? e.getID() : void 0
            }
        },
        restore: function(e) {
            var t, i;
            if (null == e && (e = {}),
            t = e.majorTrafficEvent,
            null != t)
                return i = function(e) {
                    return function() {
                        var i;
                        return i = e.repo.get(t),
                        null != i && e.mteController.showEditView(i),
                        null != i
                    }
                }(this),
                i() ? void 0 : this.listenToOnce(this.repo, s.ADDED, i)
        }
    }),
    e.exports = o
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c = {}.hasOwnProperty;
    n = i(152),
    s = i(56),
    r = i(156),
    o = i(622),
    l = i(153),
    a = Marionette.Object.extend({
        layerVisibilityOnEnter: null ,
        visibilityMapping: (u = {},
        u["" + s.LAYER_UNIQUE_NAMES.CLOSURES] = !0,
        u["" + s.LAYER_UNIQUE_NAMES.GPS_POINTS] = !1,
        u["" + s.LAYER_UNIQUE_NAMES.BIG_JUNCTIONS] = !1,
        u["" + s.LAYER_UNIQUE_NAMES.SPEED_CAMERAS] = !1,
        u["" + s.LAYER_UNIQUE_NAMES.PROBLEMS] = !1,
        u["" + s.LAYER_UNIQUE_NAMES.UPDATE_REQUESTS] = !1,
        u["" + s.LAYER_UNIQUE_NAMES.PLACE_UPDATES] = !1,
        u["" + s.LAYER_UNIQUE_NAMES.LIVE_USERS] = !1,
        u),
        initialize: function(e) {
            return this.app = e.app,
            this.map = e.map,
            this.editingMediator = e.editingMediator,
            this.actionManager = e.actionManager,
            this.mteModeState = e.mteModeState,
            this._setLayersVisibility(),
            this.searchView = new r({
                map: this.map
            }),
            this.layerSwitcherController = new n({
                map: this.map,
                actionManager: this.actionManager,
                layerAttributes: function(e) {
                    return {
                        disabled: Object.keys(this.visibilityMapping).indexOf(e.uniqueName) > -1
                    }
                }
                .bind(this)
            }),
            this.toolbarButtons = new o({
                mteModeState: this.mteModeState
            }),
            this.toolbarButtons.on("saveClicked", this._onSaveClicked, this),
            this.toolbarButtons.on("addClicked", this._onAddClicked, this),
            this.toolbarButtons.on("deleteClicked", this._onDeleteClicked, this),
            this.editingMediator.on("change:editingEnabled", this._onEditingEnabledChanged, this),
            this.toolbarLayout = new l({
                model: this.app,
                className: "toolbar toolbar-mte"
            }),
            this.listenTo(this.toolbarLayout, "before:show", this._onShow)
        },
        destroy: function() {
            return this._restoreLayersVisibility(),
            this.toolbarLayout.destroy(),
            this.layerSwitcherController.destroy(),
            this.editingMediator.off("change:editingEnabled", this._onEditingEnabledChanged, this)
        },
        _onShow: function() {
            return this.toolbarLayout.layerSwitcher.show(this.layerSwitcherController.getLayout()),
            this.toolbarLayout.toolbar.show(this.toolbarButtons),
            this.toolbarLayout.search.show(this.searchView)
        },
        _onSaveClicked: function() {
            return this.trigger("saveClicked")
        },
        _onAddClicked: function() {
            return this.trigger("addClicked")
        },
        _onDeleteClicked: function() {
            return this.trigger("deleteClicked")
        },
        _onEditingEnabledChanged: function() {},
        _setLayersVisibility: function() {
            var e, t, i, n;
            this.layerVisibilityOnEnter = {},
            e = this.visibilityMapping,
            t = [];
            for (i in e)
                c.call(e, i) && (n = e[i],
                this.layerVisibilityOnEnter[i] = this.map.getLayerVisibility(i),
                t.push(this.map.setLayerVisibility(i, n)));
            return t
        },
        _restoreLayersVisibility: function() {
            var e, t, i, n;
            e = this.layerVisibilityOnEnter,
            t = [];
            for (i in e)
                c.call(e, i) && (n = e[i],
                t.push(this.map.setLayerVisibility(i, n)));
            return t
        }
    }),
    e.exports = a
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        defaults: {
            name: null
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s;
    n = i(610),
    s = Backbone.Collection.extend({
        model: n,
        comparator: function(e) {
            var t;
            return t = e.getEnglishName() || "",
            t.toLowerCase()
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = new OL.StyleMap,
    i.addUniqueValueRules("default", "type", {
        outline: {
            strokeColor: "black",
            strokeWidth: 14
        },
        fill: {
            strokeColor: "white",
            strokeWidth: 10
        },
        dash: {
            strokeColor: "red",
            strokeDashstyle: "dash",
            strokeDashArray: "10 10",
            strokeLinecap: "butt",
            strokeWidth: 10
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        template: "Waze/Modules/MTE/templates/contributors/item",
        className: "mte-contributors-item",
        triggers: {
            "click .remove-button": "removeClicked"
        },
        serializeData: function() {
            return _.tap(Marionette.ItemView.prototype.serializeData.apply(this, arguments), function(e) {
                return function(t) {
                    return t.editable = e.options.editable
                }
            }(this))
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    n = i(613),
    r = i(9),
    s = Marionette.CompositeView.extend({
        template: "Waze/Modules/MTE/templates/contributors/list",
        className: "mte-contributors-list",
        childView: n,
        childViewContainer: ".list",
        childViewOptions: function() {
            return {
                editable: this.options.editable
            }
        },
        events: {
            "click .add-partner-button": "_onAddClicked",
            "click .cancel-button": "_onCancelClicked",
            "submit .add-partner-form": "_onPartnerFormSubmitted"
        },
        childEvents: {
            removeClicked: "_onRemoveClicked"
        },
        bindings: {
            ".add-partner-form": {
                observe: "showAddPartnerForm",
                visible: !0
            },
            ".add-partner-button": {
                observe: ["showAddPartnerForm", "editable"],
                visible: !0,
                onGet: function(e) {
                    var t, i;
                    return i = e[0],
                    t = e[1],
                    t && !i
                }
            },
            ".partner-select": {
                observe: "selectedPartner",
                selectOptions: {
                    collection: "this._partnerOptions",
                    defaultOption: {
                        label: I18n.t("mte.edit.contributors.choose_partner"),
                        value: null
                    }
                }
            }
        },
        initialize: function() {
            var e, t;
            return t = this.options.mteModel.get("partners").map(function(e) {
                return {
                    userID: e,
                    isPartner: !0
                }
            }),
            e = this.options.detailsModel.get("contributors").map(function(e) {
                return {
                    userID: e
                }
            }),
            this.collection = new Backbone.Collection(t.concat(e)),
            this.collection.on("reset add remove", this._onPartnersChanged, this),
            this._generatePartnerOptions(),
            this.viewModel = new Backbone.Model({
                showAddPartnerForm: !1,
                selectedPartner: null ,
                editable: this.options.editable
            })
        },
        _generatePartnerOptions: function() {
            var e, t;
            return e = this.collection.where({
                isPartner: !0
            }).map(function(e) {
                return e.get("userID")
            }),
            t = _.difference(this.options.detailsModel.get("availablePartners"), e),
            this._partnerOptions = t.map(function(e) {
                return {
                    label: r.formatUserName(e),
                    value: e
                }
            })
        },
        onRender: function() {
            return this.stickit(this.viewModel)
        },
        _onAddClicked: function() {
            return this.viewModel.set({
                showAddPartnerForm: !0
            })
        },
        _onCancelClicked: function() {
            return this.viewModel.set({
                showAddPartnerForm: !1
            })
        },
        _onRemoveClicked: function(e) {
            return this.collection.remove(e.model)
        },
        _onPartnerFormSubmitted: function(e) {
            var t;
            return e.preventDefault(),
            t = new Backbone.Model({
                userID: this.viewModel.get("selectedPartner"),
                isPartner: !0
            }),
            this.collection.add(t),
            this.viewModel.set({
                showAddPartnerForm: !1,
                selectedPartner: null
            })
        },
        _updateModel: function() {
            var e;
            return e = this.collection.where({
                isPartner: !0
            }).map(function(e) {
                return e.get("userID")
            }),
            this.options.mteModel.set({
                partners: e
            })
        },
        _onPartnersChanged: function() {
            return this._generatePartnerOptions(),
            this.stickit(this.viewModel),
            this._updateModel()
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i, n;
    n = Backbone.Model.extend({
        defaults: {
            loading: !1,
            error: !1,
            loadingMessage: "",
            errorMessage: ""
        }
    }),
    i = Marionette.ItemView.extend({
        template: "Waze/Modules/MTE/templates/item_edit/loading",
        bindings: {
            ".loading": {
                observe: "loading",
                visible: !0
            },
            ".error": {
                observe: "error",
                visible: !0
            }
        },
        initialize: function(e) {
            return this.model = new n(e)
        },
        onRender: function() {
            return this.stickit()
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d = {}.hasOwnProperty, h = [].indexOf || function(e) {
        for (var t = 0, i = this.length; t < i; t++)
            if (t in this && this[t] === e)
                return t;
        return -1
    }
    ;
    n = i(135),
    s = i(136),
    r = i(137),
    a = i(74),
    u = i(165),
    o = i(612),
    l = Marionette.ItemView.extend({
        template: function() {
            return I18n.t("mte.edit.closures.empty")
        }
    }),
    c = Marionette.LayoutView.extend({
        template: "Waze/Modules/MTE/templates/item_edit/closures",
        regions: {
            closuresRegion: ".closures"
        },
        initialize: function(e) {
            return this.segments = e.detailsModel.get("segments"),
            this.closures = e.detailsModel.get("closures"),
            this.map = e.map,
            this.dataModel = e.dataModel,
            this.mteModeState = e.mteModeState,
            this.drawingContext = e.drawingContext,
            this.closuresMarkerLayer = e.closuresMarkerLayer,
            this.segments.length ? (this.compositeSegment = new a(this.segments,this.dataModel,u.getReversedSegments(this.segments)),
            this.closuresView = new n({
                pannable: this.map.getPannable(),
                dataModel: this.dataModel,
                compositeSegment: this.compositeSegment,
                allClosures: this.closures,
                repoActive: this.dataModel.roadClosures.active,
                canSaveClosures: this._canSaveClosures(),
                listViewConfig: r.MTE,
                editViewConfig: s.MTE
            }),
            this._drawClosures(),
            this._toggleMarkers(!1)) : this.closuresView = new l
        },
        onBeforeShow: function() {
            return this.closuresRegion.show(this.closuresView)
        },
        _canSaveClosures: function() {
            return this.model.arePropertiesEditable() && !this.mteModeState.get("pendingChanges")
        },
        _drawClosures: function() {
            var e, t, i, n, s, r;
            for (this.drawingContext.setStyleMap(o),
            n = ["outline", "fill", "dash"],
            s = [],
            t = 0,
            i = n.length; t < i; t++)
                r = n[t],
                e = this.segments.map(function(e) {
                    return new OL.Feature.Vector(e.geometry.clone(),{
                        type: r
                    })
                }),
                s.push(this.drawingContext.addFeatures(e));
            return s
        },
        _toggleMarkers: function(e) {
            var t, i, n, s, r;
            n = _.pluck(this.closures, "id"),
            s = this.closuresMarkerLayer.markers,
            r = [];
            for (t in s)
                d.call(s, t) && (i = s[t],
                h.call(n, t) < 0 ? r.push(i.toggle(e)) : r.push(void 0));
            return r
        },
        onDestroy: function() {
            return this.drawingContext.destroy(),
            this._toggleMarkers(!0)
        }
    }),
    e.exports = c
}
, function(e, t) {
    var i, n;
    n = Backbone.Model.extend({
        defaults: {
            englishName: "",
            localName: "",
            locale: "es",
            showAddButton: !0,
            showLocalName: !1,
            showPreview: !0,
            editable: !0
        }
    }),
    i = Marionette.CompositeView.extend({
        template: "Waze/Modules/MTE/templates/item_edit/names",
        className: "mte-names-edit-view",
        events: {
            "click .add-local-name-button": "_onAddLocalNameButtonClicked",
            "click .remove-local-name-button": "_onRemoveLocalNameButtonClicked",
            "click .edit-names-button": "_onEditNamesButtonClicked",
            submit: "_onFormSubmitted"
        },
        bindings: {
            ".preview": {
                observe: "showPreview",
                visible: !0
            },
            ".edit-form": {
                observe: "showPreview",
                visible: _.negate(_.identity)
            },
            ".english-name-preview .name": {
                observe: "englishName",
                onGet: function(e) {
                    return _.isEmpty(e) ? I18n.t("mte.edit.name_list.add_name") : e
                }
            },
            ".english-name-preview": {
                classes: {
                    empty: {
                        observe: "englishName",
                        onGet: _.negate(_.identity)
                    }
                }
            },
            ".language-preview": {
                observe: "englishName",
                visible: !0,
                onGet: function(e) {
                    return !_.isEmpty(e)
                }
            },
            ".local-name-preview": {
                observe: "showLocalName",
                visible: !0
            },
            ".local-language-preview": "locale",
            ".local-name-preview .name": "localName",
            ".english-name input": "englishName",
            ".local-name input": {
                observe: "localName",
                attributes: [{
                    name: "required",
                    observe: "showLocalName"
                }]
            },
            ".locale": {
                observe: "locale",
                selectOptions: {
                    collection: "this.localeOptions",
                    defaultOption: {
                        value: null ,
                        label: I18n.t("mte.edit.name_list.select_language")
                    }
                },
                attributes: [{
                    observe: "showLocalName",
                    name: "required"
                }]
            },
            ".form-group.local-name": {
                observe: "showLocalName",
                visible: !0
            },
            ".add-local-name-button": {
                observe: "showAddButton",
                visible: !0
            },
            ".edit-names-button": {
                attributes: [{
                    name: "disabled",
                    observe: "editable",
                    onGet: _.negate(_.identity)
                }]
            },
            ".edit-names-button .waze-icon-edit": {
                observe: "editable",
                visible: !0
            }
        },
        initialize: function(e) {
            var t;
            return t = this.model.getLocale(),
            this.viewModel = new n({
                englishName: this.model.getEnglishName(),
                localName: this.model.getLocalName(),
                locale: t,
                editable: e.editable
            }),
            null !== t && this.viewModel.set({
                showLocalName: !0,
                showAddButton: !1
            }),
            this.localeOptions = _.without(I18n.availableLocales, "en").map(function(e) {
                return {
                    label: I18n.languageNames[e],
                    value: e
                }
            })
        },
        onRender: function() {
            return this.stickit(this.viewModel)
        },
        toggleEditable: function(e) {
            return e === !1 && this.viewModel.set({
                showPreview: !0
            }),
            this.viewModel.set({
                editable: e
            })
        },
        _onAddLocalNameButtonClicked: function() {
            return this.viewModel.set({
                showLocalName: !0,
                showAddButton: !1
            })
        },
        _onRemoveLocalNameButtonClicked: function() {
            return this.viewModel.set({
                showLocalName: !1,
                showAddButton: !0
            })
        },
        _onEditNamesButtonClicked: function() {
            return this.viewModel.set({
                showPreview: !1
            })
        },
        _onFormSubmitted: function(e) {
            var t;
            return e.preventDefault(),
            this.viewModel.set({
                showPreview: !0
            }),
            t = [{
                locale: "en",
                value: this.viewModel.get("englishName")
            }],
            this.viewModel.get("showLocalName") && t.push({
                locale: this.viewModel.get("locale"),
                value: this.viewModel.get("localName")
            }),
            this.trigger("namesChanged", t)
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    r = i(620),
    n = {
        THIS_WEEK: {
            name: I18n.t("mte.search.this_week"),
            endDate: 7..day().fromNow()
        },
        THIS_MONTH: {
            name: I18n.t("mte.search.this_month"),
            endDate: 1..month().fromNow()
        },
        NEXT_3_MONTHS: {
            name: I18n.t("mte.search.next_3_months"),
            endDate: 3..month().fromNow()
        },
        NEXT_YEAR: {
            name: I18n.t("mte.search.next_year"),
            endDate: 1..year().fromNow()
        }
    },
    s = Marionette.CompositeView.extend({
        template: "Waze/Modules/MTE/templates/mte_list",
        className: "flex-parent",
        childView: r,
        childViewContainer: "ul.mte-list",
        emptyView: function() {
            return new Marionette.ItemView({
                className: "empty-message",
                template: function() {
                    return I18n.t("mte.search.empty")
                }
            })
        },
        ui: {
            search: ".search-input",
            list: "ul.mte-list"
        },
        events: {
            "focus @ui.search": "_onFocusChange",
            "blur @ui.search": "_onFocusChange",
            "click .add-mte-button": "_onAddClicked",
            "click .date-filter-item": "_onDateFilterClicked"
        },
        childEvents: {
            click: "_onItemClicked"
        },
        bindings: {
            ".search-input": {
                observe: "query",
                onSet: function(e) {
                    return e.toLowerCase()
                }
            },
            ".current-date-filter": {
                observe: "dateFilter",
                onGet: function(e) {
                    return e.name
                }
            },
            "ul.mte-list": {
                classes: {
                    disabled: {
                        observe: ["typing", "query"],
                        onGet: function(e) {
                            var t, i;
                            return i = e[0],
                            t = e[1],
                            i && !t
                        }
                    }
                }
            }
        },
        initialize: function(e) {
            return this.dataModel = e.dataModel,
            this.model = new Backbone.Model({
                query: "",
                typing: !1,
                dateFilter: n.THIS_MONTH
            }),
            this.listenTo(this.model, "change:query change:dateFilter", function(e) {
                return function() {
                    return e._renderChildren()
                }
            }(this))
        },
        filter: function(e) {
            var t, i, n, s;
            return t = new Date(e.get("startDate")),
            !(t > this.model.get("dateFilter").endDate) && (s = this.model.get("query"),
            n = e.getEnglishName(),
            i = this.dataModel.cities.get(e.get("cityID")),
            i && (n = n + " " + i.attributes.englishName + " " + i.attributes.name),
            n.toLowerCase().indexOf(s) > -1)
        },
        onRender: function() {
            return this.stickit()
        },
        serializeData: function() {
            return {
                dateFilters: n
            }
        },
        _onFocusChange: function(e) {
            return this.model.set("typing", this.ui.search.is(":focus"))
        },
        _onItemClicked: function(e, t) {
            return this.trigger("mteItemClicked", t)
        },
        _onAddClicked: function() {
            return this.trigger("addClicked")
        },
        _onDateFilterClicked: function(e) {
            var t;
            return t = $(e.target),
            this.model.set("dateFilter", n[t.data().filter])
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h, p, g, m, f = {}.hasOwnProperty;
    n = i(85),
    r = i(38),
    o = i(60),
    l = i(147),
    d = i(88),
    h = i(606),
    p = i(617),
    g = i(7),
    m = i(9),
    a = i(615),
    s = i(614),
    l = i(147),
    u = i(616),
    c = Marionette.LayoutView.extend({
        className: "mte-edit-view",
        template: "Waze/Modules/MTE/templates/mte_edit_view",
        behaviors: {
            dateTimePickers: {
                behaviorClass: o
            }
        },
        regions: {
            namesRegion: ".names-region",
            addressEditRegion: ".address-edit-region",
            closuresRegion: "#mte-edit-closures",
            contributorsRegion: ".contributors-region"
        },
        events: {
            "click .back-button": "_onBackButtonClicked",
            "show.bs.tab .closures-tab": "_onClosuresTabClick",
            "show.bs.tab .contributors-tab": "_onContributorsTabClick",
            "click .submit-button": "_onSubmitClicked",
            "click .publish-button": "_onPublishClicked",
            "submit @ui.attributesForm": "_onFormSubmitted"
        },
        ui: {
            formSubmit: ".form-submit-button",
            attributesForm: ".attributes-form",
            formInputs: "form button, form input, form select",
            locationTooltip: ".location-tooltip"
        },
        bindings: {
            ".url": "url",
            ".event-page": {
                observe: "uniqueName",
                visible: !0
            },
            ".event-page a": {
                attributes: [{
                    name: "href",
                    observe: "uniqueName",
                    onGet: function(e) {
                        return e ? W.Config.mte.root_url + "/" + e : null
                    }
                }]
            },
            ".submit-buttons": {
                observe: "published",
                visible: !0,
                onGet: function(e) {
                    return !e
                }
            },
            ".category": {
                observe: "category",
                selectOptions: {
                    collection: "this.categoryOptions",
                    defaultOption: {
                        value: null ,
                        label: I18n.t("mte.edit.select_category")
                    }
                }
            },
            "[name=tweetText]": {
                observe: "tweetText",
                attributes: [{
                    name: "disabled",
                    observe: "published"
                }]
            }
        },
        submitButtonBindings: {
            ".submit-button": {
                observe: "submitted",
                visible: !0,
                onGet: function(e) {
                    return !e
                },
                attributes: [{
                    name: "disabled",
                    observe: "submitting"
                }]
            },
            ".submitted-indication": {
                observe: "submitted",
                visible: !0
            }
        },
        publishBindings: {
            ".publish-button": {
                observe: ["published", "canPublish"],
                visible: !0,
                onGet: function(e) {
                    var t, i;
                    return i = e[0],
                    t = e[1],
                    !i && t
                },
                attributes: [{
                    name: "disabled",
                    observe: "publishing"
                }]
            },
            ".published-indication": {
                observe: ["published", "canPublish"],
                visible: !0,
                onGet: function(e) {
                    var t, i;
                    return i = e[0],
                    t = e[1],
                    i && t
                }
            }
        },
        validationErrorsBindings: {
            ".validation-error[for=cityID]": "cityID",
            ".validation-error[for=names]": "names",
            ".validation-error[for=startDate]": "startDate",
            ".validation-error[for=endDate]": "endDate",
            ".start-date-group": {
                classes: {
                    "has-error": {
                        observe: "startDate"
                    }
                }
            },
            ".end-date-group": {
                classes: {
                    "has-error": {
                        observe: "endDate"
                    }
                }
            }
        },
        initialize: function(e) {
            var t;
            return this.dataModel = e.dataModel,
            this.mteModeState = e.mteModeState,
            this.api = new l({
                dataModel: this.dataModel
            }),
            t = [this.model.clone(), this.model],
            this.model = t[0],
            this.originalModel = t[1],
            this.api = new l({
                dataModel: this.dataModel
            }),
            this.submitViewModel = new Backbone.Model({
                submitting: !1,
                submitted: this.originalModel.get("ready")
            }),
            this.publishViewModel = new Backbone.Model({
                publishing: !1,
                canPublish: this.model.canPublish(),
                published: this.originalModel.get("published")
            }),
            this.categoryOptions = _.map(d.prototype.CATEGORIES, function(e) {
                return {
                    label: I18n.t("mte.edit.categories." + e),
                    value: e
                }
            }),
            this.listenTo(this.originalModel, "change", function(e) {
                return function(t) {
                    return e.model.set(t.changed),
                    e.submitViewModel.set({
                        submitted: e.originalModel.get("ready")
                    }),
                    e.publishViewModel.set({
                        published: e.originalModel.get("published"),
                        canPublish: e.originalModel.canPublish()
                    })
                }
            }(this)),
            this.listenTo(this.model, "change", this._onModelChanged),
            this.listenTo(this.mteModeState, "change:saving", this._onSavingChanged)
        },
        _onModelChanged: function(e) {
            var t, i, n;
            if (null != this.validator) {
                n = e.changed;
                for (t in n)
                    f.call(n, t) && this.validator.clearErrorFor(t)
            }
            if (i = Object.keys(e.changed),
            _.intersection(i, d.prototype.writableAttributes).length > 0)
                return this.trigger("modelChanged")
        },
        onBeforeShow: function() {
            return this.namesView = new p({
                model: this.model,
                editable: this.model.arePropertiesEditable()
            }),
            this.listenTo(this.namesView, "namesChanged", function(e) {
                return function(t) {
                    return e.model.set({
                        names: t
                    })
                }
            }(this)),
            this.namesRegion.show(this.namesView),
            this.addressView = new n({
                addressModel: this.model.getAddress(),
                dataModel: this.dataModel,
                feature: this.model,
                editable: this.model.arePropertiesEditable(),
                editStreet: !1,
                showCitySelect: !0
            }),
            this.listenTo(this.addressView, "addressChanged", function(e) {
                return function() {
                    var t;
                    return e.trigger("modelChanged"),
                    null != (t = e.validator) ? t.clearErrorFor("cityID") : void 0
                }
            }(this)),
            this.addressEditRegion.show(this.addressView)
        },
        onRender: function() {
            return this.stickit(),
            this.stickit(this.submitViewModel, this.submitButtonBindings),
            this.stickit(this.publishViewModel, this.publishBindings),
            this.model.arePropertiesEditable() || this._toggleFormInputs(!1),
            this.ui.locationTooltip.tooltip()
        },
        serializeData: function() {
            return {
                modelAttributes: this.model.attributes,
                showTweetControls: this.model.canEditTweetText(),
                newModel: this.model.isNew()
            }
        },
        _onSavingChanged: function(e, t) {
            if (this.model.arePropertiesEditable())
                return this._toggleFormInputs(!t),
                this.namesView.toggleEditable(!t),
                this.addressView.toggleEditable(!t)
        },
        _toggleFormInputs: function(e) {
            return this.ui.formInputs.prop("disabled", !e)
        },
        validate: function() {
            var e;
            return e = $.Deferred(),
            this._isMTEValid() ? e.resolve() : (this._showValidationErrors(),
            e.reject()),
            e.promise()
        },
        _isMTEValid: function() {
            var e;
            return e = this.ui.attributesForm.get(0).checkValidity(),
            null != this.validator && this.unstickit(this.validator, this.validationErrorsBindings),
            this.validator = h.validate(this.model),
            this.stickit(this.validator, this.validationErrorsBindings),
            this.validator.isValid() && e
        },
        _showValidationErrors: function() {
            return this.ui.formSubmit.click()
        },
        getAction: function() {
            var e;
            return e = this.model.isNew() ? new r(this.model,this.dataModel.majorTrafficEvents) : new g(this.originalModel,this.model.attributes),
            e.setModel(this.dataModel),
            e
        },
        _onBackButtonClicked: function() {
            var e;
            if (e = !0,
            this.mteModeState.get("pendingChanges") && (e = confirm(I18n.t("mte.edit.pending_changes"))),
            e)
                return this.trigger("backButtonClicked")
        },
        _loadMTEDetails: function(e, t, i) {
            return e.show(new a({
                loading: !0,
                loadingMessage: t
            })),
            this.api.getMTEDetails(this.model.get("id")).fail(function() {
                return e.show(new a({
                    error: !0,
                    errorMessage: i
                }))
            })
        },
        _onClosuresTabClick: function() {
            return this._loadMTEDetails(this.closuresRegion, I18n.t("mte.edit.closures.loading"), I18n.t("mte.edit.closures.error")).done(function(e) {
                return function(t) {
                    return e.closuresRegion.show(new u({
                        map: e.options.map,
                        model: e.model,
                        mteModeState: e.mteModeState,
                        dataModel: e.dataModel,
                        detailsModel: t,
                        canAdd: !1,
                        drawingContext: e.options.map.getDrawingContext({
                            extendedMode: !0
                        }),
                        closuresMarkerLayer: e.options.map.closuresMarkerLayer
                    }))
                }
            }(this))
        },
        _onContributorsTabClick: function() {
            return this._loadMTEDetails(this.contributorsRegion, I18n.t("mte.edit.contributors.loading"), I18n.t("mte.edit.contributors.error")).done(function(e) {
                return function(t) {
                    return e.contributorsRegion.show(new s({
                        detailsModel: t,
                        mteModel: e.model,
                        editable: e.model.canEditPartners()
                    }))
                }
            }(this))
        },
        _onSubmitClicked: function() {
            if (confirm(I18n.t("mte.edit.submit_confirm")))
                return this.submitViewModel.set({
                    submitting: !0
                }),
                this.api.submit(this.originalModel).always(function(e) {
                    return function() {
                        return e.submitViewModel.set({
                            submitting: !1
                        })
                    }
                }(this)).fail(function(e) {
                    var t;
                    return alert(m.getSaveErrorTitle(null != (t = _.first(e.errorList)) ? t.code : void 0, "mte.edit.submit_failed"))
                })
        },
        _onPublishClicked: function() {
            return this.publishViewModel.set({
                publishing: !0
            }),
            this.api.publish(this.originalModel).always(function(e) {
                return function() {
                    return e.publishViewModel.set({
                        publishing: !1
                    })
                }
            }(this)).fail(function(e) {
                var t;
                return alert(m.getSaveErrorTitle(null != (t = _.first(e.errorList)) ? t.code : void 0, "mte.edit.publish_failed"))
            })
        },
        _onFormSubmitted: function(e) {
            return e.preventDefault()
        }
    }),
    e.exports = c
}
, function(e, t, i) {
    var n, s;
    s = i(9),
    n = Marionette.ItemView.extend({
        tagName: "li",
        className: "mte-item",
        template: "Waze/Modules/MTE/templates/mte_item_view",
        triggers: {
            click: "click"
        },
        serializeData: function() {
            return {
                published: this.model.get("published"),
                name: this.model.getEnglishName(),
                date: this._shortDate()
            }
        },
        _shortDate: function() {
            var e, t;
            return t = new Date(this.model.get("startDate")),
            e = new Date(this.model.get("endDate")),
            s.formatMonthRange(t, e)
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i;
    i = Marionette.LayoutView.extend({
        template: "Waze/Modules/MTE/templates/sidebar",
        className: "sidebar-layout",
        regions: {
            loaderRegion: ".loaderRegion",
            mainRegion: ".mainRegion"
        },
        bindings: {
            ".loaderRegion": {
                observe: "loadingFeatures",
                visible: !0
            },
            ".mainRegion": {
                observe: "loadingFeatures",
                visible: _.negate(_.identity)
            }
        },
        initialize: function(e) {
            return this.app = e.app
        },
        onRender: function() {
            return this.stickit(this.app)
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i, n, s;
    n = function(e) {
        return [{
            name: "disabled",
            observe: ["saving", e],
            onGet: function(e) {
                var t, i;
                return i = e[0],
                t = e[1],
                i || t
            }
        }]
    }
    ,
    s = function(e) {
        return [{
            name: "disabled",
            observe: ["saving", e],
            onGet: function(e) {
                var t, i;
                return i = e[0],
                t = e[1],
                i || !t
            }
        }]
    }
    ,
    i = Marionette.ItemView.extend({
        template: "Waze/Modules/MTE/templates/toolbar_buttons",
        triggers: {
            "click .save-button": "saveClicked",
            "click .add-button": "addClicked",
            "click .delete-button": "deleteClicked"
        },
        bindings: {
            ".save-button": {
                attributes: s("pendingChanges")
            },
            ".add-button": {
                attributes: n("pendingChanges")
            },
            ".delete-button": {
                attributes: [{
                    name: "disabled",
                    observe: ["editedModel", "showingList", "saving"],
                    onGet: function(e) {
                        var t, i, n;
                        return t = e[0],
                        n = e[1],
                        i = e[2],
                        i || n || (null != t ? t.isNew() : void 0)
                    }
                }]
            }
        },
        initialize: function(e) {
            return this.mteModeState = e.mteModeState
        },
        onRender: function() {
            return this.stickit(this.mteModeState)
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    n = i(159),
    s = i(302),
    r = Marionette.LayoutView.extend({
        template: "Waze/Modules/MTE/templates/topbar",
        regions: {
            loadingIndicator: ".loading-indicator-region",
            locationInfo: ".location-info-region"
        },
        onBeforeShow: function() {
            return this.loadingIndicator.show(new n({
                globalVent: this.options.globalVent
            })),
            this.locationInfo.show(new s({
                dataModel: this.options.dataModel,
                map: this.options.map
            }))
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r;
    r = i(164),
    n = i(8),
    s = Marionette.ItemView.extend({
        granularity: 10,
        numDigits: 5,
        lastXy: null ,
        mouseOver: !1,
        clipboard: null ,
        template: "Waze/Modules/MapControls/templates/mouse_position",
        ui: {
            mousePosition: ".mouse-position"
        },
        events: {
            "mouseover @ui.mousePosition": "_onMouseOver",
            "mouseout @ui.mousePosition": "_onMouseOut"
        },
        initialize: function(e) {
            return this.map = e.map,
            this.map.events.register("mousemove", this, this._onMapMouseMove),
            this.clipboard = new r,
            this.clipboard.events.on({
                copied: this._onClipboardCopied,
                scope: this
            }),
            !0
        },
        onDestroy: function() {
            return this.map.events.unregister("mousemove", this, this._onMapMouseMove),
            this.clipboard.events.un({
                copied: this._onClipboardCopied,
                scope: this
            })
        },
        onRender: function() {
            return this.ui.mousePosition.tooltip({
                placement: "top"
            }),
            this.clipboard.setEl(this.ui.mousePosition)
        },
        _formatOutput: function(e) {
            var t;
            return t = parseInt(this.numDigits),
            e.lon.toFixed(t) + " " + e.lat.toFixed(t)
        },
        _onMouseOver: function(e) {
            var t;
            return this.mouseOver = !0,
            t = this.map.getExtent().getCenterLonLat(),
            n.unproject(t),
            this._updateHtmlFromLonLat(t),
            this.clipboard.set(this.ui.mousePosition.html())
        },
        _onMouseOut: function(e) {
            return this.mouseOver = !1
        },
        _onClipboardCopied: function(e) {
            return this.ui.mousePosition.next(".tooltip").find(".tooltip-inner").text(I18n.t("footer.coords_copied"))
        },
        _updateHtmlFromLonLat: function(e) {
            var t;
            if (t = this._formatOutput(e),
            t !== this.ui.mousePosition.html())
                return this.ui.mousePosition.html(t)
        },
        _onMapMouseMove: function(e) {
            var t;
            if (null != e && !this.mouseOver) {
                if (null == this.lastXy || Math.abs(e.xy.x - this.lastXy.x) > this.granularity || Math.abs(e.xy.y - this.lastXy.y) > this.granularity)
                    return this.lastXy = e.xy;
                if (t = this.map.getLonLatFromPixel(e.xy),
                null == t)
                    return;
                return n.unproject(t),
                this._updateHtmlFromLonLat(t),
                this.lastXy = e.xy
            }
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a = {}.hasOwnProperty;
    n = i(54),
    o = i(164),
    s = Backbone.Model.extend({
        defaults: function() {
            return {
                env: null ,
                lon: null ,
                lat: null ,
                layers: null ,
                zoom: null ,
                marker: !1,
                appState: {},
                selection: {},
                filters: {}
            }
        },
        hrefAttributes: ["env", "lon", "lat", "layers", "zoom", "marker"],
        initialize: function(e) {
            return this.app = e.app,
            this.mapState = e.mapState,
            this.location = e.location,
            this.repositoryFilters = e.repositoryFilters,
            this._bindEvents(),
            this._setAppState(),
            this._setFilters(),
            this._setLocation(),
            this
        },
        onDestroy: function() {
            return this._unbindEvents()
        },
        _bindEvents: function() {
            return this.listenTo(this.app, "change:mode", this._setAppState),
            this.listenTo(this.app, n.STATE_CHANGED, this._setAppState),
            this.listenTo(this.repositoryFilters, "change", this._setFilters),
            this.location.events.register("change", this, this._setLocation),
            this.mapState.on("statechanged", this._setMapState, this)
        },
        _unbindEvents: function() {
            return this.location.events.unregister("change", this, this._setLocation),
            this.mapState.off("statechanged", this._setMapState, this)
        },
        _setAppState: function() {
            return this.set({
                appState: this.app.getState()
            })
        },
        _setLocation: function() {
            return this.set({
                env: this.location.code
            })
        },
        _setFilters: function() {
            var e, t, i, n;
            i = {},
            n = this.repositoryFilters.attributes;
            for (e in n)
                a.call(n, e) && (t = n[e],
                i["" + e + W.Config.permalink.filterSuffix] = t);
            return this.set({
                filters: i
            })
        },
        _setMapState: function(e) {
            return this.set({
                lon: e.center.lon.toFixed(W.Config.units.lonLatPrecision),
                lat: e.center.lat.toFixed(W.Config.units.lonLatPrecision),
                zoom: e.center.zoom,
                layers: e.layers,
                marker: !!e.marker || void 0,
                selection: e.selection
            })
        },
        getHref: function() {
            var e, t;
            return e = _.pick(this.attributes, this.hrefAttributes),
            _.extend(e, this.get("appState")),
            _.extend(e, this.get("filters")),
            _.extend(e, this.get("selection")),
            t = OL.Util.getParameterString(e),
            "" + window.location.origin + window.location.pathname + "?" + t
        }
    }),
    r = Marionette.ItemView.extend({
        template: "Waze/Modules/MapControls/templates/permalink",
        mapState: null ,
        marker: null ,
        clipboard: null ,
        ui: {
            permalink: ".permalink",
            livemapLink: ".livemap-link"
        },
        events: {
            "click @ui.permalink": "_onPermalinkClick",
            "mouseover @ui.permalink": "_onPermalinkMouseOver"
        },
        initialize: function(e) {
            return Marionette.ItemView.prototype.initialize.apply(this, arguments),
            this.mapState = e.mapState,
            this.mapState.on("statechanged", this._setLivemapLink, this),
            this.permalinkModel = new s({
                app: e.app,
                mapState: e.mapState,
                location: e.location,
                repositoryFilters: e.repositoryFilters
            }),
            this.listenTo(this.permalinkModel, "change", this._setPermalinkLink),
            this.clipboard = new o,
            this.clipboard.events.on({
                copied: this._onClipboardCopied,
                scope: this
            }),
            !0
        },
        _onPermalinkClick: function(e) {
            return e.stopPropagation(),
            W.Report.generalAction("permalink_clicked")
        },
        _onPermalinkMouseOver: function(e) {
            return this.clipboard.set($(e.target).attr("href"))
        },
        _onClipboardCopied: function(e) {
            return this.ui.permalink.next(".tooltip").find(".tooltip-inner").text(I18n.t("footer.link_copied"))
        },
        _setPermalinkLink: function() {
            var e;
            return e = this.permalinkModel.getHref(),
            this.ui.permalink.attr("href", e)
        },
        _setLivemapLink: function(e) {
            var t, i, n;
            return t = e.center,
            i = t.zoom + W.Config.livemap.zoom_offset,
            i = Math.min(W.Config.livemap.max_zoom, i),
            n = $.param({
                lon: t.lon.toFixed(W.Config.units.lonLatPrecision),
                lat: t.lat.toFixed(W.Config.units.lonLatPrecision),
                zoom: i
            }),
            this.ui.livemapLink.attr("href", W.Config.livemap.url + "?" + n)
        },
        onRender: function() {
            var e;
            return e = this.$el,
            this.ui.permalink.tooltip({
                placement: "top"
            }),
            this.clipboard.setEl(this.ui.permalink)
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r;
    s = i(43),
    r = i(637),
    n = s.extend({
        MORE_INFO_DEFAULTS: [],
        getTitle: function() {
            return I18n.t("problems.panel.closure.title")
        },
        getReportedString: function() {
            return I18n.t("problems.panel.closure.reported")
        },
        hasDescription: function() {
            return !0
        },
        getDescriptionTemplate: function() {
            return "Waze/Modules/Problems/templates/closure_description"
        },
        getMoreInfo: function() {
            return [this.problem]
        },
        createMoreInfoRenderer: function(e, t, i) {
            return new r(e,t,i)
        },
        getSolvedStateString: function() {
            return I18n.t("problems.panel.closure.states.solved")
        },
        getNotIdentifiedStateString: function() {
            return I18n.t("problems.panel.closure.states.not_identified")
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r;
    r = i(638),
    s = i(43),
    n = s.extend({
        MORE_INFO_DEFAULTS: [],
        createMoreInfoRenderer: function(e, t, i) {
            return new r(e,t,i)
        },
        getMoreInfo: function() {
            return null != this.moreInfo ? this.moreInfo : this.moreInfo = this.problem.getSessions()
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d;
    o = i(43),
    r = i(627),
    c = i(630),
    s = i(626),
    d = i(631),
    a = i(2),
    l = i(49).prototype.TYPE,
    n = {},
    u = {},
    u[l.DISCONNECTION] = o,
    u[l.TURN] = c,
    u[l.DATA] = r,
    u[l.ROAD_CLOSURE] = s,
    n.createAdapter = function(e) {
        var t;
        return new (t = e.type === a.UPDATE_REQUEST ? d : u[e.attributes.problemType])(e)
    }
    ,
    e.exports = n
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        defaults: {
            available: !0,
            visible: !0
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    s = i(642),
    n = i(43),
    r = n.extend({
        MORE_INFO_DEFAULTS: [],
        createMoreInfoRenderer: function(e, t, i) {
            return new s(e,t,i)
        },
        getMoreInfo: function() {
            return null != this.moreInfo ? this.moreInfo : this.moreInfo = this.problem.getSessions()
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o, a;
    s = i(148),
    r = i(7),
    a = i(643),
    n = i(43),
    o = n.extend({
        MORE_INFO_DEFAULTS: [{
            name: "route",
            visible: !0
        }, {
            name: "drive",
            visible: !0
        }],
        getTitle: function() {
            return this.problem.attributes.typeText
        },
        getReportedString: function() {
            var e;
            return e = this.problem.attributes.localDriveTime || this.problem.attributes.driveDate,
            I18n.t("update_requests.panel.reported", {
                date: I18n.l("time.formats.long", Date.parse(e))
            })
        },
        hasDescription: function() {
            var e;
            return e = this.problem.attributes.description,
            null != e && e.length > 0
        },
        getDescription: function() {
            return this.problem.attributes.description
        },
        isConversationAvailable: function() {
            return !0
        },
        allowCommenting: function() {
            return this.problem.model.loginManager.isLoggedIn()
        },
        getMoreInfo: function() {
            return null != this.moreInfo ? this.moreInfo : this.moreInfo = this.problem.model.updateRequestSessions.get([this.problem.getID()]).done(function(e) {
                return function(t) {
                    return t = t[0],
                    e._moreInfoTypeMap.drive.set({
                        available: null != t.driveGeometry
                    }),
                    e._moreInfoTypeMap.route.set({
                        available: null != t.routeGeometry
                    })
                }
            }(this))
        },
        getConversation: function() {
            return null != this.conversation ? this.conversation : this.conversation = $.when(this.getMoreInfo()).then(function(e) {
                return e[0]
            })
        },
        getRepository: function() {
            return this.problem.model.mapUpdateRequests
        },
        createMoreInfoRenderer: function(e, t, i) {
            return new a(e,t,i)
        },
        getMarkerLayer: function() {
            return W.map.updateRequestLayer
        },
        getBounds: function() {
            return this.problem.getRequestBounds().getBounds()
        },
        getNextButtonString: function() {
            return this._nextButtonString || I18n.t("update_requests.panel.next")
        }
    }),
    e.exports = o
}
, function(e, t, i) {
    var n, s, r, o;
    n = i(80),
    r = i(635),
    s = i(633),
    o = OL.Class({
        editController: null ,
        initialize: function(e) {
            this.mediator = e.mediator,
            this._listenToLayerClicks(),
            W.commands.setHandler("problems:show", this.showProblem, this),
            W.reqres.setHandler("problems:browse", this.browseProblem, this)
        },
        showProblem: function(e, t) {
            var i;
            return null == t && (t = {}),
            null != (i = this.editController) && i.destroy(),
            this.editController = new s({
                problem: e,
                showDebug: this.mediator.get("advancedTools"),
                showNext: t.showNext,
                nextButtonString: t.nextButtonString
            }),
            this.editController.on("destroy", function(e) {
                return function() {
                    return e.editController = null ,
                    W.vent.trigger("problems:closed")
                }
            }(this)),
            W.vent.trigger("problems:shown", e)
        },
        browseProblem: function(e) {
            var t, i;
            return i = e.problem,
            this.showProblem(i, e),
            this._showLayer(i),
            t = new n,
            e.showNext && this.editController.on("nextClicked", function() {
                return t.next()
            }),
            t
        },
        showProblemStream: function(e) {
            var t, i;
            if (e.hasNext())
                return t = e.next(),
                i = e.hasNext(),
                this.showProblem(t, {
                    showNext: i
                }),
                i ? this.editController.on("nextClicked", function(t) {
                    return function() {
                        return t.showProblemStream(e)
                    }
                }(this)) : void 0
        },
        _showLayer: function(e) {
            return W.map.showLayerByObjectType(e.type)
        },
        _listenToLayerClicks: function() {
            var e, t, i, n, s;
            for (n = [W.map.problemLayer, W.map.updateRequestLayer],
            s = [],
            e = 0,
            i = n.length; e < i; e++)
                t = n[e],
                s.push($(t.div).on("click", ".map-problem", $.proxy(this._onProblemMarkerClicked, this)));
            return s
        },
        _onProblemMarkerClicked: function(e) {
            var t, i;
            if (this.mediator.get("editingEnabled"))
                return t = $(e.target).data("model"),
                i = new r(t.type).sortByDistance(t),
                this.showProblemStream(i)
        }
    }),
    e.exports = o
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    r = i(636),
    n = i(628),
    l = i(640),
    a = i(10),
    o = i(634),
    s = Marionette.Controller.extend({
        initialize: function() {
            return this.problem = this.options.problem,
            this.adapter = n.createAdapter(this.problem),
            null != this.options.nextButtonString && this.adapter.setNextButtonString(this.options.nextButtonString),
            this.viewModel = new o({
                adapter: this.adapter
            }),
            this.mapView = new l({
                map: W.map,
                markerLayer: this.adapter.getMarkerLayer(),
                adapter: this.adapter,
                viewModel: this.viewModel
            }),
            this.mapView.centerProblem(),
            this.listenTo(this.viewModel, "change:problemState", this._onProblemStateChanged),
            this.listenTo(this.adapter.getRepository(), a.CHANGED, this._repositoryChanged),
            this.listenTo(this.adapter.getRepository(), a.ADDED, this._onProblemsAdded),
            this.editView = new r({
                model: this.viewModel,
                adapter: this.adapter,
                showDebug: this.options.showDebug,
                showNext: this.options.showNext
            }),
            this.listenTo(this.editView, "destroy", this.destroy),
            this.listenTo(this.editView, "focusClicked", this._onFocusClicked),
            this.listenTo(this.editView, "nextClicked", this.trigger.bind(this, "nextClicked")),
            W.map.panelRegion.show(this.editView)
        },
        _onProblemStateChanged: function(e, t, i) {
            if (!i.fromRepository)
                return this.adapter.setState(this.viewModel.get("problemState"))
        },
        _repositoryChanged: function() {
            return this.viewModel.set("problemState", this.adapter.getState(), {
                fromRepository: !0
            })
        },
        _onProblemsAdded: function() {
            var e, t;
            return t = this.adapter.problem.getID(),
            e = this.adapter.getRepository().get(t),
            null != e && (this.adapter.problem = e),
            this.mapView.selectMarker()
        },
        _onFocusClicked: function() {
            return this.mapView.focusProblem()
        },
        onDestroy: function() {
            return this.editView.destroy(),
            this.mapView.destroy()
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        defaults: {
            loadingMoreInfo: !0,
            loadingConversation: !0,
            moreInfoAvailable: !0
        },
        initialize: function() {
            this.adapter = this.get("adapter"),
            this.set({
                problemState: this.adapter.getState()
            }),
            $.when(this.adapter.getMoreInfo()).done(function(e) {
                return function() {
                    return e.set({
                        loadingMoreInfo: !1
                    }),
                    e.set({
                        loadingConversation: !1
                    }),
                    e.set({
                        moreInfoAvailable: e.adapter.isMoreInfoAvailable()
                    })
                }
            }(this))
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = function() {
        function e(e) {
            var t;
            t = this._getRepository(e),
            this.problems = t.getObjectArray()
        }
        return e.prototype.TYPE_TO_REPO = {
            mapProblem: "problems",
            mapUpdateRequest: "mapUpdateRequests"
        },
        e.prototype._getRepository = function(e) {
            var t;
            return t = this.TYPE_TO_REPO[e],
            W.model[t]
        }
        ,
        e.prototype.sortByDistance = function(e) {
            return this.problems = _.sortBy(this.problems, function(t) {
                return -1 * e.geometry.distanceTo(t.geometry)
            }),
            this
        }
        ,
        e.prototype.next = function() {
            return this.problems.pop()
        }
        ,
        e.prototype.hasNext = function() {
            var e;
            return (null != (e = this.problems) ? e.length : void 0) > 0
        }
        ,
        e
    }(),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    n = i(138),
    r = i(9),
    s = Marionette.LayoutView.extend({
        maxHeight: null ,
        template: "Waze/Modules/Problems/templates/edit",
        events: {
            "click .done": "destroy",
            "click .title": "_onSectionTitleClicked",
            "click .focus": "_onFocusClicked"
        },
        triggers: {
            "click .next": "nextClicked"
        },
        regions: {
            conversationRegion: ".conversation-region"
        },
        ui: {
            problemData: ".problem-data",
            actions: ".actions",
            header: ".header"
        },
        bindings: {
            "input[name=state]": "problemState",
            ".more-info": {
                observe: "loadingMoreInfo",
                update: function(e, t) {
                    return e.toggleClass("loading", t)
                }
            },
            ".conversation": {
                observe: "loadingConversation",
                update: function(e, t) {
                    return e.toggleClass("loading", t)
                }
            },
            ".problem-edit": {
                observe: "problemState",
                update: function(e, t) {
                    return e.attr("data-state", t)
                }
            },
            ".not-available": {
                observe: "moreInfoAvailable",
                update: function(e, t) {
                    return e.toggle(!t)
                }
            }
        },
        initialize: function() {
            return this.adapter = this.options.adapter
        },
        _bindMoreInfo: function() {
            var e, t, i, n, s, r;
            for (i = this.adapter.getMoreInfoTypes(),
            n = [],
            e = 0,
            t = i.length; e < t; e++)
                s = i[e],
                r = s.get("name"),
                this.addBinding(s, "input[name=" + r + "]", "visible"),
                n.push(this.addBinding(s, ".more-info-" + r + "-checkbox", {
                    observe: "available",
                    update: function(e, t) {
                        return e.toggle(t)
                    }
                }));
            return n
        },
        serializeData: function() {
            return {
                adapter: this.adapter,
                showDebug: this.options.showDebug,
                showNext: this.options.showNext,
                model: this.model
            }
        },
        onRender: function() {
            return this.adapter.isConversationAvailable() && this._renderConversationView(),
            this._bindMoreInfo(),
            this.stickit(),
            this._setHeight()
        },
        _renderConversationView: function() {
            return $.when(this.adapter.getConversation()).done(function(e) {
                return function(t) {
                    var i;
                    return i = new Backbone.Collection(t.comments),
                    e.conversationView = new n({
                        commentable: t.getCommentable(),
                        enabled: e.adapter.allowCommenting()
                    }),
                    e.stickit(e.conversationView.viewModel, {
                        ".comment-count-badge": "commentCount"
                    }),
                    e.conversationRegion.show(e.conversationView)
                }
            }(this))
        },
        _onSectionTitleClicked: function(e) {
            var t;
            return t = $(e.target).parent(".section"),
            t.toggleClass("collapsed")
        },
        _onFocusClicked: function(e) {
            return e.preventDefault(),
            this.trigger("focusClicked")
        },
        setMaxHeight: function(e) {
            return this.maxHeight = e,
            this._setHeight()
        },
        _setHeight: function() {
            var e;
            return e = this.maxHeight - this.ui.actions.outerHeight() - this.ui.header.outerHeight(),
            this.ui.problemData.css({
                maxHeight: e
            })
        },
        templateHelpers: {
            showMoreInfoSection: function() {
                return this.adapter.getMoreInfoTypes().length > 0
            },
            showCloseDetails: function() {
                return !this.adapter.problem.editable
            },
            getCloseDate: function() {
                var e;
                return e = this.adapter.problem.attributes.resolvedOn,
                r.safe_t("problems.panel.closed.date", {
                    date_title: r.contentTag("strong", I18n.t("problems.panel.closed.date_title")),
                    date: I18n.l("date.formats.long", e)
                })
            },
            getClosingUser: function() {
                var e, t;
                return e = this.adapter.problem.attributes.resolvedBy,
                t = r.userProfile(e),
                r.safe_t("problems.panel.closed.user", {
                    user_title: r.contentTag("strong", I18n.t("problems.panel.closed.user_title")),
                    username: t
                })
            }
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = OL.Class({
        layer: null ,
        info: null ,
        displayOptions: null ,
        initialize: function(e, t, i) {
            this.closureProblem = e,
            this.layer = t,
            this.displayOptions = i
        },
        drawMoreInfo: function() {
            return this.layer.removeAllFeatures({
                silent: !0
            }),
            this._drawPins()
        },
        _drawPins: function() {
            if (this.closureProblem.hasEndPoint())
                return this.layer.driveRenderer.drawPin(this.closureProblem.attributes.geometry, "A"),
                this.layer.driveRenderer.drawPin(this.closureProblem.attributes.endPoint, "B")
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = OL.Class({
        layer: null ,
        info: null ,
        displayOptions: null ,
        initialize: function(e, t, i) {
            this.info = e,
            this.layer = t,
            this.displayOptions = i
        },
        drawMoreInfo: function() {
            return this.layer.removeAllFeatures({
                silent: !0
            }),
            this._drawSegments(),
            this._drawVenue()
        },
        _drawSegments: function() {
            if (null != this.info.segmentGeom && this.layer.driveRenderer.drawShortSegment(this.info.segmentGeom),
            null != this.info.secondarySegmentGeom)
                return this.layer.driveRenderer.drawShortSegment(this.info.secondarySegmentGeom)
        },
        _drawVenue: function() {
            if (null != this.info.venueGeom)
                return this.layer.driveRenderer.drawVenue(this.info.venueGeom)
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o;
    r = i(75),
    n = i(23),
    o = i(92),
    s = OL.Class(OL.Layer.Vector, {
        rendererOptions: {
            zIndexing: !0
        },
        displayInLayerSwitcher: !1,
        renderers: [n],
        styleMap: o,
        initialize: function() {
            OL.Layer.Vector.prototype.initialize.apply(this, arguments),
            this.driveRenderer = new r(this)
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(639),
    s = Marionette.Controller.extend({
        layer: null ,
        info: null ,
        viewModel: null ,
        initialize: function() {
            var e, t, i, s;
            for (this.viewModel = this.options.viewModel,
            this.map = this.options.map,
            this.markerLayer = this.options.markerLayer,
            this.adapter = this.options.adapter,
            this.layer = new n("problemMoreInfo"),
            this.viewModel.get("loadingMoreInfo") ? this.listenTo(this.viewModel, "change:loadingMoreInfo", this._onMoreInfoLoaded) : this._onMoreInfoLoaded(),
            s = this.adapter.getMoreInfoTypes(),
            e = 0,
            t = s.length; e < t; e++)
                i = s[e],
                this.listenTo(i, "change:visible", this._drawMoreInfo);
            this.selectMarker()
        },
        centerProblem: function() {
            var e, t;
            return e = this.adapter.getGeometry(),
            t = new OL.LonLat(e.x,e.y),
            this.map.setCenter(t)
        },
        focusProblem: function(e) {
            var t, i;
            return null == e && (e = !0),
            t = this.adapter.getBounds(),
            i = t.getCenterLonLat(),
            e ? (e = this.map.getZoomForExtent(t),
            e = Math.min(e, W.Config.problems.maxDetailsZoom),
            e = Math.max(e, W.Config.problems.minDetailsZoom)) : e = this.map.getZoom(),
            this.map.setCenter(i, e)
        },
        onDestroy: function() {
            return null != this.layer.map && this.map.removeLayer(this.layer),
            this.map.events.unregister("zoomend", this, this._drawMoreInfo),
            this._unselectMarker()
        },
        _onMoreInfoLoaded: function() {
            return this.map.addLayer(this.layer),
            this.map.events.register("zoomend", this, this._drawMoreInfo),
            $.when(this.adapter.getMoreInfo()).done(function(e) {
                return function(t) {
                    return e.info = t[0],
                    e._drawMoreInfo()
                }
            }(this))
        },
        _getDisplayOptions: function() {
            var e, t, i, n, s;
            for (e = {},
            n = this.adapter.getMoreInfoTypes(),
            t = 0,
            i = n.length; t < i; t++)
                s = n[t],
                e[s.get("name")] = s.get("visible") && s.get("available");
            return e
        },
        _drawMoreInfo: function() {
            return this.layer.removeAllFeatures({
                silent: !0
            }),
            this.renderer = this.adapter.createMoreInfoRenderer(this.info, this.layer, this._getDisplayOptions()),
            this.renderer.drawMoreInfo()
        },
        selectMarker: function() {
            return this._toggleMarkerSelection(!0)
        },
        _unselectMarker: function() {
            return this._toggleMarkerSelection(!1)
        },
        _toggleMarkerSelection: function(e) {
            var t, i;
            return t = this.adapter.problem.getID(),
            i = $(this.markerLayer.div).find("[data-id='" + t + "']"),
            i.toggleClass("selected", e),
            $(this.map.div).toggleClass("problem-selected", e)
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = OL.Class({
        layer: null ,
        info: null ,
        displayOptions: null ,
        initialize: function(e, t, i) {
            this.info = e,
            this.layer = t,
            this.displayOptions = i
        },
        drawMoreInfo: function() {
            return this.layer.removeAllFeatures({
                silent: !0
            }),
            this._drawSessions()
        },
        _drawSessions: function() {
            return this._drawMatchingSegments(),
            this.displayOptions.allSessions && this._drawAllSessions(),
            this.displayOptions.averageSession && this._drawAverageSession(),
            this._drawPins()
        },
        _drawMatchingSegments: function() {
            if (this.info.average.nextSegGeom && this.layer.driveRenderer.drawMatchedSegment(this.info.average.nextSegGeom),
            this.info.average.prevSegGeom)
                return this.layer.driveRenderer.drawMatchedSegment(this.info.average.prevSegGeom)
        },
        _drawAllSessions: function() {
            var e, t, i, n, s, r;
            for (n = this.info.sessions,
            s = [],
            t = 0,
            i = n.length; t < i; t++)
                r = n[t],
                s.push(function() {
                    var t, i, n, s;
                    for (n = r.geometry.components,
                    s = [],
                    t = 0,
                    i = n.length; t < i; t++)
                        e = n[t],
                        s.push(this.layer.driveRenderer.drawSession(e));
                    return s
                }
                .call(this));
            return s
        },
        _drawAverageSession: function() {
            if (this.info.average.geometry)
                return this.layer.driveRenderer.drawDisconnect(this.info.average.geometry.components[1]),
                this.layer.driveRenderer.drawUserDrive(this.info.average.geometry.components[0]),
                this.layer.driveRenderer.drawUserDrive(this.info.average.geometry.components[2])
        },
        _drawPins: function() {
            var e, t;
            if (e = this.info.average.prevSegGeom.getVertices(!0).last(),
            t = this.info.average.nextSegGeom.getVertices(!0).first(),
            !e.equals(t))
                return this.layer.driveRenderer.drawPin(e, "A"),
                this.layer.driveRenderer.drawPin(t, "B")
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = OL.Class({
        layer: null ,
        info: null ,
        displayOptions: null ,
        initialize: function(e, t, i) {
            this.info = e,
            this.layer = t,
            this.displayOptions = i
        },
        drawMoreInfo: function() {
            return this.layer.removeAllFeatures({
                silent: !0
            }),
            this._drawSuggestedRoute(),
            this._drawAlternatives()
        },
        _drawSuggestedRoute: function() {
            return this.layer.driveRenderer.drawSuggestedRoute(this.info.routePrevSeg),
            this.layer.driveRenderer.drawSuggestedRoute(this.info.routeNextSeg)
        },
        _drawAlternatives: function() {
            var e, t, i, n, s;
            for (n = this.info.routePrevSeg.components.last().clone(),
            s = this.info.alternatives,
            t = 0,
            i = s.length; t < i; t++)
                e = s[t],
                this.layer.driveRenderer.drawUserDrive(e.averageGeom),
                this.layer.driveRenderer.drawDriveWeightPoint(n, e.averageGeom, e.numDrives.toString())
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = OL.Class({
        layer: null ,
        info: null ,
        displayOptions: null ,
        initialize: function(e, t, i) {
            this.info = e,
            this.layer = t,
            this.displayOptions = i
        },
        drawMoreInfo: function() {
            if (this.layer.removeAllFeatures({
                silent: !0
            }),
            this.displayOptions.drive && this._drawUserDrive(),
            this.displayOptions.route)
                return this._drawRoute()
        },
        _drawUserDrive: function() {
            var e, t, i, n;
            if (this.info.driveGeometry)
                for (n = this.info.driveGeometry.components,
                t = 0,
                i = n.length; t < i; t++)
                    e = n[t],
                    this.layer.driveRenderer.drawUserDrive(e)
        },
        _drawRoute: function() {
            var e, t, i, n, s;
            if (this.info.routeGeometry) {
                for (n = this.info.routeGeometry.components,
                s = [],
                t = 0,
                i = n.length; t < i; t++)
                    e = n[t],
                    this.layer.driveRenderer.drawSuggestedRoute(e),
                    s.push(this.layer.driveRenderer.drawRouteInstructions(e, this.info.getRouteInstructions()));
                return s
            }
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    r = i(151),
    n = i(150),
    s = Marionette.Controller.extend({
        initialize: function(e) {
            return this.controller = e.controller,
            this.mediator = e.mediator,
            this._setDefaultHandler(),
            W.commands.setHandler("save:restoreDefaultHandler", this._setDefaultHandler, this),
            W.commands.setHandler("save:setHandler", this._setHandler, this),
            this.savePopoverRegion = new n({
                saveButtonSelector: "#toolbar .waze-icon-save"
            })
        },
        _startSave: function(e) {
            var t;
            return null == e && (e = {}),
            t = this.controller.save(e),
            null != this.flowController && this.flowController.destroy(),
            this.flowController = new r({
                saveResult: t,
                map: W.map,
                mediator: this.mediator,
                popoverRegion: this.savePopoverRegion
            }),
            this.flowController.on("resave", function(e) {
                return function() {
                    return e._startSave({
                        ignoreWarnings: !0
                    })
                }
            }(this))
        },
        _setDefaultHandler: function() {
            return this._setHandler(this._startSave, this)
        },
        _setHandler: function(e, t) {
            return W.commands.setHandler("save:start", e, t)
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    s = i(149),
    n = Backbone.Collection.extend({
        model: s,
        isIgnorable: function() {
            return this.all(function(e) {
                return e.get("ignorable")
            })
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a;
    n = i(23),
    o = 70,
    s = {
        fillColor: "black",
        strokeWidth: 0,
        fillOpacity: .65,
        mask: "url(#spotlightMask)"
    },
    a = {
        maskID: "spotlightMask",
        filter: "url(#spotlightBlur)",
        pointRadius: o,
        fillColor: "black",
        fillOpacity: 1,
        animation: {
            id: "spotlightAnimation",
            attributeName: "r",
            dur: "0.3s",
            from: 100,
            to: o,
            fill: "freeze",
            begin: "indefinite"
        }
    },
    r = OL.Class({
        layer: null ,
        overlay: null ,
        initialize: function(e) {
            this.map = e
        },
        _ensureLayer: function() {
            if (null == this.layer)
                return this.layer = new OL.Layer.Vector("spotlight",{
                    displayInLayerSwitcher: !1,
                    renderers: [n]
                }),
                this.map.addLayer(this.layer)
        },
        drawOverlay: function() {
            var e, t;
            return this._ensureLayer(),
            t = this.map.getExtent().scale(2).toGeometry(),
            e = new OL.Feature.Vector(t,null ,s),
            this.layer.addFeatures(e)
        },
        drawAndFocusSpotlightAtPoint: function(e) {
            var t;
            return this._isSpotlightInBounds(e) || this.map.setCenter(new OL.LonLat(e.x,e.y)),
            this._destroyLayer(),
            this._ensureLayer(),
            this.drawOverlay(),
            t = new OL.Feature.Vector(e.clone(),null ,a),
            this.layer.addFeatures(t),
            this._animateSpotlight()
        },
        _animateSpotlight: function() {
            var e;
            return e = document.getElementById("spotlightAnimation"),
            null != e ? e.beginElement() : void 0
        },
        _isSpotlightInBounds: function(e) {
            var t, i;
            return i = o * this.map.getResolution(),
            t = new OL.Bounds(e.x - i,e.y + i,e.x + i,e.y - i),
            this.map.getExtent().containsBounds(t)
        },
        _destroyLayer: function() {
            if (null != this.layer)
                return this.layer.removeAllFeatures(),
                this.map.removeLayer(this.layer),
                this.layer.destroy(),
                this.layer = null
        },
        destroy: function() {
            return this._destroyLayer()
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    s = i(149),
    n = Marionette.ItemView.extend({
        template: "Waze/Modules/Save/templates/error_item",
        tagName: "li",
        className: "error-item",
        events: {
            "click .focus": "_onFocusClicked"
        },
        _onFocusClicked: function() {
            return this.trigger("click:focus")
        },
        serializeData: function() {
            var e, t, i;
            return t = Marionette.ItemView.prototype.serializeData.apply(this, arguments),
            i = this._getTranslations(),
            t.title = i.title,
            t.solution = i.solution || I18n.t("save.default_solution"),
            t.showPanButton = null !== this.model.get("geometry"),
            e = this.model.get("collatedCount"),
            null != e && e > 1 && (t.collated = I18n.t("save.error.collated", {
                count: e
            })),
            t
        },
        _getTranslations: function() {
            var e, t, i;
            return e = I18n.t("save.error_types"),
            i = e[this.model.get("code")],
            null == i && (t = s.prototype.defaults.code,
            i = e[t]),
            i
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    n = i(647),
    s = Marionette.CompositeView.extend({
        childView: n,
        childViewContainer: ".list",
        template: "Waze/Modules/Save/templates/error_list",
        events: {
            "click .save": "_onSaveClicked",
            "click .edit": "destroy",
            "click .close-button": "destroy"
        },
        childEvents: function() {
            return {
                "click:focus": this._onChildFocusClicked
            }
        },
        _onChildFocusClicked: function(e) {
            return this.trigger("click:focus", e.model)
        },
        _onSaveClicked: function() {
            return this.trigger("click:save")
        },
        serializeData: function() {
            return {
                collection: this.collection
            }
        },
        templateHelpers: {
            getTitle: function() {
                return this.collection.isIgnorable() ? I18n.t("save.error.title_ignorable") : I18n.t("save.error.title")
            },
            showActionTitle: function() {
                return this.collection.isIgnorable()
            }
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    s = i(9),
    n = Marionette.ItemView.extend({
        CLOSE_TIMEOUT_MILLIS: 2e3,
        template: "Waze/Modules/Save/templates/success",
        serializeData: function() {
            return {
                venueNames: this._getVenueNames(),
                model: this.model
            }
        },
        _getVenueNames: function() {
            var e, t;
            return e = function() {
                var e, i, n, s;
                for (n = this.model.pendingEdits.venues,
                s = [],
                e = 0,
                i = n.length; e < i; e++)
                    t = n[e],
                    s.push(t.attributes.name);
                return s
            }
            .call(this),
            _.compact(e),
            e.join(", ")
        },
        onRender: function() {
            return window.setTimeout(_.bind(this.destroy, this), this.CLOSE_TIMEOUT_MILLIS)
        },
        templateHelpers: function() {
            return {
                showPendingVenues: function() {
                    return this.model.pendingEdits.venues.length > 0
                },
                getSaveCountTextFor: function(e) {
                    var t;
                    return t = this.model.saveCount[e],
                    t < 1 ? "" : s.contentTag("div", I18n.t("save.success.change_count." + e, {
                        count: t
                    }))
                }
            }
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o;
    n = i(652),
    s = i(655),
    o = i(654),
    r = Marionette.Controller.extend({
        initialize: function(e) {
            var t, i, r;
            return i = new n,
            t = e.map,
            this.scene = new s({
                panoramaProvider: i
            }),
            r = new o({
                scene: this.scene,
                map: t,
                zoomBarControl: t.zoomBar
            }),
            e.selectionManager.events.register("selectionchanged", this, this._onSelectionChanged)
        },
        _onSelectionChanged: function(e) {
            var t;
            return t = _.pluck(e.selected, "model"),
            this.scene.set({
                content: t
            })
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    n = i(8),
    s = OL.Class({
        DEFAULT_HEADING: 0,
        initialize: function() {},
        find: function(e, t, i) {
            var n;
            return 0 === t.length ? this.DEFAULT_HEADING : (n = "segment" === t[0].type ? this._getAngleOfClosestEdge(e, t, i) : this._getContentCentroidAngle(e, t),
            null === n ? this.DEFAULT_HEADING : this._angleToHeading(n).toDeg())
        },
        _getContentCentroidAngle: function(e, t) {
            var i;
            return i = t[0].geometry.getCentroid(),
            Math.atan2(e.lat - i.y, e.lon - i.x)
        },
        _getAngleOfClosestEdge: function(e, t, i) {
            var s, r, o, a, l, u, c;
            return c = this._getClosestSegmentInfo(e, t),
            c.distance <= i ? (u = c.segment,
            r = new OL.Geometry.Point(c.x0,c.y0),
            o = n.getPointEdge(u.geometry.components, r),
            a = u.geometry.components[o],
            l = u.geometry.components[o + 1],
            s = Math.atan2(a.y - l.y, a.x - l.x),
            u.isOneWay() && u.attributes.revDirection && (s += Math.PI),
            s) : null
        },
        _getClosestSegmentInfo: function(e, t) {
            var i, n;
            return n = new OL.Geometry.Point(e.lon,e.lat),
            i = t.map(function(e) {
                var t;
                return t = e.geometry.distanceTo(n, {
                    details: !0
                }),
                t.segment = e,
                t
            }),
            _.min(i, function(e) {
                return e.distance
            })
        },
        _angleToHeading: function(e) {
            return 3 * Math.PI / 2 - e
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = OL.Class({
        DEFAULT_SEARCH_RADIUS_METERS: 50,
        SEARCH_RADIUS_PADDING_FACTOR: 2,
        _streetViewProvider: null ,
        initialize: function() {},
        getPanorama: function(e, t) {
            var i, n, s;
            return null == t && (t = this.DEFAULT_SEARCH_RADIUS_METERS),
            s = new google.maps.LatLng(e.lat,e.lon),
            t *= this.SEARCH_RADIUS_PADDING_FACTOR,
            t = Math.floor(t),
            i = $.Deferred(),
            n = google.maps.StreetViewStatus,
            this._getStreetViewProvider().getPanoramaByLocation(s, t, function(e, t) {
                switch (t) {
                case n.OK:
                    return i.resolve(e);
                case n.ZERO_RESULTS:
                    return i.resolve(null );
                case n.UNKNOWN_ERROR:
                    return i.reject()
                }
            }),
            i.promise()
        },
        _getStreetViewProvider: function() {
            return this._streetViewProvider || (this._streetViewProvider = new google.maps.StreetViewService)
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    n = i(11),
    s = i(55),
    r = OL.Class(OL.Marker, {
        DRAG_POINT_RADIUS: 7,
        CROSSHAIR_RADIUS: 22,
        initialize: function(e, t) {
            var i, r;
            null == t && (t = null ),
            OL.Marker.prototype.initialize.call(this, e, new n("pin",!0)),
            r = (this.CROSSHAIR_RADIUS + this.DRAG_POINT_RADIUS) / Math.sqrt(2),
            this.crossHairOffset = new OL.Pixel(-r,-r),
            this.svProjection = new OpenLayers.Projection("EPSG:4326"),
            this.map = t,
            this.render(),
            i = this.icon.$div,
            this.dragging = new s(this.map),
            this.dragging.down = function(e) {
                return function(t) {
                    return i.addClass("dragging"),
                    e.events.triggerEvent("dragStart", {
                        xy: t.xy,
                        marker: e
                    })
                }
            }(this),
            this.dragging.force = function(e) {
                return function(t) {
                    return i.addClass("dragging"),
                    e.events.triggerEvent("dragStart", {
                        marker: e
                    })
                }
            }(this),
            this.dragging.move = function(e) {
                return function(t) {
                    var i;
                    return e.lonlat = e.map.getLonLatFromViewPortPx(t.xy.offset(e.crossHairOffset)),
                    i = e.lonlat.clone().transform(e.map.getProjectionObject(), e.svProjection),
                    e.layer.drawMarker(e),
                    e.events.triggerEvent("drag", {
                        xy: t.xy,
                        marker: e,
                        svLonlat: i
                    })
                }
            }(this),
            this.dragging.up = function(e) {
                return function(t) {
                    return i.removeClass("dragging"),
                    e.events.triggerEvent("dragCancel", {})
                }
            }(this),
            this.dragging.done = function(e) {
                return function(t) {
                    return e.icon.$div.removeClass("dragging"),
                    e.events.triggerEvent("dragDone", {
                        xy: t.xy,
                        marker: e
                    })
                }
            }(this),
            this.dragging.activate(this.dragHandle)
        },
        render: function() {
            return this.crossHair = $("<div />").addClass("crosshair").appendTo(this.icon.$div),
            this.dragHandle = $("<div />").addClass("drag-handle").appendTo(this.icon.$div),
            this.arrow = $("<div/>").append($("<i/>").addClass("fa fa-arrow-up arrow")).appendTo(this.crossHair)
        },
        setPanoAvailable: function(e) {
            return this.icon.$div.toggleClass("pano-available", e)
        },
        setCrosshairAngle: function(e) {
            return this.arrow.css({
                transform: "rotate(" + e + "deg)"
            })
        },
        setCrosshairLonlat: function(e) {
            return this.lonlat = e.transform(this.svProjection, this.map.getProjectionObject()),
            this.layer.drawMarker(this)
        },
        toggleVisibility: function(e) {
            return this.icon.display(e)
        },
        getGeodesicCrosshairRadius: function() {
            return this.CROSSHAIR_RADIUS * this.map.getGeodesicPixelSize().h * 1e3
        },
        getCrosshairRadius: function() {
            return this.CROSSHAIR_RADIUS * this.map.resolution
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r, o;
    n = i(12),
    o = i(6),
    s = i(653),
    r = OL.Class(n, {
        DRAG_THROTTLE_MILLIS: 200,
        elSelector: "#street-view-container",
        panoramaView: null ,
        availabilityRadius: null ,
        svActive: !1,
        map: null ,
        zoomBarControl: null ,
        events: {
            "click .close-button": "_closePanoramaView"
        },
        ui: {
            panoramaEl: ".panorama"
        },
        initialize: function(e) {
            n.prototype.initialize.apply(this, arguments),
            this._findUiElements(),
            W.accelerators.events.register("closeStreetView", this, this._closePanoramaView),
            this._renderCrosshair(),
            this._setupMap()
        },
        _activateSv: function() {
            if (!this.svActive)
                return this.svActive = !0,
                this.map.toggleSVMode(!0),
                W.Report.generalAction("streeview_started")
        },
        _deactivateSv: function() {
            if (this.svActive)
                return this.scene.set({
                    cameraLonLat: null ,
                    cameraHeading: 0
                }),
                this.svActive = !1,
                this.el.show(),
                this._getPanoramaView().setVisible(!1),
                this.pin.toggleVisibility(!1),
                this.map.toggleSVMode(!1)
        },
        _setupMap: function() {
            var e;
            return this.map.events.register("moveend", this, function() {
                var e;
                if (this.availabilityRadius = null ,
                e = this.map.getExtent().containsLonLat(this.pin.lonlat),
                this.svActive)
                    return this.el.toggle(!e)
            }),
            this.markerLayer = new OL.Layer.Markers("streetViewPin",{
                displayInLayerSwitcher: !1
            }),
            this.map.addLayer(this.markerLayer),
            this.pin = new s(this.map.getCenter() || new OL.LonLat(0,0),this.map),
            this.pin.toggleVisibility(!1),
            this.markerLayer.addMarker(this.pin),
            this.pin.layer = this.markerLayer,
            $(this.markerLayer.div).addClass("street-view-layer"),
            e = _.throttle(this._onPinDrag, this.DRAG_THROTTLE_MILLIS),
            this.pin.events.on({
                dragStart: function() {
                    return this.pin.toggleVisibility(!0),
                    this.el.hide()
                },
                drag: function(t) {
                    return e.call(this, t)
                },
                dragCancel: function(e) {},
                dragDone: this._onPinDragDone,
                scope: this
            })
        },
        _onPinDrag: function(e) {
            return this.scene.set({
                cameraLonLat: e.svLonlat.clone()
            }),
            $.when(this.scene.getPanorama(this._getAvailabilityRadius())).done(function(e) {
                return function() {
                    return e.pin.setPanoAvailable(e.scene.isPanoramaAvailable())
                }
            }(this))
        },
        _onPinDragDone: function() {
            var e, t;
            return this.scene.isPanoramaAvailable() ? (this.scene.lookAtContent(this.pin.getCrosshairRadius()),
            t = this.scene.get("panorama"),
            e = this.scene.get("cameraHeading"),
            this._activateSv(),
            this._getPanoramaView(!0).setPano(t.location.pano),
            this._getPanoramaView().setPov({
                heading: e,
                pitch: 0
            }),
            this._getPanoramaView().setVisible(!0)) : (this._deactivateSv(),
            this.pin.toggleVisibility(!1),
            this.el.show())
        },
        _renderCrosshair: function() {
            return this.el && this.el.off(".street-view-control"),
            this.el = $("<div/>").appendTo(this.zoomBarControl.streetViewContainer),
            this.el.addClass("street-view-control"),
            this.el.tooltip({
                title: I18n.t("street_view.tooltip"),
                placement: "right",
                container: "body",
                delay: {
                    show: 750
                }
            }),
            this.el.on("mousedown.street-view-control", function(e) {
                return function(t) {
                    return e.pin.setCrosshairLonlat(new OL.LonLat(0,0)),
                    e.pin.setPanoAvailable(!1),
                    e.pin.dragging.forceStart(!0),
                    !1
                }
            }(this))
        },
        _getPanoramaView: function(e) {
            return null == e && (e = !1),
            null == this.panoramaView || e ? (this.panoramaView = new google.maps.StreetViewPanorama(this.ui.panoramaEl.get(0),{
                panControl: !0,
                panControlOptions: {
                    position: google.maps.ControlPosition.TOP_RIGHT
                },
                zoomControl: !0,
                zoomControlOptions: {
                    position: google.maps.ControlPosition.TOP_RIGHT
                },
                enableCloseButton: !1,
                addressControl: !1,
                visible: !0
            }),
            google.maps.event.addListener(this.panoramaView, "position_changed", function(e) {
                return function() {
                    var t, i;
                    if (i = e.panoramaView.getPosition(),
                    i && (t = new OL.LonLat(i.lng(),i.lat()),
                    e.pin.setCrosshairLonlat(t),
                    !e.map.getExtent().containsLonLat(t)))
                        return e.map.setCenter(t)
                }
            }(this)),
            google.maps.event.addListener(this.panoramaView, "pov_changed", function(e) {
                return function() {
                    var t;
                    return t = e.panoramaView.getPov().heading,
                    e.scene.set({
                        cameraHeading: t
                    }),
                    e.pin.setCrosshairAngle(t)
                }
            }(this)),
            google.maps.event.addListener(this.panoramaView, "visible_changed", function(e) {
                return function() {
                    if (!e.panoramaView.getVisible())
                        return e._deactivateSv()
                }
            }(this)),
            this.panoramaView) : this.panoramaView
        },
        _closePanoramaView: function() {
            return this.panoramaView.setVisible(!1)
        },
        _getAvailabilityRadius: function() {
            return this.availabilityRadius || (this.availabilityRadius = this.pin.getGeodesicCrosshairRadius())
        },
        CLASS_NAME: "W.Presenter.StreetView"
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r;
    n = i(8),
    s = i(651),
    r = Backbone.Model.extend({
        defaults: function() {
            return {
                panorama: null ,
                cameraLonLat: null ,
                cameraHeading: 0,
                content: [],
                panoramaProvider: null
            }
        },
        initialize: function() {
            return this.on("change:cameraLonLat", this._onCameraLonLatChanged, this),
            this.panoramaProvider = this.attributes.panoramaProvider,
            this.headingFinder = new s
        },
        isPanoramaAvailable: function() {
            return null !== this.get("panorama")
        },
        getPanorama: function(e) {
            var t, i;
            return t = this.get("cameraLonLat"),
            i = this.get("panorama"),
            null !== i ? i : this.panoramaProvider.getPanorama(t, e).then(function(e) {
                return function(t) {
                    return e.set({
                        panorama: t
                    })
                }
            }(this), function(e) {
                return function() {
                    return e.set({
                        panorama: null
                    })
                }
            }(this)).then(function(e) {
                return function() {
                    return e.get("panorama")
                }
            }(this))
        },
        _onCameraLonLatChanged: function() {
            return this.set({
                panorama: null
            })
        },
        lookAtContent: function(e) {
            var t, i;
            return t = this._getCameraInContentProjection(),
            i = this.headingFinder.find(t, this.get("content"), e),
            this.set({
                cameraHeading: i
            })
        },
        _getCameraInContentProjection: function() {
            var e;
            return e = this.get("cameraLonLat").clone(),
            n.project(e),
            e
        }
    }),
    e.exports = r
}
, function(e, t) {
    var i;
    i = Marionette.LayoutView.extend({
        template: "Waze/Modules/Toolbar/templates/layer-switcher",
        regions: {
            layersList: "#layer-switcher-list"
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n;
    n = Backbone.Model.extend({
        defaults: {
            name: null ,
            displayClass: null ,
            featureName: null ,
            parent: null ,
            children: null ,
            control: null ,
            secondaryControl: null
        },
        initialize: function() {
            var e, t;
            if (e = i(154),
            t = this.get("children"),
            null != t)
                return this.children = new e(t),
                this.unset("children")
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a, l, u, c, d, h, p, g, m, f, v, y, b, w, S;
    S = i(1049),
    f = i(1046),
    v = i(1047),
    u = i(514),
    s = i(1031),
    n = i(486),
    c = i(1040),
    d = i(1041),
    l = i(1032),
    a = i(38),
    h = i(40),
    p = i(86),
    y = i(300),
    o = i(118),
    r = i(47),
    m = i(17),
    g = i(56),
    b = i(154),
    w = OL.Class({
        initialize: function(e) {
            this.actionManager = e.actionManager,
            this.map = e.map,
            this.selectionManager = e.selectionManager,
            this.dataModel = e.dataModel,
            this.loginManager = e.loginManager,
            this.editingMediator = e.editingMediator,
            this.app = e.app,
            this.app.on("change:loggedIn", function(e) {
                return function() {
                    e._enableControlsByRank(e.app.get("user"))
                }
            }(this))
        },
        getToolbarButtons: function(e) {
            var t, i;
            return t = m.getMenus().map(this.createMenu.bind(this)),
            i = [].concat(t, this._generateVenueMenu(), this._generateDrawingControls(), this._generateEditingControls().reverse()),
            new b(i)
        },
        _enableControlsByRank: function(e) {
            if (W.Config.big_junctions.enable)
                return this.drawBigJunction.control.setEnabled(null != e && this.loginManager.canEditBigJunctions())
        },
        _generateEditingControls: function() {
            return [{
                title: I18n.t("toolbar.delete"),
                control: new u(this.dataModel,{
                    displayClass: "waze-icon-trash"
                })
            }, {
                title: I18n.t("toolbar.redo"),
                control: new f(this.actionManager,{
                    displayClass: "waze-icon-redo"
                })
            }, {
                title: I18n.t("toolbar.undo"),
                control: new S(this.actionManager,{
                    displayClass: "waze-icon-undo"
                })
            }, {
                title: I18n.t("toolbar.save.title"),
                control: new v(this.actionManager,{
                    editingMediator: this.editingMediator,
                    displayClass: "waze-icon-save"
                })
            }]
        },
        _generateDrawingControls: function() {
            var e;
            return e = [{
                title: I18n.t("drawing.road"),
                control: new c(this.map.sketchLayer,this.map.segmentLayer,OL.Handler.Path,{
                    accelerator: "drawSegment",
                    enableSnapping: !0,
                    featureAdded: function(e) {
                        return function(t, i, n) {
                            e.actionManager.add(new r(t,{
                                createNodes: !0,
                                openAllTurns: W.prefs.get("enableTurnsByDefault"),
                                createTwoWay: W.prefs.get("twoWaySegmentsByDefault"),
                                snappedFeatures: [i, n]
                            })),
                            _.defer(function() {
                                return e.selectionManager.select([t])
                            })
                        }
                    }(this)
                })
            }, {
                title: I18n.t("drawing.roundabout"),
                control: new d({
                    onRoundaboutAdded: function(e) {
                        return function(t) {
                            var i;
                            i = new l(t),
                            e.actionManager.add(i),
                            _.defer(function() {
                                e.selectionManager.select(i.roundaboutSegments)
                            })
                        }
                    }(this)
                })
            }, {
                title: I18n.t("drawing.camera"),
                control: new c(this.map.sketchLayer,this.map.camerasLayer,OL.Handler.Point,{
                    enableSnapping: !0,
                    featureAdded: function(e) {
                        return function(t) {
                            var i;
                            i = new y({
                                geometry: t.geometry
                            }),
                            e.actionManager.add(new a(i,e.dataModel.cameras)),
                            _.defer(function() {
                                e.selectionManager.select([i])
                            })
                        }
                    }(this)
                })
            }],
            W.Config.big_junctions.enable && (this.drawBigJunction = {
                title: I18n.t("drawing.big_junction"),
                control: new c(this.map.sketchLayer,this.map.bigJunctionLayer,OL.Handler.Polygon,{
                    accelerator: "drawBigJunction",
                    featureAdded: function(e) {
                        return function(t) {
                            var i;
                            i = new o({
                                geometry: t.geometry
                            }),
                            e.actionManager.add(new n(i)),
                            _.defer(function() {
                                e.selectionManager.select([i])
                            })
                        }
                    }(this)
                })
            },
            e.push(this.drawBigJunction)),
            [{
                name: "drawing",
                displayClass: "waze-icon-road",
                children: e
            }]
        },
        _generateVenueMenu: function() {
            var e;
            return e = W.Config.venues.categories.map(this._generateVenueMenuItem.bind(this)),
            this.createMenu({
                name: "venues",
                displayClass: "waze-icon-place",
                items: e
            })
        },
        _generateVenueMenuItem: function(e) {
            var t, i;
            return t = function(t, i) {
                var n;
                return n = new h({
                    geometry: t,
                    categories: [e]
                }),
                i.actionManager.add(new s(n)),
                n
            }
            ,
            i = {
                primaryShape: "point",
                secondaryShape: "polygon",
                title: I18n.t("venues.categories." + e),
                featureName: I18n.t("drawing.venue"),
                layerUniqueName: g.LAYER_UNIQUE_NAMES.LANDMARKS,
                createFeature: t
            },
            e === p.PARKING_LOT && (i.primaryShape = "polygon",
            i.secondaryShape = null ),
            i
        },
        createMenu: function(e) {
            return {
                name: e.name,
                displayClass: e.displayClass,
                children: e.items.map(function(e) {
                    return function(t) {
                        return e.createMenuItem(t)
                    }
                }(this))
            }
        },
        createMenuItem: function(e) {
            var t, i, n, s;
            return t = function(t) {
                return function(i) {
                    return i = e.createFeature(i.geometry, t.dataModel),
                    _.defer(function() {
                        return t.selectionManager.select([i])
                    })
                }
            }(this),
            i = this.map.getLayersBy("uniqueName", e.layerUniqueName)[0],
            n = this.createDrawControl(e.primaryShape, i, t, e.enableSnapping),
            e.secondaryShape && (s = this.createDrawControl(e.secondaryShape, i, t, e.enableSnapping)),
            {
                title: e.title,
                featureName: e.featureName,
                showDrawingControls: null != e.secondaryShape,
                control: n,
                secondaryControl: s
            }
        },
        createDrawControl: function(e, t, i, n) {
            var s;
            return s = "point" === e ? OL.Handler.Point : OL.Handler.Polygon,
            new c(this.map.sketchLayer,t,s,{
                enableSnapping: n,
                featureAdded: i,
                drawingType: e
            })
        }
    }),
    e.exports = w
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    l = i(153),
    s = i(156),
    n = i(152),
    o = i(662),
    r = i(658),
    a = Marionette.Controller.extend({
        initialize: function(e) {
            return this.map = e.map,
            this.editingMediator = e.mediator,
            this.actionManager = e.actionManager,
            this.selectionManager = e.selectionManager,
            this.dataModel = e.dataModel,
            this.app = e.app,
            this.loginManager = e.loginManager,
            this.toolbarLayout = new l({
                model: this.app
            }),
            this.listenTo(this.toolbarLayout, "before:show", this._onShow),
            this.layerSwitcherController = new n({
                map: this.map,
                actionManager: this.actionManager
            }),
            this.editingMediator.on("change:editingEnabled", this._onEditingEnabledChanged, this)
        },
        destroy: function() {
            return this.layerSwitcherController.destroy(),
            this.editingMediator.off("change:editingEnabled", this._onEditingEnabledChanged, this)
        },
        _onShow: function() {
            return this._initEditingToolbar(),
            this.toolbarLayout.layerSwitcher.show(this.layerSwitcherController.getLayout()),
            this._setToolbarState(this.editingMediator.get("editingEnabled"))
        },
        _initEditingToolbar: function() {
            var e;
            return e = new r({
                actionManager: this.actionManager,
                map: this.map,
                app: this.app,
                selectionManager: this.selectionManager,
                dataModel: this.dataModel,
                loginManager: this.loginManager,
                editingMediator: this.editingMediator
            }),
            this.toolbarCollectionView = new o({
                collection: e.getToolbarButtons(),
                map: this.map
            }),
            this.toolbarLayout.toolbar.show(this.toolbarCollectionView)
        },
        _setToolbarState: function(e) {
            var t;
            return this.enabled = e,
            this.enabled ? (this.searchView = new s({
                map: this.map
            }),
            this.toolbarLayout.search.show(this.searchView),
            this.searchView.enable(),
            this.toolbarCollectionView.enable()) : (null != (t = this.searchView) && t.disable(),
            this.toolbarLayout.search.empty(),
            this.toolbarCollectionView.disable())
        },
        _onEditingEnabledChanged: function() {
            return this._setToolbarState(this.editingMediator.get("editingEnabled"))
        }
    }),
    e.exports = a
}
, function(e, t, i) {
    var n, s, r, o, a, l, u;
    l = i(6),
    n = i(89),
    s = i(155),
    u = i(661),
    o = i(17),
    a = {
        problems: {
            viewClass: s,
            options: {
                filterName: "CLOSED",
                translations: I18n.t("layer_switcher.filters.closed_problems")
            }
        },
        update_requests: {
            viewClass: s,
            options: {
                filterName: "CLOSED",
                translations: I18n.t("layer_switcher.filters.closed_problems")
            }
        },
        landmarks: {
            viewClass: u
        }
    },
    r = Marionette.CompositeView.extend({
        template: "Waze/Modules/Toolbar/templates/layer-switcher-list",
        childViewContainer: ".togglers",
        getChildView: function(e) {
            var t, i;
            return t = e.get("layer"),
            (null != (i = this.specificViews[t.uniqueName]) ? i.viewClass : void 0) || n
        },
        childViewOptions: function(e) {
            var t, i;
            return t = e.get("layer"),
            (null != (i = this.specificViews[t.uniqueName]) ? i.options : void 0) || {}
        },
        className: "layer-switcher",
        ui: {
            togglers: ".togglers",
            reloadButton: ".reload-button",
            dropdown: ".dropdown",
            dropdownMenu: ".dropdown-menu"
        },
        events: {
            "click @ui.reloadButton": "_onReloadClick"
        },
        initialize: function(e) {
            var t, i, n, s, r;
            for (this.map = e.map,
            this.actionManager = e.actionManager,
            this.specificViews = _.clone(a),
            s = o.getLayers(),
            r = [],
            t = 0,
            n = s.length; t < n; t++)
                i = s[t],
                i.layerSwitcherOptions ? r.push(this.specificViews[i.uniqueName] = i.layerSwitcherOptions) : r.push(void 0);
            return r
        },
        onRender: function() {
            return this._initSortable(),
            this._initReloadButton(),
            this._registerEventHandlers()
        },
        onDestroy: function() {
            return this._unregisterEventHandlers()
        },
        _initSortable: function() {
            return this.ui.togglers.sortable({
                handle: ".handle",
                items: ".draggable",
                forcePlaceholderSize: !0
            }).bind("sortupdate", function(e) {
                return function(t, i) {
                    var n, s;
                    return s = i.index - i.oldindex,
                    n = i.item.data("layer-id"),
                    e.map.raiseLayer(e.map.getLayer(n), s)
                }
            }(this))
        },
        _initReloadButton: function() {
            return this._renderReloadButton()
        },
        _registerEventHandlers: function() {
            return this.actionManager.events.on({
                hasActions: this._renderReloadButton,
                noActions: this._renderReloadButton,
                scope: this
            }),
            W.accelerators.events.on({
                reloadData: this._onReloadClick,
                scope: this
            })
        },
        _unregisterEventHandlers: function() {
            return this.actionManager.events.un({
                hasActions: this._renderReloadButton,
                noActions: this._renderReloadButton,
                scope: this
            }),
            W.accelerators.events.un({
                reloadData: this._onReloadClick,
                scope: this
            })
        },
        _renderReloadButton: function() {
            var e;
            return e = this._isReloadEnabled(),
            this.ui.reloadButton.toggleClass("reload-disabled", !e),
            e ? this.ui.reloadButton.tooltip("destroy") : this.ui.reloadButton.tooltip({
                title: I18n.t("layer_switcher.reload"),
                placement: "auto left"
            })
        },
        _isReloadEnabled: function() {
            return !this.actionManager.canUndo()
        },
        _onReloadClick: function() {
            var e, t, i, n;
            if (this._isReloadEnabled()) {
                for (i = this.map.roadLayers,
                e = 0,
                t = i.length; e < t; e++)
                    n = i[e],
                    n.redraw({
                        force: !0
                    }),
                    n.removeBackBuffer();
                return W.controller.reload()
            }
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r;
    n = i(155),
    s = n.extend({
        template: "Waze/Modules/Toolbar/templates/layer-switcher-checkbox",
        events: {
            "change input.toggle": "_toggleParking"
        },
        serializeData: function() {
            return {
                layer: {
                    id: _.uniqueId("parking"),
                    name: I18n.t("layers.name.landmarks_parking"),
                    visibility: this.layer.visibility && this.repo.isFilterBitSet(this.filter)
                }
            }
        },
        _toggleParking: function(e) {
            return this.repo.clear(),
            this.repo.toggleFilterBit(this.filter),
            W.controller.updateModel(!0),
            this.render()
        }
    }),
    r = Marionette.LayoutView.extend({
        template: "Waze/Modules/Toolbar/templates/layer-switcher-venues",
        tagName: "ul",
        className: "list-unstyled",
        regions: {
            layerControl: ".layer-control",
            parkingControl: ".parking-control"
        },
        onShow: function() {
            return this.layerControl.show(new n({
                model: this.model,
                filterName: "RESIDENTIAL",
                translations: I18n.t("layer_switcher.filters.residential")
            })),
            this.parkingControl.show(new s({
                model: this.model.clone().set({
                    disabled: !this.model.get("layer").visibility
                }),
                filterName: "PARKING"
            }))
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s, r;
    r = i(157),
    s = i(663),
    n = Marionette.CollectionView.extend({
        childView: r,
        itemGroupView: s,
        initialize: function(e) {
            return this.map = e.map
        },
        buildChildView: function(e) {
            var t, i;
            return i = {
                model: e,
                map: this.map
            },
            t = null != e.children,
            t ? new this.itemGroupView(i) : new this.childView(i)
        },
        enable: function() {
            return this.children.call("enable")
        },
        disable: function() {
            return this.children.call("disable")
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    s = i(157),
    n = Marionette.CompositeView.extend({
        template: "Waze/Modules/Toolbar/templates/toolbar-item-group",
        enabled: !0,
        className: function() {
            var e, t, i;
            return t = this.model.get("name"),
            e = this.model.get("displayClass"),
            i = this.enabled && this._hasEnabledChildren() ? this._hasActiveChildren() ? "ItemActive" : "ItemInactive" : "ItemDisabled",
            "toolbar-button " + e + " toolbar-submenu toolbar-group toolbar-group-" + t + " " + i
        },
        events: {
            mouseover: "_showMenu",
            mouseout: "_hideMenu"
        },
        childEvents: {
            controlTriggered: "_hideMenu"
        },
        childView: s,
        childViewContainer: "menu",
        collectionEvents: {
            "change:active": function(e, t) {
                return this.setClassName()
            }
        },
        onRender: function() {
            return this.setClassName()
        },
        setClassName: function() {
            return this.$el.attr({
                class: _.result(this, "className")
            })
        },
        _showMenu: function() {
            return this.$el.addClass("open")
        },
        _hideMenu: function() {
            return this.$el.removeClass("open")
        },
        _hasActiveChildren: function() {
            return this.model.children.some(function(e) {
                return e.get("control").active
            })
        },
        _hasEnabledChildren: function() {
            return this.model.children.some(function(e) {
                return e.get("control").enabled
            })
        },
        enable: function() {
            return this.children.call("enable"),
            this.enabled = !0,
            this.setClassName()
        },
        disable: function() {
            return this.children.call("disable"),
            this.enabled = !1,
            this.setClassName()
        },
        initialize: function(e) {
            return this.collection = this.model.children,
            this.map = e.map,
            this.childViewOptions = function(e) {
                return function(t, i) {
                    return {
                        parent: e.model,
                        map: e.map
                    }
                }
            }(this)
        },
        buildChildView: function(e, t, i) {
            var n, s;
            return s = _.extend({
                model: e
            }, i),
            new (n = e.get("childView") ? e.get("childView") : t)(s)
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o;
    s = i(665),
    o = i(667),
    r = i(666),
    n = Marionette.LayoutView.extend({
        MAIN_LIST_NUM_ITEMS: 3,
        template: "Waze/Modules/Topbar/templates/area-managers/layout",
        className: "area-managers",
        regions: {
            mainList: ".main-list-region",
            restList: ".rest-list-region"
        },
        initialize: function() {
            var e, t, i, n, a;
            for (this.managedAreasRepository = this.options.managedAreasRepository,
            this.managedAreasRepository.model.events.register("mergeend", this, this._updateCollections),
            this.mainCollection = new Backbone.Collection,
            this.restCollection = new Backbone.Collection,
            this.mainListView = new s({
                collection: this.mainCollection
            }),
            this.restListView = new o({
                collection: this.restCollection
            }),
            this.mapView = new r({
                pannable: this.options.pannable,
                managedAreasLayer: this.options.managedAreasLayer,
                drawingContext: this.options.drawingContext
            }),
            i = [this.mainListView, this.restListView],
            n = [],
            e = 0,
            t = i.length; e < t; e++)
                a = i[e],
                this.listenTo(a, "onAreaMouseEnter", function(e) {
                    return function(t) {
                        return e.mapView.highlightArea(t.attributes.externalModel)
                    }
                }(this)),
                this.listenTo(a, "onAreaMouseLeave", function(e) {
                    return function() {
                        return e.mapView.hideArea()
                    }
                }(this)),
                n.push(this.listenTo(a, "onAreaClicked", function(e) {
                    return function(t) {
                        return e.mapView.centerArea(t.attributes.externalModel)
                    }
                }(this)));
            return n
        },
        onDestroy: function() {
            return this.managedAreasRepository.model.events.unregister("mergeend", this, this._updateCollections)
        },
        onRender: function() {
            return this.mainList.show(this.mainListView),
            this.restList.show(this.restListView)
        },
        _updateCollections: function() {
            var e, t;
            return e = this.managedAreasRepository.getObjectArray().map(function(e) {
                return new Backbone.Model({
                    username: e.getUserName(),
                    externalModel: e
                })
            }),
            t = e.splice(this.MAIN_LIST_NUM_ITEMS),
            this.mainCollection.reset(e),
            this.restCollection.reset(t)
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    n = i(158),
    s = Marionette.CompositeView.extend({
        childView: n,
        childViewContainer: "ul",
        ui: {
            title: ".title"
        },
        template: "Waze/Modules/Topbar/templates/area-managers/main-list",
        initialize: function() {
            return this.on("childview:onAreaMouseEnter", function(e) {
                return function(t, i) {
                    return e.trigger("onAreaMouseEnter", i.model)
                }
            }(this)),
            this.on("childview:onAreaMouseLeave", function(e) {
                return function(t, i) {
                    return e.trigger("onAreaMouseLeave", i.model)
                }
            }(this)),
            this.on("childview:onAreaClicked", function(e) {
                return function(t, i) {
                    return e.trigger("onAreaClicked", i.model)
                }
            }(this)),
            this.listenTo(this.collection, "reset", this._toggleTitle)
        },
        _toggleTitle: function() {
            return this.ui.title.toggle(this.collection.length > 0)
        },
        onRender: function() {
            return this._toggleTitle()
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(166),
    s = Marionette.Controller.extend({
        _highlightedArea: null ,
        initialize: function() {
            return this.pannable = this.options.pannable,
            this.managedAreasLayer = this.options.managedAreasLayer,
            this.drawingContext = this.options.drawingContext,
            this.drawingContext.setStyleMap(n)
        },
        centerArea: function(e) {
            var t;
            return t = e.geometry.getBounds().getCenterLonLat(),
            this.pannable.panTo(t)
        },
        highlightArea: function(e) {
            var t, i;
            return i = this.managedAreasLayer.getVisibility(),
            i ? (this._highlightedArea = e,
            t = this.managedAreasLayer.getVector(e),
            null != t ? this.managedAreasLayer.drawFeature(t, "highlight") : void 0) : (t = new OL.Feature.Vector(e.geometry.clone()),
            t.model = e,
            this.drawingContext.addFeatures(t))
        },
        hideArea: function() {
            var e;
            if (this.drawingContext.removeAllFeatures(),
            null != this._highlightedArea)
                return e = this.managedAreasLayer.getVector(this._highlightedArea),
                null != e && this.managedAreasLayer.drawFeature(e, "default"),
                this._highlightedArea = null
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s;
    n = i(158),
    s = Marionette.CompositeView.extend({
        childView: n,
        className: "rest-list",
        childViewContainer: "ul",
        template: "Waze/Modules/Topbar/templates/area-managers/rest-list",
        initialize: function() {
            return this.on("childview:onAreaMouseEnter", function(e) {
                return function(t, i) {
                    return e.trigger("onAreaMouseEnter", i.model)
                }
            }(this)),
            this.on("childview:onAreaMouseLeave", function(e) {
                return function(t, i) {
                    return e.trigger("onAreaMouseLeave", i.model)
                }
            }(this)),
            this.on("childview:onAreaClicked", function(e) {
                return function(t, i) {
                    return e.trigger("onAreaClicked", i.model)
                }
            }(this)),
            this.collection.on("reset", this.render)
        },
        serializeData: function() {
            return {
                numItems: this.collection.length
            }
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o, a;
    s = i(159),
    r = i(302),
    n = i(664),
    a = i(669),
    o = Marionette.Controller.extend({
        initialize: function() {
            var e, t, i;
            return t = new s({
                globalVent: this.options.globalVent
            }),
            i = new r({
                dataModel: this.options.dataModel,
                map: this.options.map
            }),
            e = null ,
            W.Config.area_manager_widget.enable && (e = new n({
                managedAreasRepository: this.options.managedAreasRepository,
                managedAreasLayer: this.options.map.managedAreasLayer,
                pannable: this.options.map.getPannable(),
                drawingContext: this.options.map.getDrawingContext()
            })),
            this.layout = new a({
                loadingIndicatorView: t,
                locationInfoView: i,
                areaManagersLayout: e
            })
        },
        destroy: function() {}
    }),
    e.exports = o
}
, function(e, t) {
    var i;
    i = Marionette.LayoutView.extend({
        template: "Waze/Modules/Topbar/templates/layout",
        regions: {
            loadingIndicator: ".loading-indicator-region",
            locationInfo: ".location-info-region",
            areaManagers: ".area-managers-region"
        },
        onRender: function() {
            if (this.loadingIndicator.show(this.options.loadingIndicatorView),
            this.locationInfo.show(this.options.locationInfoView),
            null != this.options.areaManagersLayout)
                return this.areaManagers.show(this.options.areaManagersLayout)
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        template: "templates/venue/alias",
        tagName: "li",
        ui: {
            name: ".alias-name"
        },
        events: {
            "click .delete": "_onDeleteClicked",
            "change .alias-name": "_onNameChanged"
        },
        _onNameChanged: function() {
            return this.model.set("name", this.ui.name.val())
        },
        _onDeleteClicked: function() {
            return this.model.collection.remove(this.model)
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    n = i(82).Item,
    s = i(670),
    r = Marionette.CompositeView.extend({
        MAX_ALIASES: 4,
        template: "templates/venue/aliases-layout",
        childView: s,
        childViewContainer: ".list",
        events: {
            "click .add": "_onAddClicked"
        },
        ui: {
            addButton: ".add"
        },
        initialize: function() {
            return this.collection.on("add remove", this._toggleAddButton, this)
        },
        serializeData: function() {
            return {
                hideAddButton: this._shouldHideAddButton()
            }
        },
        _onAddClicked: function(e) {
            return "function" == typeof e.preventDefault && e.preventDefault(),
            this.collection.add(new n({
                name: ""
            }))
        },
        _shouldHideAddButton: function() {
            return this.collection.length >= this.MAX_ALIASES || !this.options.editable
        },
        _toggleAddButton: function() {
            return this.ui.addButton.toggleClass("hidden", this._shouldHideAddButton())
        }
    }),
    e.exports = r
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        template: "templates/archive-panel",
        serializeData: function() {
            return {
                fromAddress: this.model.fromLocation,
                toAddress: this.model.toLocation
            }
        },
        templateHelpers: {
            formatAddress: function(e) {
                var t;
                return t = [e.city, e.street],
                t = _.compact(t),
                t.join(", ")
            }
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o, a, l, u;
    u = i(12),
    o = i(124),
    n = i(123).ChatMessage,
    a = i(675),
    s = i(674),
    l = 13,
    r = OpenLayers.Class(u, {
        template: "chat",
        events: {
            "click .toggle": "toggleOpen",
            "click .minimize": "toggleOpen",
            "keypress .message-input": "_onMessageInputClicked",
            "click ul.visibility a": "_toggleVisibility",
            "click .header": "_onHeaderClicked",
            "click .chat-intro-tip .go-visible": "_onGoVisible",
            "click .chat-intro-tip .go-invisible": "_onGoInvisible",
            "click .chat-intro-tip .close": "_closeIntroTip",
            "click .unread-messages-notification": "_onUnreadMessagesNotificationClicked",
            "click .rooms a": "_onRoomClicked"
        },
        ui: {
            toggle: ".toggle",
            roomName: ".room-name",
            popup: "#chat",
            messages: ".message-list",
            users: ".user-list",
            rooms: ".rooms",
            messageInput: ".message-input",
            status: ".status",
            visibleButton: ".visibility-visible",
            invisibleButton: ".visibility-invisible",
            introTip: ".chat-intro-tip",
            unreadMessagesNotification: ".unread-messages-notification"
        },
        initialize: function(e) {
            u.prototype.initialize.apply(this, arguments),
            this.$el.attr({
                id: "chat-overlay"
            }).appendTo($(e.map.div)),
            this.$el.on("click mousedown dragstart", "input", function(e) {
                return e.stopPropagation()
            }),
            this.model = e.model,
            this.model.users.on("reset", this._onUsersReset, this),
            this.model.users.on("add", this._addUser, this),
            this.model.users.on("remove", this._onUserRemoved, this),
            this.model.on("change:open", this._onOpenChanged, this),
            this.model.on("change:active", this._onActiveChanged, this),
            this.model.on("change:visible", this._updateStatus, this),
            this.model.on("change:roomName", function(e) {
                return function() {
                    return e.ui.roomName.text(e.model.get("roomName") || I18n.t("chat.connecting")),
                    e.$el.toggleClass("connected", null != e.model.get("roomName")),
                    e._resetRooms()
                }
            }(this)),
            this.model.messages.on("add", this._addMessage, this),
            this.model.messages.on("reset", this._resetMessages, this),
            this.model.messages.on("beforeMessageUpdated", function(e) {
                return function() {
                    return e._wasScrolledToBottom = e._isScrolledToBottomMessage()
                }
            }(this)),
            this.model.messages.on("messageUpdated", function(e) {
                return function(t) {
                    if (!t.isSystem())
                        return e._afterContentAdded(e._wasScrolledToBottom)
                }
            }(this)),
            this.model.rooms.on("reset", this._resetRooms, this),
            this.model.rooms.on("add", this._resetRooms, this),
            this.userPresenters = {},
            this.render(),
            this.ui.messages.on("scroll", function(e) {
                return function() {
                    return e._hideUnreadMessagesNotification()
                }
            }(this)),
            this._updateStatus(),
            this._onOpenChanged(),
            W.accelerators.events.on({
                toggleChat: this.toggleOpen,
                scope: this
            })
        },
        _onGoVisible: function(e) {
            return "function" == typeof e.preventDefault && e.preventDefault(),
            this.model.set({
                visible: !0,
                open: !0
            })
        },
        _onGoInvisible: function(e) {
            return "function" == typeof e.preventDefault && e.preventDefault(),
            this.model.set({
                visible: !1,
                open: !0
            })
        },
        _closeIntroTip: function() {
            return this.ui.introTip.hide()
        },
        _onHeaderClicked: function(e) {
            if ($(e.target).hasClass("header"))
                return this.toggleOpen()
        },
        _onUsersReset: function() {
            var e, t, i, n, s;
            for (this.ui.users.empty(),
            i = this.model.users.models,
            n = [],
            e = 0,
            t = i.length; e < t; e++)
                s = i[e],
                n.push(this._addUser(s));
            return n
        },
        _addUser: function(e) {
            var t, i, n;
            return n = new a({
                model: e,
                map: this.map,
                marx: this.marx,
                currentUser: this.model.get("currentUser")
            }),
            n.render(),
            this.userPresenters[e.get("id")] = n,
            i = this.model.users.models.indexOf(e),
            t = this.ui.users.children().eq(i),
            t.length ? n.$el.insertBefore(t) : n.$el.appendTo(this.ui.users)
        },
        _onUserRemoved: function(e) {
            var t, i;
            return t = e.item.get("id"),
            i = ".user[data-id='" + t + "']",
            this.ui.users.find(i).remove(),
            delete this.userPresenters[t]
        },
        _onOpenChanged: function() {
            var e;
            if (e = this.model.get("open") === !0,
            this.$el.toggleClass("open", e),
            e)
                return this._closeIntroTip(),
                this._scrollToBottomMessage(),
                this._hideUnreadMessagesNotification()
        },
        _onActiveChanged: function() {
            var e;
            return e = this.model.get("active"),
            this.$el.toggle(e),
            this.ui.toggle.toggle(e)
        },
        _onRoomClicked: function(e) {
            var t;
            return e.preventDefault(),
            t = $(e.target).data("room"),
            this.model.set("room", t)
        },
        _updateStatus: function() {
            var e;
            return e = this.model.get("visible"),
            this.ui.status.text(this._getStatusText()),
            this.ui.visibleButton.toggleClass("checked", e),
            this.ui.invisibleButton.toggleClass("checked", !e),
            this.$el.toggleClass("visible-true", e),
            this.$el.toggleClass("visible-false", !e)
        },
        toggleOpen: function() {
            var e;
            return this._closeIntroTip(),
            e = this.model.get("open"),
            e || W.Report.chatAction("chat_open"),
            this.model.set("open", !e)
        },
        _toggleVisibility: function(e) {
            return null != e && e.preventDefault(),
            this.model.set("visible", !this.model.get("visible"))
        },
        _onMessageInputClicked: function(e) {
            var t;
            if (e.keyCode === l)
                return t = $.trim(this.ui.messageInput.val()),
                null != this.model.get("room") && "" !== t && (this.model.sendMessage(t),
                this.ui.messageInput.val("")),
                !1
        },
        _addMessage: function(e) {
            var t, i;
            if (t = new s({
                model: e
            }),
            t.render(),
            i = this._isScrolledToBottomMessage(),
            this.ui.messages.append(t.$el),
            !e.isSystem())
                return this._afterContentAdded(i)
        },
        _afterContentAdded: function(e) {
            if (e ? this._scrollToBottomMessage() : this._showUnreadMessagesNotification(),
            !this.model.get("open"))
                return this.$el.addClass("has-unread-messages")
        },
        _showUnreadMessagesNotification: function() {
            return this._unreadMessagesCount || (this._unreadMessagesCount = 0),
            this._unreadMessagesCount++,
            this.ui.unreadMessagesNotification.text(I18n.t("chat.unread", {
                count: this._unreadMessagesCount
            })).show()
        },
        _onUnreadMessagesNotificationClicked: function(e) {
            return "function" == typeof e.preventDefault && e.preventDefault(),
            this._scrollToBottomMessage(),
            this._hideUnreadMessagesNotification()
        },
        _hideUnreadMessagesNotification: function() {
            return this._unreadMessagesCount = 0,
            this.ui.unreadMessagesNotification.hide(),
            this.$el.removeClass("has-unread-messages")
        },
        _isScrolledToBottomMessage: function() {
            var e;
            return e = this.ui.messages,
            e.scrollTop() + e.outerHeight() >= e[0].scrollHeight
        },
        _scrollToBottomMessage: function() {
            return this.ui.messages.scrollTop(this.ui.messages[0].scrollHeight)
        },
        _resetMessages: function(e) {
            var t, i, n, s, r;
            for (this.ui.messages.empty(),
            s = this.model.messages.models,
            r = [],
            t = 0,
            i = s.length; t < i; t++)
                n = s[t],
                r.push(this._addMessage(n));
            return r
        },
        _resetRooms: function(e) {
            var t, i, n, s, r;
            for (this.ui.rooms.empty(),
            n = this.model.rooms.models,
            s = [],
            t = 0,
            i = n.length; t < i; t++)
                r = n[t],
                s.push(this._addRoom(r));
            return s
        },
        _addRoom: function(e) {
            var t, i;
            return t = this.model.get("room"),
            i = this._createRoomMenuItem(e),
            e.equals(t) && i.addClass("checked"),
            i.appendTo(this.ui.rooms),
            this.$el.toggleClass("multiple-rooms", this.model.rooms.models.length > 1)
        },
        _createRoomMenuItem: function(e) {
            var t, i, n;
            return n = e.getName(),
            i = $("<li>"),
            t = $("<a>").attr({
                href: "#"
            }).text(n).data({
                room: e
            }).appendTo(i),
            i
        },
        serialize: function() {
            var e;
            return e = this.model.toJSON(),
            e.status = this._getStatusText(),
            e
        },
        _getStatusText: function() {
            return this.model.get("visible") ? I18n.t("chat.visible") : I18n.t("chat.invisible")
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    s = i(12),
    n = OpenLayers.Class(s, {
        template: "chat_message",
        ui: {
            body: ".body"
        },
        initialize: function() {
            return s.prototype.initialize.apply(this, arguments),
            this.model.on("change:body", $.proxy(this.render, this)),
            this
        },
        onRender: function() {
            return this.$el.addClass("message " + this.model.getType() + "-message"),
            this.$el.find(".body div").autoRTL()
        },
        serialize: function() {
            return {
                message: this.model.toJSON()
            }
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    s = i(12),
    n = OpenLayers.Class(s, {
        tagName: "li",
        template: "chat_user",
        events: {
            "click .user": "_onClick"
        },
        serialize: function() {
            return {
                user: this.model.toJSON(),
                className: this._isCurrentUser() ? "current-user" : ""
            }
        },
        _isCurrentUser: function() {
            return this.model.get("id").toString() === this.currentUser.get("id").toString()
        },
        _onClick: function(e) {
            var t;
            return e.preventDefault(),
            t = this._transformFromMarx(this.model.getCenter()),
            this.map.setCenter(t),
            W.Report.chatAction("chat_user_clicked")
        },
        _transformFromMarx: function(e) {
            return e.transform(this.marx.displayProjection, this.map.getProjectionObject())
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        AUTO_COMPLETE: {
            MIN_INPUT_LENGHT: 3,
            FETCH_DELAY_MS: 250
        },
        template: "templates/venue/external-provider/item",
        tagName: "li",
        events: {
            "click .delete": "_onDeleteClicked",
            "change .uuid": "_onUuidChanged"
        },
        ui: {
            uuid: ".uuid",
            placeId: ".placeId"
        },
        _onDeleteClicked: function() {
            return this.model.collection.remove(this.model)
        },
        onRender: function() {
            return this._initAutoComplete()
        },
        _onUuidChanged: function(e) {
            return this.model.set({
                uuid: this.ui.uuid.val(),
                name: null
            }),
            this.ui.placeId.text(this.model.get("uuid")),
            e.stopPropagation()
        },
        _initAutoComplete: function() {
            return this.ui.uuid.select2({
                minimumInputLength: this.AUTO_COMPLETE.MIN_INPUT_LENGHT,
                initSelection: this._getInitialSelection.bind(this),
                ajax: {
                    url: W.Config.places_api.url.autocomplete,
                    data: function(e, t) {
                        return {
                            input: e,
                            key: W.Config.places_api.key
                        }
                    },
                    dataType: "json",
                    quietMillis: this.AUTO_COMPLETE.FETCH_DELAY_MS,
                    results: this._parseAutoCompleteResults
                }
            })
        },
        _parseAutoCompleteResults: function(e) {
            return {
                results: e.predictions.map(function(e) {
                    return {
                        id: e.place_id,
                        text: e.description
                    }
                })
            }
        },
        _getInitialSelection: function(e, t) {
            return $.when(this.model.getName()).done(function(e) {
                return function(i) {
                    return t({
                        id: e.model.get("uuid"),
                        text: i
                    })
                }
            }(this))
        },
        serializeData: function() {
            return {
                uuid: this.model.get("uuid")
            }
        },
        onDestroy: function() {
            return this.ui.uuid.select2("close")
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r, o;
    s = i(676),
    o = i(678),
    n = i(128),
    r = Marionette.CompositeView.extend({
        template: "templates/venue/external-provider/list",
        childView: s,
        childViewContainer: ".list",
        events: {
            "click .add": "_onAddClicked"
        },
        bindings: {
            ".add": {
                observe: "showAddButton",
                visible: !0
            }
        },
        initialize: function() {
            var e;
            this.venue = this.options.venue,
            e = this.venue.attributes.externalProviderIDs.map(function(e) {
                return e.clone()
            }),
            this.collection = new Backbone.Collection(e),
            this.viewModel = new o(null ,{
                collection: this.collection
            }),
            this.listenTo(this.collection, "remove change:uuid", this._onCollectionChanged)
        },
        _onCollectionChanged: function() {
            var e;
            return e = this.collection.models.filter(function(e) {
                return e.get("uuid").length
            }),
            this.trigger("change", e)
        },
        onRender: function() {
            return this.stickit(this.viewModel)
        },
        _onAddClicked: function(e) {
            return "function" == typeof e.preventDefault && e.preventDefault(),
            this.collection.add(new n({
                uuid: ""
            }))
        }
    }),
    e.exports = r
}
, function(e, t) {
    var i;
    i = Backbone.Model.extend({
        MAX_ITEMS: 4,
        defaults: {
            showAddButton: !0
        },
        initialize: function(e, t) {
            this.collection = t.collection,
            this.listenTo(this.collection, "add remove", this._onCollectionChanged),
            this.set({
                showAddButton: this._shouldShowAddButton()
            })
        },
        _onCollectionChanged: function() {
            return this.set({
                showAddButton: this._shouldShowAddButton()
            })
        },
        _shouldShowAddButton: function() {
            return this.collection.length < this.MAX_ITEMS
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    s = i(684),
    r = i(9),
    n = OL.Class(s, {
        loadingAnimation: null ,
        toolbar: null ,
        disabled: !1,
        template: "house-numbers-lightbox",
        events: {
            "click .add": "addClicked",
            "click .undo": "undoClicked",
            "click .redo": "redoClicked",
            "click .save": "saveClicked",
            "click .cancel": "cancelClicked",
            "click .continue-editing": "onContinueEditingClicked",
            "click .force-invalid": "onForceInvalidClicked"
        },
        initialize: function(e) {
            s.prototype.initialize.apply(this, arguments)
        },
        render: function() {
            var e;
            if (s.prototype.render.apply(this, arguments),
            this.toolbar = this.$el.find(".toolbar"),
            this.loadingAnimation = this.$el.find(".loading-animation"),
            this.zoomMessage = this.$el.find(".zoom-message"),
            this.lastEditedUsername = this.$el.find(".last-edited"),
            (null != (e = this.pm.selectedNumber) ? e.model.updatedBy : void 0) || this.lastEditedUsername.hide(),
            this.pm.showingForceDialog)
                return this.showForceMessage()
        },
        registerEvents: function() {
            return this.model.actionManager.events.on({
                afteraction: this.render,
                afterundoaction: this.render,
                afterclearactions: this.render,
                scope: this
            }),
            W.accelerators.events.register("editHouseNumbers", this, this.editHouseNumbersShortcutClicked),
            W.accelerators.events.register("save", this, this.saveClicked),
            $(document).on("keyup.house-numbers-lightbox", function(e) {
                return function(t) {
                    if (27 === t.which)
                        return e.confirmClose()
                }
            }(this))
        },
        unregisterEvents: function() {
            return this.model.actionManager.events.un({
                afteraction: this.render,
                afterundoaction: this.render,
                afterclearactions: this.render,
                scope: this
            }),
            W.accelerators.events.unregister("editHouseNumbers", this, this.editHouseNumbersShortcutClicked),
            W.accelerators.events.unregister("save", this, this.saveClicked),
            $(document).off("keyup.house-numbers-lightbox")
        },
        show: function() {
            return s.prototype.show.apply(this, arguments),
            this.render(),
            this.registerEvents()
        },
        undoClicked: function() {
            return this.model.actionManager.undo()
        },
        redoClicked: function() {
            return this.model.actionManager.redo()
        },
        saveClicked: function() {
            return this.onSave()
        },
        addClicked: function() {
            return this.onAdd()
        },
        cancelClicked: function() {
            return this.confirmClose()
        },
        onClickout: function() {
            return this.confirmClose()
        },
        editHouseNumbersShortcutClicked: function(e) {
            return this.onAdd()
        },
        confirmClose: function() {
            var e;
            if (e = !0,
            this.model.actionManager.canSave() && (e = window.confirm(I18n.t("edit.unsaved_changes"))),
            e)
                return this.close()
        },
        close: function() {
            return this.unregisterEvents(),
            s.prototype.close.apply(this, arguments)
        },
        onSave: function() {},
        onAdd: function() {},
        setLoading: function(e) {
            return this.toolbar.toggle(!e),
            this.loadingAnimation.toggle(e)
        },
        showSuccessMessage: function() {
            var e;
            return e = this.$el.find(".success-message"),
            e.fadeIn().delay(3e3).fadeOut()
        },
        showErrorMessage: function() {
            var e;
            return e = this.$el.find(".error-message"),
            e.show()
        },
        showSaveErrorMessage: function() {
            var e;
            return e = this.$el.find(".save-error-message"),
            e.show()
        },
        showForceMessage: function() {
            var e;
            return e = this.$el.find(".force-message"),
            e.show()
        },
        setLastEditedUser: function(e) {
            return e ? (this.lastEditedUsername.show(),
            this.lastEditedUsername.find(".username").text(r.formatUserName(e))) : this.lastEditedUsername.hide()
        },
        disable: function() {
            return this.disabled = !0,
            this.render()
        },
        enable: function() {
            return this.disabled = !1,
            this.render()
        },
        serialize: function() {
            return this
        },
        onForceInvalidClicked: function() {
            return this.pm.forceInvalid()
        },
        onContinueEditingClicked: function() {
            return this.pm.continueEditing()
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        events: {
            "click .change-language": "_onChangeLanguageClicked"
        },
        initialize: function() {
            return this.delegateEvents(),
            $(".dropdown-toggle").removeClass("not-shown")
        },
        _onChangeLanguageClicked: function(e) {
            var t;
            return e.preventDefault(),
            t = $(e.target).data("locale"),
            W.location.setLocale(t),
            W.location.redirectToLocale()
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    r = i(12),
    n = i(537),
    s = OpenLayers.Class(r, {
        initialize: function(e) {
            return r.prototype.initialize.apply(this, arguments),
            this.map = e.map,
            this.model = e.model,
            this.model.users.on("add", this._addUser, this),
            this.model.users.on("remove", this._onRemoveUser, this),
            this.layer = new OL.Layer.Markers(I18n.t("layers.name.live_users"),{
                shortcutKey: "S+v",
                accelerator: "toggleLiveUsers",
                uniqueName: "live_users",
                className: "live-users"
            }),
            this.model.on("change:showLayer", function(e) {
                return function() {
                    if (e.model.get("showLayer"))
                        return e.map.addLayer(e.layer)
                }
            }(this)),
            this._markersByUserId = {},
            this
        },
        _addUser: function(e) {
            var t;
            return t = new n(e,this.map,this.layer),
            this._markersByUserId[e.get("id")] = t,
            this.layer.addMarker(t),
            t.render()
        },
        _onRemoveUser: function(e) {
            var t, i;
            return i = e.item,
            t = i.get("id"),
            this._removeMarker(t)
        },
        _removeMarker: function(e) {
            var t;
            return t = this._markersByUserId[e],
            t.destroy(),
            this.layer.removeMarker(t),
            delete this._markersByUserId[e]
        },
        centerUser: function(e) {
            var t;
            return null != (t = this._markersByUserId[e]) ? t.center() : void 0
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r;
    r = i(12),
    n = i(10),
    s = OL.Class(r, {
        template: "location-message",
        events: {
            "click a": "onLocationLinkClicked",
            "click .close": "onCloseClicked"
        },
        initialize: function(e) {
            return r.prototype.initialize.apply(this, arguments),
            this.model.restrictedAreas.on(n.UPDATED, this.onRestrictedAreasChanged, this),
            this.onRestrictedAreasChanged()
        },
        onRestrictedAreasChanged: function() {
            var e;
            return e = this.model.restrictedAreas.getInvalidEnvs(),
            e = _.filter(e, function(e) {
                return e.attributes.env !== W.location.code
            }),
            e.length > 0 ? (this.otherEnv = e[0].attributes.env,
            this.render(),
            this.show()) : this.hide()
        },
        serialize: function() {
            return {
                model: this.model,
                view: this
            }
        },
        onLocationLinkClicked: function(e) {
            var t;
            return e.preventDefault(),
            t = $(e.target).data("env"),
            W.map.mapState.updateMapLocation(t),
            W.location.changeAndRemovePermalink(t)
        },
        hide: function() {
            return r.prototype.hide.apply(this, arguments)
        },
        onCloseClicked: function() {
            return this.hide(),
            this.model.restrictedAreas.off(n.UPDATED, this.onRestrictedAreasChanged, this)
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        template: "templates/location-switcher",
        events: {
            "change select": "onLocationChanged"
        },
        onLocationChanged: function(e) {
            var t;
            if (t = $(e.target).val())
                return this.changeLocation(t)
        },
        changeLocation: function(e) {
            return W.location.changeAndRemovePermalink(e)
        },
        templateHelpers: {
            isCurrentEnv: function(e) {
                return W.location.code === e
            }
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s;
    s = i(12),
    n = OL.Class(s, {
        olEvents: null ,
        shown: !1,
        initialize: function(e) {
            this.$el = $("#map-lightbox .content"),
            s.prototype.initialize.apply(this, arguments),
            this.olEvents = new OL.Events(this),
            $("#map-lightbox .overlay").on("click", function(e) {
                return function() {
                    return e.onClickout()
                }
            }(this))
        },
        onClose: function(e) {
            return e && e.preventDefault(),
            this.close()
        },
        onClickout: function() {
            return this.close()
        },
        close: function() {
            return this.shown = !1,
            $("#map-lightbox").hide(),
            this.olEvents.triggerEvent("closed")
        },
        render: function() {
            return s.prototype.render.apply(this, arguments),
            $("#map-lightbox").show(),
            this.shown = !0
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    n = i(132).OpeningHour,
    s = Marionette.ItemView.extend({
        template: "templates/opening_hours/add",
        ui: {
            form: "form",
            timeSelectors: ".time-selector",
            fromTime: "input[name=fromTime]",
            toTime: "input[name=toTime]",
            dayCheckboxes: "input[name=days]",
            validationErrors: ".validation-errors"
        },
        events: {
            submit: "onSubmit",
            "click .select-all": "selectAllDays",
            "click .select-none": "deselectAllDays",
            "change input[name=allDay]": "onTimeToggled"
        },
        HOUR_FORMAT: "H:mm",
        selectAllDays: function(e) {
            return e.preventDefault(),
            this.toggleDayCheckboxes(!0)
        },
        deselectAllDays: function(e) {
            return e.preventDefault(),
            this.toggleDayCheckboxes(!1)
        },
        onTimeToggled: function() {
            return this.toggleTimeSelectors(!this.isAllDaySelected())
        },
        isAllDaySelected: function() {
            return "on" === this.$("input[name=allDay]:checked").val()
        },
        toggleTimeSelectors: function(e) {
            return this.ui.timeSelectors.prop({
                disabled: !e,
                required: e
            })
        },
        toggleDayCheckboxes: function(e) {
            return this.ui.dayCheckboxes.prop("checked", e)
        },
        onRender: function() {
            return this.ui.timeSelectors.timepicker({
                showMeridian: !1
            })
        },
        onDestroy: function() {
            return this.$el.remove(),
            this.ui.timeSelectors.timepicker("remove")
        },
        serializeData: function() {
            var e;
            return e = n.prototype.defaults(),
            {
                dayCallback: this.isDayCheckedByDefault,
                defaultFromTime: e.fromHour,
                defaultToTime: e.toHour
            }
        },
        isDayCheckedByDefault: function(e) {
            return n.prototype.defaultDays.contains(e)
        },
        onSubmit: function(e) {
            var t, i, s, r;
            if (e.preventDefault(),
            i = this.ui.fromTime.val(),
            r = this.ui.toTime.val(),
            t = this.readDays(),
            this._clearValidationErrors(),
            this._vaildate(i, r, t))
                return s = new n({
                    days: t,
                    fromHour: i,
                    toHour: r
                }),
                this.isAllDaySelected() && s.setAllDay(),
                this.collection.add(s),
                this.destroy()
        },
        _vaildate: function(e, t, i) {
            var n, s;
            return s = [],
            0 === i.length && s.push(I18n.t("edit.landmark.opening_hours.errors.days")),
            e = Date.parseExact(e, this.HOUR_FORMAT),
            t = Date.parseExact(t, this.HOUR_FORMAT),
            this.isAllDaySelected() || (null === e && s.push(I18n.t("edit.landmark.opening_hours.errors.fromHour")),
            null === t && s.push(I18n.t("edit.landmark.opening_hours.errors.toHour")),
            +e === +t && s.push(I18n.t("edit.landmark.opening_hours.errors.same"))),
            s.length > 0 && (n = s.map(function(e) {
                return $("<div/>").text(e)
            }),
            this.ui.validationErrors.append(n)),
            0 === s.length
        },
        _clearValidationErrors: function() {
            return this.ui.validationErrors.empty()
        },
        readDays: function() {
            return this.ui.form.find("input[name=days]:checked").toArray().map(function(e) {
                return parseInt($(e).val(), 10)
            })
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        tagName: "li",
        template: "templates/opening_hours/item",
        events: {
            "click .delete": "onDelete"
        },
        serializeData: function() {
            return {
                model: this.model,
                isEditable: this.options.editable
            }
        },
        onDelete: function() {
            return this.model.collection.remove(this.model)
        }
    }),
    e.exports = i
}
, function(e, t, i) {
    var n, s, r;
    s = i(686),
    n = i(685),
    r = Marionette.CompositeView.extend({
        template: "templates/opening_hours/layout",
        childView: s,
        childViewContainer: ".list",
        events: {
            "click .add": "onAddClicked"
        },
        childViewOptions: function() {
            return {
                editable: this.options.editable
            }
        },
        onAddClicked: function(e) {
            return e.preventDefault(),
            this.showAddDialog()
        },
        showAddDialog: function() {
            var e;
            return e = new n({
                collection: this.collection
            }),
            W.app.layout.dialogRegion.show(e)
        },
        serializeData: function() {
            return {
                isEditable: this.options.editable
            }
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    s = i(693),
    n = Marionette.Controller.extend({
        _nextVenue: null ,
        initialize: function(e) {
            return this.venue = e.venue,
            this.pannable = e.pannable,
            this.dataModel = this.venue.model,
            this._generateIterator(),
            this.dataModel.events.register("mergeend", this, this._onVenuesChanged)
        },
        _generateIterator: function() {
            return this.iterator = new this.options.venueIterator
        },
        show: function() {
            var e;
            return this._getNextVenue(),
            e = new s({
                model: this.venue,
                nextVenue: this._nextVenue,
                updateRequests: this.options.updateRequests,
                showNext: this.options.showNext,
                showDebug: this.options.showDebug,
                nextButtonString: this.options.nextButtonString,
                nextButtonClass: this.options.nextButtonClass
            }),
            e.on("showNextVenueClicked", this._onNextVenueClicked.bind(this)),
            e.on("nextClicked", this._onNextClicked.bind(this)),
            e.on("destroy", this._close, this),
            e.on("focusClicked", function(e) {
                return function() {
                    return e._focusVenue(W.Config.place_updates.focusZoom)
                }
            }(this)),
            W.map.panelRegion.show(e),
            this._focusVenue(),
            this.trigger("show", this.venue)
        },
        _onVenuesChanged: function() {
            return this._generateIterator(),
            this._getNextVenue()
        },
        _onNextVenueClicked: function() {
            return this.venue = this._nextVenue,
            this.show()
        },
        _onNextClicked: function() {
            return this.trigger("nextClicked")
        },
        _close: function() {
            return this.dataModel.events.unregister("mergeend", this, this._onVenuesChanged),
            this.trigger("close")
        },
        _getNextVenue: function() {
            if (this._nextVenue = this.iterator.getNext(),
            null !== this._nextVenue && this._nextVenue.getID() === this.venue.getID())
                return this._nextVenue = this.iterator.getNext()
        },
        _focusVenue: function(e) {
            return null == e && (e = this.pannable.getZoom()),
            this.pannable.panTo(this.venue.geometry.getBounds().getCenterLonLat(), e)
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a, l;
    s = i(160),
    r = i(50),
    o = i(9),
    l = function(e, t) {
        var i, n;
        return null != (i = t.attributes.categoryAttributes) && null != (n = i.PARKING_LOT) ? n[e] : void 0
    }
    ,
    a = function(e, t) {
        var i;
        return i = l(e, t),
        null !== i && void 0 !== i ? _.isArray(i) ? i.map(function(t) {
            return I18n.t("edit.landmark.parking.types." + e + "." + t)
        }) : I18n.t("edit.landmark.parking.types." + e + "." + i) : null
    }
    ,
    n = s.extend({
        template: "templates/place_updates/changed_field_parking_lot",
        _getValue: function(e) {
            var t;
            return t = this.model.get("fieldName"),
            this.valueGetters[t] ? this.valueGetters[t](e) : l(t, e)
        },
        valueGetters: {
            canExitWhileClosed: function(e) {
                return o.formatYesNo(l("canExitWhileClosed", e))
            },
            estimatedNumberOfSpots: function(e) {
                return a("estimatedNumberOfSpots", e)
            },
            costType: function(e) {
                return a("costType", e)
            },
            lotType: function(e) {
                return a("lotType", e)
            },
            paymentType: function(e) {
                return a("paymentType", e)
            }
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o, a;
    n = i(84),
    s = i(133),
    o = i(160),
    a = i(689),
    r = Marionette.CollectionView.extend({
        getChildView: function(e) {
            return e instanceof s ? a : o
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    s = i(162),
    n = s.extend({
        template: "templates/place_updates/flag",
        APPROVE_ACTION_NAMES: {
            default: I18n.t("venues.update_requests.panel.action.solved"),
            DUPLICATE: I18n.t("venues.update_requests.panel.action.merge"),
            CLOSED: I18n.t("venues.update_requests.panel.action.delete")
        },
        APPROVE_ACTION_INTENT: {
            CLOSED: "danger"
        },
        COMMENT_TYPES: {
            WRONG_DETAILS: !0,
            CLOSED: !0,
            INAPPROPRIATE: !0
        },
        serializeData: function() {
            var e, t;
            return t = this.model.isImage(),
            e = t ? this.model.getImage() : null ,
            {
                model: this.model,
                venue: this.options.venue,
                showImage: t,
                image: e,
                showAddingUser: t,
                showComment: this.COMMENT_TYPES[this.model.get("type")],
                showDuplicateVenue: this.model.get("type") === this.model.TYPE.DUPLICATE,
                showDebug: this.options.showDebug
            }
        },
        templateHelpers: _({}).extend(s.prototype.templateHelpers, {
            getTitle: function() {
                return I18n.t("venues.update_requests.panel.flag_title." + this.model.get("subject"))
            },
            getApproveActionName: function() {
                var e, t;
                return this.model.isVenue() ? (t = n.prototype.APPROVE_ACTION_NAMES,
                e = t[this.model.get("type")],
                e || t.default) : I18n.t("venues.update_requests.panel.action.delete_picture")
            },
            getApproveActionIntent: function() {
                var e;
                return this.model.isImage() ? "danger" : (e = n.prototype.APPROVE_ACTION_INTENT,
                e[this.model.get("type")] || "default")
            },
            getRejectActionName: function() {
                return I18n.t("venues.update_requests.panel.action.reject_flag")
            }
        })
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s;
    s = i(12),
    n = OL.Class(s, {
        events: {
            "click .place-update": "_onMarkerClicked"
        },
        _onMarkerClicked: function(e) {
            var t;
            if (this.mediator.get("editingEnabled"))
                return t = $(e.target).data("model"),
                W.commands.execute("place_updates:list", t)
        },
        _findMarkerByVenueId: function(e) {
            return this.$el.find("[data-id='" + e + "']")
        },
        highlightMarker: function(e) {
            var t;
            return this.$el.addClass("highlight-selected"),
            t = this._findMarkerByVenueId(e.getID()),
            t.addClass("selected"),
            this._moveToTop(t)
        },
        _moveToTop: function(e) {
            return e.detach().appendTo(this.$el)
        },
        unhighlightAllMarkers: function() {
            return this.$el.removeClass("highlight-selected"),
            this.$el.find(".place-update").removeClass("selected")
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s, r, o;
    o = i(162),
    s = i(691),
    n = i(10),
    r = Marionette.LayoutView.extend({
        template: "templates/place_updates/layout",
        regions: {
            placeUpdate: ".place-update"
        },
        events: {
            "click .next": "_onNextClicked"
        },
        triggers: {
            "click .next-venue": "showNextVenueClicked"
        },
        ui: {
            navigation: ".navigation"
        },
        className: "place-update-edit",
        currentIndex: 0,
        dataModel: null ,
        maxHeight: null ,
        initialize: function() {
            return this.dataModel = this.model.model,
            this._setUpdateRequests(),
            this.listenTo(this.dataModel.venues, n.CHANGED, this._onVenuesChanged),
            this.listenTo(this.dataModel.venues, n.REMOVED, this._onVenuesDeleted),
            this.model.setSelected(!0)
        },
        _setUpdateRequests: function() {
            if (this.updateRequests = this.options.updateRequests,
            null == this.updateRequests)
                return this.updateRequests = _(this.model.attributes.venueUpdateRequests).sortBy(function(e) {
                    return e.get("dateAdded")
                })
        },
        _onVenuesChanged: function(e) {
            var t;
            if (t = e.some(function(e) {
                return function(t) {
                    return t.getID() === e.model.getID() && t.isDeleted()
                }
            }(this)))
                return this.destroy()
        },
        _onVenuesDeleted: function(e) {
            var t;
            if (t = e.some(function(e) {
                return function(t) {
                    return t.getID() === e.model.getID()
                }
            }(this)))
                return this.destroy()
        },
        onDestroy: function() {
            return this.model.setSelected(!1)
        },
        serializeData: function() {
            var e;
            return e = this._hasMoreUpdates(),
            {
                showNextButton: e || this.options.showNext || !1,
                showNextVenueButton: !e && null !== this.options.nextVenue,
                showNextIssueButton: this.options.showNextIssueButton,
                nextButtonString: this.options.nextButtonString || I18n.t("venues.update_requests.panel.next"),
                nextButtonClass: this.options.nextButtonClass
            }
        },
        onRender: function() {
            return this._showCurrentUpdateView(),
            this._setHeight()
        },
        _showCurrentUpdateView: function() {
            var e, t, i;
            return i = this.updateRequests[this.currentIndex],
            e = o,
            "flag" === i.get("updateType") && (e = s),
            t = new e({
                model: i,
                venue: this.model,
                showDebug: this.options.showDebug
            }),
            this.listenTo(t, "focusClicked", function(e) {
                return function() {
                    return e.trigger("focusClicked")
                }
            }(this)),
            this.placeUpdate.show(t)
        },
        _hasMoreUpdates: function() {
            return this.currentIndex < this.updateRequests.length - 1
        },
        _onNextClicked: function() {
            return this._hasMoreUpdates() && (this.currentIndex++,
            this.render()),
            this.trigger("nextClicked")
        },
        setMaxHeight: function(e) {
            return this.maxHeight = e,
            this._setHeight()
        },
        _setHeight: function() {
            return this.$el.css({
                maxHeight: this.maxHeight
            }),
            this.placeUpdate.currentView.setMaxHeight(this.maxHeight - this.ui.navigation.outerHeight())
        }
    }),
    e.exports = r
}
, function(e, t, i) {
    var n, s;
    n = i(683),
    s = Backbone.Marionette.LayoutView.extend({
        template: "templates/prefs-panel",
        regions: {
            envSelectRegion: "#env-select"
        },
        events: {
            "change .language-select": "_onLanguageChange"
        },
        bindings: {
            "input[name=twoWayRoad]": "twoWaySegmentsByDefault",
            "input[name=turnsAllowed]": "enableTurnsByDefault",
            "input[name=requireDeselect]": "requireFeatureDeselect",
            "input[name=units-radio]": "isImperial"
        },
        onRender: function() {
            return this.stickit()
        },
        onShow: function() {
            return this.envSelectRegion.show(new n)
        },
        _onLanguageChange: function(e) {
            var t;
            return t = $(e.target).val(),
            W.location.setLocale(t),
            W.location.redirectToLocale()
        }
    }),
    e.exports = s
}
, function(e, t, i) {
    var n, s, r, o;
    n = i(60),
    s = i(12),
    r = i(58),
    o = OL.Class(s, {
        template: "restriction/edit",
        events: {
            "click .cancel": "onCancelClicked",
            "submit form": "onSubmit",
            "change input[name=allDay]": "onTimeToggled",
            "change input[name=permanent]": "onDateToggled",
            "click .select-all": "onSelectAllClicked",
            "click .select-none": "onSelectNoneClicked",
            "click .toggle-vehicles": "onToggleVehiclesClicked"
        },
        model: null ,
        dateRangePicker: null ,
        dateRangeFormat: I18n.t("restrictions.dateRangeFormat"),
        initialize: function(e) {
            s.prototype.initialize.apply(this, arguments)
        },
        render: function() {
            return this.cleanupDateRangePicker(),
            this.cleanupTimePicker(),
            s.prototype.render.apply(this, arguments),
            this.$el.find(".time-selector").timepicker(n.prototype.timepickerOptions).on("changeTime.timepicker", $.proxy(this.toggleTwoDayMessage, this)),
            this.fromTime = this.$el.find(".from-time").data("timepicker"),
            this.toTime = this.$el.find(".to-time").data("timepicker"),
            this.$wraparoundMessage = this.$el.find(".wraparound"),
            this.$el.find(".bootstrap-timepicker").on("click", function(e) {
                return function() {
                    return e.$el.find("input[name=allDay][value=off]").prop("checked", !0),
                    e.toggleTimeSelectors(!0)
                }
            }(this)),
            this.dateRangePicker = this.$el.find(".daterange-selector").data("from", this.model.getFromDate() || this.getDefaultFromDate()).data("to", this.model.getToDate() || this.getDefaultToDate()),
            this.dateRangePicker.daterangepicker({
                locale: {
                    format: this.dateRangeFormat
                },
                startDate: this.model.getFromDate() || this.getDefaultFromDate(),
                endDate: this.model.getToDate() || this.getDefaultToDate()
            }, function(e) {
                return function(t, i) {
                    return e.dateRangePicker.data("from", t),
                    e.dateRangePicker.data("to", i)
                }
            }(this)),
            this.$el.find(".collapse-toggle").collapse()
        },
        toggleTwoDayMessage: function() {
            var e;
            return e = 1 === this.model.compareHours(this.fromTime, this.toTime) && !this.isAllDaySelected(),
            this.$wraparoundMessage.toggleClass("hidden", !e)
        },
        cleanupDateRangePicker: function() {
            var e;
            return null != (e = this.dateRangePicker) ? e.data("daterangepicker").remove() : void 0
        },
        cleanupTimePicker: function() {
            return this.$el.find(".time-selector").timepicker("remove")
        },
        onSubmit: function(e) {
            var t;
            if (e.preventDefault(),
            this.readRestriction(),
            t = this.validate())
                return this.fire("done", {
                    model: this.model,
                    group: this.group,
                    isNewRestriction: this.isNewRestriction
                })
        },
        validate: function() {
            var e;
            return this.$el.find(".validation-error").hide(),
            e = !0,
            0 === this.model.days && (this.$el.find(".days .validation-error").show(),
            e = !1),
            0 === this.model.vehicleTypes && (this.$el.find(".vehicle-types .validation-error").show(),
            e = !1),
            this.model.isAllDay() || this.model.fromTime !== this.model.toTime || (this.$el.find(".hours .validation-error").show(),
            e = !1),
            e || this.$el.find(".controls .validation-error").show(),
            e
        },
        onCancelClicked: function(e) {
            return e.preventDefault(),
            this.fire("cancel", {
                model: this.model
            })
        },
        onTimeToggled: function() {
            this.toggleTimeSelectors(!this.isAllDaySelected()),
            this.toggleTwoDayMessage()
        },
        isAllDaySelected: function() {
            return "on" === this.$el.find("input[name=allDay]:checked").val()
        },
        onDateToggled: function() {
            this.toggleDateSelectors(!this.isEveryWeekSelected())
        },
        isEveryWeekSelected: function() {
            return "on" === this.$el.find("input[name=permanent]:checked").val()
        },
        toggleTimeSelectors: function(e) {
            return this.$el.find(".time-selector").prop({
                disabled: !e,
                required: e
            })
        },
        toggleDateSelectors: function(e) {
            return this.$el.find(".daterange-selector").prop({
                disabled: !e,
                required: e
            })
        },
        readRestriction: function() {
            var e, t, i, n, s, o, a, l, u, c, d, h, p, g;
            return e = this.$el.find("form"),
            s = function() {
                var t, i, n, s;
                for (n = e.find("input[name=days]:checked"),
                s = [],
                t = 0,
                i = n.length; t < i; t++)
                    u = n[t],
                    s.push(parseInt($(u).val(), 10));
                return s
            }(),
            l = e.find("input[name=fromTime]").val(),
            h = e.find("input[name=toTime]").val(),
            c = this.isEveryWeekSelected(),
            o = e.find("textarea.description").val(),
            t = this.isAllDaySelected(),
            a = this.dateRangePicker.data("from"),
            d = this.dateRangePicker.data("to"),
            p = e.find(".vehicle_type"),
            n = e.find(".vehicle_type:checked"),
            i = p.length === n.length,
            g = i ? r.prototype.allVehicleTypes : n.toArray().reduce(function(e, t) {
                var i;
                return i = $(t),
                i.is(":checked") && (e += Math.pow(2, i.val())),
                e
            }, 0),
            this.model.vehicleTypes = g,
            this.model.description = o,
            this.model.setDays(s),
            t ? this.model.setAllDay() : this.model.setTime(l, h),
            c ? this.model.setPermanent() : this.model.setDates(a, d)
        },
        getDefaultFromDate: function() {
            return Date.today()
        },
        getDefaultToDate: function() {
            return Date.today().next().month()
        },
        getDefaultFromTime: function() {
            return "08:00"
        },
        getDefaultToTime: function() {
            return "17:00"
        },
        onSelectAllClicked: function(e) {
            return this.toggleCheckBoxes($(e.target), !0),
            !1
        },
        onSelectNoneClicked: function(e) {
            return this.toggleCheckBoxes($(e.target), !1),
            !1
        },
        toggleCheckBoxes: function(e, t) {
            return e.parents(".section").find("input[type=checkbox]").prop("checked", t)
        },
        onToggleVehiclesClicked: function() {
            return this.$el.find(".vehicle-types").removeClass("all-included"),
            !1
        },
        serialize: function() {
            return {
                model: this.model,
                view: this,
                descriptionMaxLength: r.prototype.DescriptionMaxLength,
                isNewRestriction: this.isNewRestriction
            }
        },
        destroy: function() {
            return this.cleanupDateRangePicker(),
            this.cleanupTimePicker(),
            s.prototype.destroy.apply(this, arguments)
        }
    }),
    e.exports = o
}
, function(e, t, i) {
    var n, s, r = {}.hasOwnProperty;
    n = i(12),
    s = OL.Class(n, {
        dateFormat: I18n.t("restrictions.dateformat"),
        template: "restriction/list",
        events: {
            "click .edit": "onEditClicked",
            "click .remove": "onRemoveClicked",
            "click .add-to-all": "onAddToAllClicked",
            "click .copy": "onCopyAllClicked",
            "change .difficult": "onDifficultChanged",
            "show.bs.tab a[data-toggle=tab]": "onTabShown"
        },
        model: null ,
        features: null ,
        editable: !1,
        isDifficult: !1,
        selectedGroup: null ,
        shouldShowTabs: !1,
        lastTab: null ,
        initialize: function(e) {
            n.prototype.initialize.apply(this, arguments)
        },
        setModel: function(e, t, i, n) {
            var s, r, o, a;
            if (this.model = e,
            this.features = t,
            this.editable = i,
            this.isDifficult = n,
            this.multipleFeatures = this.features.length > 1,
            r = Object.values(this.model),
            this.numGroups = r.length,
            !this.multipleFeatures)
                for (o = 0,
                a = r.length; o < a; o++)
                    s = r[o],
                    s.title = this.getGroupTitle(s);
            return this.shouldShowTabs = "default" !== r.first().name
        },
        onTabShown: function(e) {
            return this.selectedGroup = $(e.target).data("group"),
            this.lastTab = $(e.target).attr("href")
        },
        onEditClicked: function(e) {
            var t, i, n, s, r;
            return s = this.getRestrictionFromEvent(e),
            r = s[0],
            i = s[1],
            n = s[2],
            t = s[3],
            this.fire("editClicked", {
                restriction: r,
                group: t
            })
        },
        onRemoveClicked: function(e) {
            var t, i, n, s, r;
            return s = this.getRestrictionFromEvent(e),
            r = s[0],
            i = s[1],
            n = s[2],
            t = s[3],
            t.restrictions.splice(i, 1),
            this.render()
        },
        onAddToAllClicked: function(e) {
            var t;
            return t = this.getRestrictionFromEvent(e)[0],
            t.models = this.features.clone(),
            this.render()
        },
        onDifficultChanged: function(e) {
            return this.isDifficult = $(e.target).is(":checked")
        },
        onCopyAllClicked: function(e) {
            var t, i, n, s, o, a, l, u, c, d, h;
            e.preventDefault(),
            d = this.model[this.selectedGroup],
            h = null ,
            a = this.model;
            for (i in a)
                r.call(a, i) && (t = a[i],
                i !== d.name && (h = t));
            for (l = d.restrictions,
            n = 0,
            s = l.length; n < s; n++)
                u = l[n],
                c = h.restrictions.some(function(e) {
                    return e.equals(u)
                }),
                o = u.clone(),
                u.models && (o.models = u.models.clone()),
                c || h.restrictions.push(o);
            return this.selectedGroup = h.name,
            this.render()
        },
        getRestrictionFromEvent: function(e) {
            var t, i, n, s;
            return t = $(e.target),
            s = t.parents("tr"),
            n = s.data("index"),
            i = t.parents(".tab-pane").data("group"),
            i = this.model[i],
            [i.restrictions[n], n, s, i]
        },
        serialize: function() {
            return {
                model: this.model,
                view: this,
                features: this.features,
                selectedGroup: this.selectedGroup
            }
        },
        getMixedGroups: function() {
            var e, t, i, n;
            i = {},
            n = this.model;
            for (t in n)
                r.call(n, t) && (e = n[t],
                i[t] = e.restrictions.some(function(e) {
                    return function(t) {
                        return null != t.models && t.models.length < e.features.length
                    }
                }(this)));
            return i
        },
        getGroupTitle: function(e) {
            var t, i, n;
            return e.fromSeg ? e.fromSeg === e.toSeg ? I18n.t("restrictions.group_title.uturn", {
                street: this.getStreetName(e.fromSeg)
            }) : I18n.t("restrictions.group_title.node", {
                from_street: this.getStreetName(e.fromSeg),
                to_street: this.getStreetName(e.toSeg)
            }) : (i = this.features.first(),
            n = this.getStreetName(i),
            t = "fwdRestrictions" === e.name ? i.getFwdHeading() : i.getRevHeading(),
            I18n.t("restrictions.group_title.segment", {
                direction: I18n.t("segment.heading")[t],
                street: n
            }))
        },
        getStreetName: function(e) {
            var t;
            return t = e.getAddressDetails(),
            (null != t ? t.streetName : void 0) || I18n.t("segment.address.none")
        },
        render: function() {
            if (this.mixedGroups = this.getMixedGroups(),
            n.prototype.render.apply(this, arguments),
            this.$el.find(".past span").tooltip({
                title: I18n.t("restrictions.past")
            }),
            this.lastTab && this.$el.find("a[href=" + this.lastTab + "]").tab("show"),
            this.$el.find("tr.new").length)
                return this.$el.find("tr.new:first").get(0).offsetWidth,
                this.$el.find("tr").removeClass("new")
        }
    }),
    e.exports = s
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        className: "snapshot-message",
        template: "templates/snapshot-message",
        events: {
            "click .return-to-edit-mode": "_onReturnToEditModeClicked"
        },
        initialize: function() {
            return this.snapshotManager = this.options.snapshotManager,
            this.listenTo(this.snapshotManager, "change:state", this.render)
        },
        onRender: function() {
            return this.$el.toggle(this.snapshotManager.isSnapshotOn())
        },
        _onReturnToEditModeClicked: function() {
            return this.snapshotManager.toggle(!1)
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Marionette.ItemView.extend({
        template: "templates/snapshot-toggler",
        ui: {
            toggler: ".toggler"
        },
        events: {
            "click @ui.toggler": "_onSnapshotClicked"
        },
        initialize: function() {
            return this.snapshotManager = this.options.snapshotManager,
            this.listenTo(this.snapshotManager, "change:state change:togglable", this.render)
        },
        onRender: function() {
            if (!this.snapshotManager.canToggleOn())
                return this.ui.toggler.tooltip({
                    title: "Save changes first",
                    placement: "bottom"
                })
        },
        serializeData: function() {
            return {
                canToggleOn: this.snapshotManager.canToggleOn(),
                isOn: this.snapshotManager.isSnapshotOn()
            }
        },
        onDestroy: function() {
            return this.ui.toggler.tooltip("destroy")
        },
        _onSnapshotClicked: function() {
            return this.snapshotManager.isSnapshotOn() ? this.snapshotManager.toggle(!1) : this.snapshotManager.canToggleOn() ? this.snapshotManager.toggle(!0) : void 0
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Marionette.Region.extend({
        el: "#dialog-region",
        initialize: function() {
            return this._ensureElement(),
            this.$el.addClass("modal").attr("tabindex", -1),
            this.$el.on("hidden.bs.modal", function(e) {
                return function() {
                    if (!e._isClosing)
                        return e.empty()
                }
            }(this)),
            this.$el.on("click", ".cancel-button", function(e) {
                return function(t) {
                    return t.preventDefault(),
                    e.empty()
                }
            }(this))
        },
        empty: function() {
            if (!this._isClosing)
                return this._isClosing = !0,
                this._destroyModal(),
                Marionette.Region.prototype.empty.apply(this, arguments),
                this._isClosing = !1
        },
        _destroyModal: function() {
            return this.stopListening(this.currentView),
            this.$el.off("keydown.dialog-region"),
            this.$el.modal("hide"),
            this.$el.removeData()
        },
        show: function(e, t) {
            null == t && (t = {}),
            Marionette.Region.prototype.show.apply(this, arguments),
            _.defaults(t, {
                keyboard: !0,
                backdrop: "static"
            }),
            e.on("destroy", function(e) {
                return function() {
                    return e.empty()
                }
            }(this)),
            e.$el.addClass("modal-dialog"),
            this.$el.on("keydown.dialog-region", function(e) {
                return e.stopPropagation()
            }),
            this.$el.modal(t)
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i;
    i = Marionette.Region.extend({
        el: "#panel-container",
        mapHeight: null ,
        initialize: function(e) {
            return e.map.events.register("resize", this, this._onMapResize),
            this._bindCloseButtons()
        },
        onShow: function(e) {
            return this._ensureElement(),
            e.$el.addClass("panel"),
            this._setViewHeight()
        },
        _bindCloseButtons: function() {
            return this.$el.on("click", ".close-panel, .done", function(e) {
                return function(t) {
                    return e.trigger("closeClicked"),
                    e.empty()
                }
            }(this))
        },
        _onMapResize: function(e) {
            return this.mapHeight = e.height,
            this._setViewHeight()
        },
        _setViewHeight: function(e) {
            var t, i;
            if (this.currentView && !this.currentView.isDestroyed)
                return i = this.mapHeight,
                i -= parseInt(this.currentView.$el.css("marginTop"), 10),
                i -= parseInt(this.currentView.$el.css("marginBottom"), 10),
                "function" == typeof (t = this.currentView).setMaxHeight ? t.setMaxHeight(i) : void 0
        }
    }),
    e.exports = i
}
, function(e, t) {
    var i, n;
    i = "wme",
    n = function(e, t, n, s, r) {
        return e = i + "_" + e,
        W.Config.reporting.enable ? ga("send", "event", e, t, n, s, r) : void 0
    }
    ,
    W.Report = {
        feedAction: function(e, t) {
            return n("feed", e, t)
        },
        loginAction: function(e, t) {
            return n("login", e, t)
        },
        generalAction: function(e, t) {
            return n("general", e, t)
        },
        chatAction: function(e, t) {
            return n("chat", e, t)
        }
    }
}
, function(e, t) {
    Waze.Rule = OL.Class(OL.Rule, {
        getContext: function(e) {
            return e
        },
        CLASS_NAME: "Waze.Rule"
    }),
    Waze.rule = function(e, t, i) {
        return new Waze.Rule({
            filter: new OL.Filter({
                evaluate: function(i) {
                    var n;
                    return null != i.model && (i = i.model),
                    n = i[e],
                    _.isFunction(n) && (n = n.apply(i)),
                    n === t
                }
            }),
            symbolizer: i
        })
    }
    ,
    Waze.defaultRule = function(e) {
        return new Waze.Rule({
            filter: new OL.Filter({
                evaluate: function(e) {
                    return !0
                }
            }),
            symbolizer: e
        })
    }
}
, function(e, t, i) {
    var n, s;
    n = i(8),
    s = OL.Class({
        initialize: function() {},
        sayStreetName: function(e, t) {
            var i, n, r, o;
            if (r = e.get("name"),
            i = e.get("lonlat"),
            0 !== r.length)
                return n = {
                    text: " " + r + " ",
                    lang: t
                },
                null !== i && _.extend(n, this._getLocationOptions(i)),
                n = _.defaults(n, W.Config.tts.options),
                o = W.Config.tts.url + "?" + $.param(n),
                s._getCachedAudioElement().attr("src", o)
        },
        _getLocationOptions: function(e) {
            return e = e.clone(),
            n.unproject(e),
            {
                lon: e.lon,
                lat: e.lat
            }
        }
    }),
    s._cachedAudioElement = null ,
    s._getCachedAudioElement = function() {
        return null != this._cachedAudioElement ? this._cachedAudioElement : this._cachedAudioElement = $("<audio />").attr("autoplay", !0)
    }
    ,
    e.exports = s
}
, function(e, t) {
    var i;
    i = {
        fontFamily: "WazeFont",
        unicodeMap: {
            ".waze-icon-arrow-down": 61696,
            ".waze-icon-arrow-left": 61697,
            ".waze-icon-arrow-right": 61698,
            ".waze-icon-arrow-up": 61699,
            ".waze-icon-attach": 61700,
            ".waze-icon-bubble": 61701,
            ".waze-icon-c-alert": 61702,
            ".waze-icon-c-arrow-down": 61703,
            ".waze-icon-c-arrow-left": 61704,
            ".waze-icon-c-arrow-right": 61705,
            ".waze-icon-c-arrow-up": 61706,
            ".waze-icon-calendar": 61707,
            ".waze-icon-check": 61708,
            ".waze-icon-clock": 61709,
            ".waze-icon-close": 61710,
            ".waze-icon-closure": 61711,
            ".waze-icon-crosshair": 61712,
            ".waze-icon-detach": 61713,
            ".waze-icon-edit": 61714,
            ".waze-icon-envelope": 61715,
            ".waze-icon-event": 61716,
            ".waze-icon-full-arrow-down": 61717,
            ".waze-icon-full-arrow-left": 61718,
            ".waze-icon-full-arrow-right": 61719,
            ".waze-icon-full-arrow-up": 61720,
            ".waze-icon-hive": 61721,
            ".waze-icon-house": 61722,
            ".waze-icon-km": 61723,
            ".waze-icon-layers": 61724,
            ".waze-icon-map": 61725,
            ".waze-icon-place": 61726,
            ".waze-icon-place-car": 61727,
            ".waze-icon-place-culture": 61728,
            ".waze-icon-place-food-drink": 61729,
            ".waze-icon-place-lodging": 61730,
            ".waze-icon-place-natural": 61731,
            ".waze-icon-place-other": 61732,
            ".waze-icon-place-outdoors": 61733,
            ".waze-icon-place-professional": 61734,
            ".waze-icon-place-shopping": 61735,
            ".waze-icon-place-transportation": 61736,
            ".waze-icon-plus": 61737,
            ".waze-icon-plus_neg": 61738,
            ".waze-icon-redo": 61739,
            ".waze-icon-road": 61740,
            ".waze-icon-save": 61741,
            ".waze-icon-star": 61742,
            ".waze-icon-trash": 61743,
            ".waze-icon-undo": 61744,
            ".waze-icon-view": 61745
        },
        toUnicode: function(e) {
            var t;
            return t = this.unicodeMap["." + e],
            String.fromCharCode(t)
        }
    },
    e.exports = i
}
, function(e, t) {
    var i, n, s, r, o, a, l, u, c, d, h, p, g, m, f, v, y, b;
    a = "#ffc62e",
    i = a,
    c = 1,
    p = 2,
    s = .3,
    h = "#00ece3",
    o = h,
    l = "#ff8383",
    n = l,
    u = l,
    d = "#fed15a",
    r = d,
    v = {
        strokeColor: a,
        fillColor: i,
        strokeDashstyle: "solid",
        strokeOpacity: c,
        strokeWidth: p,
        fillOpacity: s,
        graphicZIndex: "${getZIndex}"
    },
    g = function(e) {
        var t;
        return t = W.defaultRule({
            Polygon: v
        }),
        new OL.Style(null ,{
            rules: [t].concat(e),
            context: {
                getZIndex: function(e) {
                    var t;
                    return t = e.geometry.getBounds(),
                    -Math.floor(t.getHeight() * t.getWidth())
                }
            }
        })
    }
    ,
    y = W.defaultRule({
        Polygon: {
            strokeColor: h,
            fillColor: o
        }
    }),
    f = W.defaultRule({
        Polygon: {
            fill: !1,
            strokeDashstyle: "dash",
            strokeColor: u
        }
    }),
    m = W.rule("isUnchanged", !1, {
        Polygon: {
            fillColor: n,
            strokeColor: l
        }
    }),
    b = W.rule("_sketch", !0, {
        externalGraphic: null ,
        strokeWidth: 3,
        strokeColor: "#00ece3",
        strokeOpacity: 1,
        pointRadius: 6,
        fillColor: "white",
        fillOpacity: 1,
        graphicZIndex: 0
    }),
    e.exports = new OL.StyleMap({
        default: g([b, m]),
        highlight: g([W.defaultRule({
            Polygon: {
                strokeColor: d,
                fillColor: r
            }
        }), b, m]),
        select: g([y]),
        highlightselected: g([y]),
        delete: g([f]),
        highlightdeleted: g([f])
    })
}
, function(e, t, i) {
    var n, s, r, o, a;
    o = W.rule("_cameraRotator", !0, {
        pointRadius: 7,
        strokeOpacity: 1,
        strokeColor: "#aaaaaa",
        fillColor: "#ff3300",
        fillOpacity: 1,
        strokeWidth: 2,
        externalGraphic: null
    }),
    n = W.rule("_cameraAnchor", !0, {
        pointRadius: 25,
        strokeOpacity: 1,
        strokeColor: "#aaaaaa",
        fillColor: "#ffffff",
        strokeWidth: 0,
        externalGraphic: null ,
        fillOpacity: 0
    }),
    s = W.rule("type", "camera", {}),
    a = [o, s, n],
    r = function(e) {
        return new OpenLayers.Style(e,{
            rules: a,
            context: {
                getAzymuth: function(e) {
                    var t;
                    return null != (t = e.model) ? t.attributes.azymuth : void 0
                },
                getImageURL: function(e) {
                    var t;
                    if (t = e.model)
                        return i(1027)("./camera" + t.attributes.type + t.attributes.validated + ".png")
                }
            }
        })
    }
    ,
    e.exports = new OpenLayers.StyleMap({
        default: r({
            externalGraphic: "${getImageURL}",
            pointRadius: 18,
            rotation: "${getAzymuth}"
        }),
        highlight: r({
            pointRadius: 22
        }),
        select: r({
            pointRadius: 22
        }),
        highlightselected: r({
            pointRadius: 22
        }),
        drag: r({
            pointRadius: 22
        })
    })
}
, function(e, t) {
    var i, n, s, r;
    s = "#00ece3",
    i = "#ff8383",
    n = "#eb7171",
    r = 7,
    e.exports = new OpenLayers.StyleMap({
        default: new OpenLayers.Style(null ,{
            rules: [W.defaultRule({
                pointRadius: r,
                strokeWidth: 0,
                fillOpacity: 0
            }), W.rule("isUnchanged", !1, {
                fillColor: i,
                fillOpacity: 1
            })]
        }),
        highlight: new OpenLayers.Style(null ,{
            rules: [W.defaultRule({
                pointRadius: r,
                strokeWidth: 0,
                fillColor: s,
                fillOpacity: 1
            }), W.rule("isUnchanged", !1, {
                fillOpacity: 1,
                fillColor: n
            })]
        })
    })
}
, function(e, t) {
    var i, n, s, r, o, a, l, u, c, d;
    i = "#ff8383",
    o = "#00ece3",
    s = o,
    r = "#eb7171",
    n = "#000010",
    a = 6,
    u = new OpenLayers.Style({
        strokeOpacity: 1,
        strokeDashstyle: "dash",
        strokeColor: i,
        strokeWidth: 2
    }),
    l = {
        strokeWidth: a,
        strokeOpacity: 1
    },
    c = new OpenLayers.Rule({
        filter: new OpenLayers.Filter({
            evaluate: function(e) {
                return e.model && e.layer.colorEmptyStreetSegments && e.model.hasEmptyStreet()
            }
        }),
        symbolizer: {
            strokeWidth: 9,
            strokeOpacity: .55,
            strokeColor: "red",
            strokeLinecap: "butt"
        }
    }),
    d = function(e) {
        var t;
        return t = W.defaultRule({
            Line: l
        }),
        new OL.Style(null ,{
            rules: [t].concat(e)
        })
    }
    ,
    e.exports = new OpenLayers.StyleMap({
        default: d([W.rule("isUnchanged", !0, {
            strokeOpacity: 0
        }), W.rule("isUnchanged", !1, {
            strokeColor: i
        })]),
        highlight: d([W.defaultRule({
            strokeColor: s
        }), W.rule("isUnchanged", !1, {
            strokeColor: r
        })]),
        select: d(W.defaultRule({
            strokeColor: o
        })),
        highlightselected: d(W.defaultRule({
            strokeColor: s
        })),
        delete: u,
        highlightdeleted: u,
        drag: d(W.defaultRule({
            strokeColor: o
        })),
        flash: d(W.defaultRule({
            strokeColor: n,
            strokeOpacity: .8
        }))
    })
}
, function(e, t) {
    var i, n, s, r, o = {}.hasOwnProperty;
    r = {
        dragPoint: {
            strokeWidth: 3,
            strokeColor: "#00ece3",
            strokeOpacity: 1,
            pointRadius: 6,
            fillColor: "white",
            fillOpacity: 1
        },
        fromNodeDragPoint: {
            fontSize: 10,
            fontColor: "#222222",
            strokeWidth: 3,
            strokeColor: "#00ece3",
            strokeOpacity: 1,
            pointRadius: 10,
            label: "A",
            fillColor: "white",
            fillOpacity: 1
        },
        toNodeDragPoint: {
            fontSize: 10,
            fontColor: "#222222",
            strokeWidth: 3,
            strokeColor: "#00ece3",
            strokeOpacity: 1,
            pointRadius: 10,
            label: "B",
            fillColor: "white",
            fillOpacity: 1
        },
        sketchNode: {
            pointRadius: 9,
            strokeOpacity: 1,
            strokeColor: "white",
            fillColor: "#00ece3",
            fillOpacity: 1,
            strokeWidth: 3
        },
        cameraRotator: {
            pointRadius: 7,
            strokeOpacity: 1,
            strokeColor: "#aaaaaa",
            fillColor: "#ff3300",
            fillOpacity: 1,
            strokeWidth: 2
        },
        highlightPlaceHolder: {
            strokeColor: "transparent",
            strokeOpacity: 0,
            strokeWidth: 30
        }
    },
    n = function() {
        var e;
        e = [];
        for (i in r)
            o.call(r, i) && (s = r[i],
            e.push(W.rule("_" + i, !0, s)));
        return e
    }(),
    n.push(W.rule("uneditable", !0, {
        fillColor: "#cecece",
        strokeColor: "#aeaeae"
    })),
    e.exports = new OpenLayers.StyleMap({
        default: new OpenLayers.Style(null ,{
            rules: n
        }),
        highlight: new OpenLayers.Style(null ,{
            rules: n
        })
    })
}
, function(e, t, i) {
    var n, s = {}.hasOwnProperty;
    n = $.Deferred(),
    W.Config = i(1022),
    W.Config.raster_layers = i(1023),
    W.Config.ready = n,
    W.Config.init = function() {
        var e, t, i, r, o, a;
        Waze.Config.ready = n,
        $.extend(!0, Waze.Config, null != (r = Waze.Config.deployments) ? r[W.location.code] : void 0),
        $.extend(!0, Waze.Config.raster_layers, null != (o = Waze.Config.raster_layers.deployments) ? o[W.location.code] : void 0),
        a = Waze.Config.paths;
        for (e in a)
            s.call(a, e) && (t = a[e],
            Waze.Config.paths[e] = Waze.Config.api_base + "/" + t);
        return i = W.Config.map.projection,
        i.local = new OL.Projection(i.local),
        i.remote = new OL.Projection(i.remote),
        Object.freeze(W.Config),
        this.ready.resolve()
    }
}
, function(e, t, i) {
    var n, s;
    i(1018),
    i(13),
    i(710),
    i(1076),
    i(702),
    i(701),
    n = i(497),
    s = i(553),
    i(9),
    i(1058),
    $(document).ready(function() {
        return W.app = new n,
        W.prefs = new s,
        W.prefs.fetch(),
        W.app.start()
    })
}
, , , , , , , , function(e, t, i) {
    i(102),
    i(101),
    e.exports = i(753)
}
, function(e, t, i) {
    i(102),
    i(101),
    e.exports = i(754)
}
, function(e, t, i) {
    i(756),
    e.exports = i(14).Object.assign
}
, function(e, t, i) {
    i(757);
    var n = i(14).Object;
    e.exports = function(e, t, i) {
        return n.defineProperty(e, t, i)
    }
}
, function(e, t, i) {
    i(758),
    e.exports = i(14).Object.keys
}
, function(e, t, i) {
    i(761),
    e.exports = i(14).Object.values
}
, function(e, t, i) {
    i(759),
    i(101),
    i(102),
    i(760),
    e.exports = i(14).Promise
}
, function(e, t) {
    e.exports = function() {}
}
, function(e, t) {
    e.exports = function(e, t, i, n) {
        if (!(e instanceof t) || void 0 !== n && n in e)
            throw TypeError(i + ": incorrect invocation!");
        return e
    }
}
, function(e, t, i) {
    var n = i(69)
      , s = i(177)
      , r = i(751);
    e.exports = function(e) {
        return function(t, i, o) {
            var a, l = n(t), u = s(l.length), c = r(o, u);
            if (e && i != i) {
                for (; u > c; )
                    if (a = l[c++],
                    a != a)
                        return !0
            } else
                for (; u > c; c++)
                    if ((e || c in l) && l[c] === i)
                        return e || c || 0;
            return !e && -1
        }
    }
}
, function(e, t, i) {
    var n = i(64)
      , s = i(733)
      , r = i(732)
      , o = i(26)
      , a = i(177)
      , l = i(179)
      , u = {}
      , c = {}
      , t = e.exports = function(e, t, i, d, h) {
        var p, g, m, f, v = h ? function() {
            return e
        }
        : l(e), y = n(i, d, t ? 2 : 1), b = 0;
        if ("function" != typeof v)
            throw TypeError(e + " is not iterable!");
        if (r(v)) {
            for (p = a(e.length); p > b; b++)
                if (f = t ? y(o(g = e[b])[0], g[1]) : y(e[b]),
                f === u || f === c)
                    return f
        } else
            for (m = v.call(e); !(g = m.next()).done; )
                if (f = s(m, y, g.value, t),
                f === u || f === c)
                    return f
    }
    ;
    t.BREAK = u,
    t.RETURN = c
}
, function(e, t, i) {
    e.exports = !i(33) && !i(65)(function() {
        return 7 != Object.defineProperty(i(96)("div"), "a", {
            get: function() {
                return 7
            }
        }).a
    })
}
, function(e, t) {
    e.exports = function(e, t, i) {
        var n = void 0 === i;
        switch (t.length) {
        case 0:
            return n ? e() : e.call(i);
        case 1:
            return n ? e(t[0]) : e.call(i, t[0]);
        case 2:
            return n ? e(t[0], t[1]) : e.call(i, t[0], t[1]);
        case 3:
            return n ? e(t[0], t[1], t[2]) : e.call(i, t[0], t[1], t[2]);
        case 4:
            return n ? e(t[0], t[1], t[2], t[3]) : e.call(i, t[0], t[1], t[2], t[3])
        }
        return e.apply(i, t)
    }
}
, function(e, t, i) {
    var n = i(36)
      , s = i(15)("iterator")
      , r = Array.prototype;
    e.exports = function(e) {
        return void 0 !== e && (n.Array === e || r[s] === e)
    }
}
, function(e, t, i) {
    var n = i(26);
    e.exports = function(e, t, i, s) {
        try {
            return s ? t(n(i)[0], i[1]) : t(i)
        } catch (t) {
            var r = e.return;
            throw void 0 !== r && n(r.call(e)),
            t
        }
    }
}
, function(e, t, i) {
    "use strict";
    var n = i(739)
      , s = i(174)
      , r = i(97)
      , o = {};
    i(35)(o, i(15)("iterator"), function() {
        return this
    }),
    e.exports = function(e, t, i) {
        e.prototype = n(o, {
            next: s(1, i)
        }),
        r(e, t + " Iterator")
    }
}
, function(e, t, i) {
    var n = i(15)("iterator")
      , s = !1;
    try {
        var r = [7][n]();
        r.return = function() {
            s = !0
        }
        ,
        Array.from(r, function() {
            throw 2
        })
    } catch (e) {}
    e.exports = function(e, t) {
        if (!t && !s)
            return !1;
        var i = !1;
        try {
            var r = [7]
              , o = r[n]();
            o.next = function() {
                return {
                    done: i = !0
                }
            }
            ,
            r[n] = function() {
                return o
            }
            ,
            e(r)
        } catch (e) {}
        return i
    }
}
, function(e, t) {
    e.exports = function(e, t) {
        return {
            value: t,
            done: !!e
        }
    }
}
, function(e, t, i) {
    var n = i(19)
      , s = i(176).set
      , r = n.MutationObserver || n.WebKitMutationObserver
      , o = n.process
      , a = n.Promise
      , l = "process" == i(63)(o);
    e.exports = function() {
        var e, t, i, u = function() {
            var n, s;
            for (l && (n = o.domain) && n.exit(); e; ) {
                s = e.fn,
                e = e.next;
                try {
                    s()
                } catch (n) {
                    throw e ? i() : t = void 0,
                    n
                }
            }
            t = void 0,
            n && n.enter()
        };
        if (l)
            i = function() {
                o.nextTick(u)
            }
            ;
        else if (r) {
            var c = !0
              , d = document.createTextNode("");
            new r(u).observe(d, {
                characterData: !0
            }),
            i = function() {
                d.data = c = !c
            }
        } else if (a && a.resolve) {
            var h = a.resolve();
            i = function() {
                h.then(u)
            }
        } else
            i = function() {
                s.call(n, u)
            }
            ;
        return function(n) {
            var s = {
                fn: n,
                next: void 0
            };
            t && (t.next = s),
            e || (e = s,
            i()),
            t = s
        }
    }
}
, function(e, t, i) {
    "use strict";
    var n = i(68)
      , s = i(741)
      , r = i(173)
      , o = i(100)
      , a = i(170)
      , l = Object.assign;
    e.exports = !l || i(65)(function() {
        var e = {}
          , t = {}
          , i = Symbol()
          , n = "abcdefghijklmnopqrst";
        return e[i] = 7,
        n.split("").forEach(function(e) {
            t[e] = e
        }),
        7 != l({}, e)[i] || Object.keys(l({}, t)).join("") != n
    }) ? function(e, t) {
        for (var i = o(e), l = arguments.length, u = 1, c = s.f, d = r.f; l > u; )
            for (var h, p = a(arguments[u++]), g = c ? n(p).concat(c(p)) : n(p), m = g.length, f = 0; m > f; )
                d.call(p, h = g[f++]) && (i[h] = p[h]);
        return i
    }
    : l
}
, function(e, t, i) {
    var n = i(26)
      , s = i(740)
      , r = i(168)
      , o = i(98)("IE_PROTO")
      , a = function() {}
      , l = "prototype"
      , u = function() {
        var e, t = i(96)("iframe"), n = r.length, s = "<", o = ">";
        for (t.style.display = "none",
        i(169).appendChild(t),
        t.src = "javascript:",
        e = t.contentWindow.document,
        e.open(),
        e.write(s + "script" + o + "document.F=Object" + s + "/script" + o),
        e.close(),
        u = e.F; n--; )
            delete u[l][r[n]];
        return u()
    };
    e.exports = Object.create || function(e, t) {
        var i;
        return null !== e ? (a[l] = n(e),
        i = new a,
        a[l] = null ,
        i[o] = e) : i = u(),
        void 0 === t ? i : s(i, t)
    }
}
, function(e, t, i) {
    var n = i(45)
      , s = i(26)
      , r = i(68);
    e.exports = i(33) ? Object.defineProperties : function(e, t) {
        s(e);
        for (var i, o = r(t), a = o.length, l = 0; a > l; )
            n.f(e, i = o[l++], t[i]);
        return e
    }
}
, function(e, t) {
    t.f = Object.getOwnPropertySymbols
}
, function(e, t, i) {
    var n = i(66)
      , s = i(100)
      , r = i(98)("IE_PROTO")
      , o = Object.prototype;
    e.exports = Object.getPrototypeOf || function(e) {
        return e = s(e),
        n(e, r) ? e[r] : "function" == typeof e.constructor && e instanceof e.constructor ? e.constructor.prototype : e instanceof Object ? o : null
    }
}
, function(e, t, i) {
    var n = i(66)
      , s = i(69)
      , r = i(728)(!1)
      , o = i(98)("IE_PROTO");
    e.exports = function(e, t) {
        var i, a = s(e), l = 0, u = [];
        for (i in a)
            i != o && n(a, i) && u.push(i);
        for (; t.length > l; )
            n(a, i = t[l++]) && (~r(u, i) || u.push(i));
        return u
    }
}
, function(e, t, i) {
    var n = i(34)
      , s = i(14)
      , r = i(65);
    e.exports = function(e, t) {
        var i = (s.Object || {})[e] || Object[e]
          , o = {};
        o[e] = t(i),
        n(n.S + n.F * r(function() {
            i(1)
        }), "Object", o)
    }
}
, function(e, t, i) {
    var n = i(68)
      , s = i(69)
      , r = i(173).f;
    e.exports = function(e) {
        return function(t) {
            for (var i, o = s(t), a = n(o), l = a.length, u = 0, c = []; l > u; )
                r.call(o, i = a[u++]) && c.push(e ? [i, o[i]] : o[i]);
            return c
        }
    }
}
, function(e, t, i) {
    var n = i(35);
    e.exports = function(e, t, i) {
        for (var s in t)
            i && e[s] ? e[s] = t[s] : n(e, s, t[s]);
        return e
    }
}
, function(e, t, i) {
    e.exports = i(35)
}
, function(e, t, i) {
    "use strict";
    var n = i(19)
      , s = i(14)
      , r = i(45)
      , o = i(33)
      , a = i(15)("species");
    e.exports = function(e) {
        var t = "function" == typeof s[e] ? s[e] : n[e];
        o && t && !t[a] && r.f(t, a, {
            configurable: !0,
            get: function() {
                return this
            }
        })
    }
}
, function(e, t, i) {
    var n = i(26)
      , s = i(93)
      , r = i(15)("species");
    e.exports = function(e, t) {
        var i, o = n(e).constructor;
        return void 0 === o || void 0 == (i = n(o)[r]) ? t : s(i)
    }
}
, function(e, t, i) {
    var n = i(99)
      , s = i(95);
    e.exports = function(e) {
        return function(t, i) {
            var r, o, a = String(s(t)), l = n(i), u = a.length;
            return l < 0 || l >= u ? e ? "" : void 0 : (r = a.charCodeAt(l),
            r < 55296 || r > 56319 || l + 1 === u || (o = a.charCodeAt(l + 1)) < 56320 || o > 57343 ? e ? a.charAt(l) : r : e ? a.slice(l, l + 2) : (r - 55296 << 10) + (o - 56320) + 65536)
        }
    }
}
, function(e, t, i) {
    var n = i(99)
      , s = Math.max
      , r = Math.min;
    e.exports = function(e, t) {
        return e = n(e),
        e < 0 ? s(e + t, 0) : r(e, t)
    }
}
, function(e, t, i) {
    var n = i(67);
    e.exports = function(e, t) {
        if (!n(e))
            return e;
        var i, s;
        if (t && "function" == typeof (i = e.toString) && !n(s = i.call(e)))
            return s;
        if ("function" == typeof (i = e.valueOf) && !n(s = i.call(e)))
            return s;
        if (!t && "function" == typeof (i = e.toString) && !n(s = i.call(e)))
            return s;
        throw TypeError("Can't convert object to primitive value")
    }
}
, function(e, t, i) {
    var n = i(26)
      , s = i(179);
    e.exports = i(14).getIterator = function(e) {
        var t = s(e);
        if ("function" != typeof t)
            throw TypeError(e + " is not iterable!");
        return n(t.call(e))
    }
}
, function(e, t, i) {
    var n = i(94)
      , s = i(15)("iterator")
      , r = i(36);
    e.exports = i(14).isIterable = function(e) {
        var t = Object(e);
        return void 0 !== t[s] || "@@iterator"in t || r.hasOwnProperty(n(t))
    }
}
, function(e, t, i) {
    "use strict";
    var n = i(726)
      , s = i(736)
      , r = i(36)
      , o = i(69);
    e.exports = i(171)(Array, "Array", function(e, t) {
        this._t = o(e),
        this._i = 0,
        this._k = t
    }, function() {
        var e = this._t
          , t = this._k
          , i = this._i++;
        return !e || i >= e.length ? (this._t = void 0,
        s(1)) : "keys" == t ? s(0, i) : "values" == t ? s(0, e[i]) : s(0, [i, e[i]])
    }, "values"),
    r.Arguments = r.Array,
    n("keys"),
    n("values"),
    n("entries")
}
, function(e, t, i) {
    var n = i(34);
    n(n.S + n.F, "Object", {
        assign: i(738)
    })
}
, function(e, t, i) {
    var n = i(34);
    n(n.S + n.F * !i(33), "Object", {
        defineProperty: i(45).f
    })
}
, function(e, t, i) {
    var n = i(100)
      , s = i(68);
    i(744)("keys", function() {
        return function(e) {
            return s(n(e))
        }
    })
}
, function(e, t) {}
, function(e, t, i) {
    "use strict";
    var n, s, r, o = i(172), a = i(19), l = i(64), u = i(94), c = i(34), d = i(67), h = i(93), p = i(727), g = i(729), m = i(749), f = i(176).set, v = i(737)(), y = "Promise", b = a.TypeError, _ = a.process, w = a[y], _ = a.process, S = "process" == u(_), E = function() {}, C = !!function() {
        try {
            var e = w.resolve(1)
              , t = (e.constructor = {})[i(15)("species")] = function(e) {
                e(E, E)
            }
            ;
            return (S || "function" == typeof PromiseRejectionEvent) && e.then(E)instanceof t
        } catch (e) {}
    }(), L = function(e, t) {
        return e === t || e === w && t === r
    }, A = function(e) {
        var t;
        return !(!d(e) || "function" != typeof (t = e.then)) && t
    }, M = function(e) {
        return L(w, e) ? new I(e) : new s(e)
    }, I = s = function(e) {
        var t, i;
        this.promise = new e(function(e, n) {
            if (void 0 !== t || void 0 !== i)
                throw b("Bad Promise constructor");
            t = e,
            i = n
        }
        ),
        this.resolve = h(t),
        this.reject = h(i)
    }
    , D = function(e) {
        try {
            e()
        } catch (e) {
            return {
                error: e
            }
        }
    }, x = function(e, t) {
        if (!e._n) {
            e._n = !0;
            var i = e._c;
            v(function() {
                for (var n = e._v, s = 1 == e._s, r = 0, o = function(t) {
                    var i, r, o = s ? t.ok : t.fail, a = t.resolve, l = t.reject, u = t.domain;
                    try {
                        o ? (s || (2 == e._h && k(e),
                        e._h = 1),
                        o === !0 ? i = n : (u && u.enter(),
                        i = o(n),
                        u && u.exit()),
                        i === t.promise ? l(b("Promise-chain cycle")) : (r = A(i)) ? r.call(i, a, l) : a(i)) : l(n)
                    } catch (e) {
                        l(e)
                    }
                }; i.length > r; )
                    o(i[r++]);
                e._c = [],
                e._n = !1,
                t && !e._h && T(e)
            })
        }
    }, T = function(e) {
        f.call(a, function() {
            var t, i, n, s = e._v;
            if (O(e) && (t = D(function() {
                S ? _.emit("unhandledRejection", s, e) : (i = a.onunhandledrejection) ? i({
                    promise: e,
                    reason: s
                }) : (n = a.console) && n.error && n.error("Unhandled promise rejection", s)
            }),
            e._h = S || O(e) ? 2 : 1),
            e._a = void 0,
            t)
                throw t.error
        })
    }, O = function(e) {
        if (1 == e._h)
            return !1;
        for (var t, i = e._a || e._c, n = 0; i.length > n; )
            if (t = i[n++],
            t.fail || !O(t.promise))
                return !1;
        return !0
    }, k = function(e) {
        f.call(a, function() {
            var t;
            S ? _.emit("rejectionHandled", e) : (t = a.onrejectionhandled) && t({
                promise: e,
                reason: e._v
            })
        })
    }, N = function(e) {
        var t = this;
        t._d || (t._d = !0,
        t = t._w || t,
        t._v = e,
        t._s = 2,
        t._a || (t._a = t._c.slice()),
        x(t, !0))
    }, R = function(e) {
        var t, i = this;
        if (!i._d) {
            i._d = !0,
            i = i._w || i;
            try {
                if (i === e)
                    throw b("Promise can't be resolved itself");
                (t = A(e)) ? v(function() {
                    var n = {
                        _w: i,
                        _d: !1
                    };
                    try {
                        t.call(e, l(R, n, 1), l(N, n, 1))
                    } catch (e) {
                        N.call(n, e)
                    }
                }) : (i._v = e,
                i._s = 1,
                x(i, !1))
            } catch (e) {
                N.call({
                    _w: i,
                    _d: !1
                }, e)
            }
        }
    };
    C || (w = function(e) {
        p(this, w, y, "_h"),
        h(e),
        n.call(this);
        try {
            e(l(R, this, 1), l(N, this, 1))
        } catch (e) {
            N.call(this, e)
        }
    }
    ,
    n = function(e) {
        this._c = [],
        this._a = void 0,
        this._s = 0,
        this._d = !1,
        this._v = void 0,
        this._h = 0,
        this._n = !1
    }
    ,
    n.prototype = i(746)(w.prototype, {
        then: function(e, t) {
            var i = M(m(this, w));
            return i.ok = "function" != typeof e || e,
            i.fail = "function" == typeof t && t,
            i.domain = S ? _.domain : void 0,
            this._c.push(i),
            this._a && this._a.push(i),
            this._s && x(this, !1),
            i.promise
        },
        catch: function(e) {
            return this.then(void 0, e)
        }
    }),
    I = function() {
        var e = new n;
        this.promise = e,
        this.resolve = l(R, e, 1),
        this.reject = l(N, e, 1)
    }
    ),
    c(c.G + c.W + c.F * !C, {
        Promise: w
    }),
    i(97)(w, y),
    i(748)(y),
    r = i(14)[y],
    c(c.S + c.F * !C, y, {
        reject: function(e) {
            var t = M(this)
              , i = t.reject;
            return i(e),
            t.promise
        }
    }),
    c(c.S + c.F * (o || !C), y, {
        resolve: function(e) {
            if (e instanceof w && L(e.constructor, this))
                return e;
            var t = M(this)
              , i = t.resolve;
            return i(e),
            t.promise
        }
    }),
    c(c.S + c.F * !(C && i(735)(function(e) {
        w.all(e).catch(E)
    })), y, {
        all: function(e) {
            var t = this
              , i = M(t)
              , n = i.resolve
              , s = i.reject
              , r = D(function() {
                var i = []
                  , r = 0
                  , o = 1;
                g(e, !1, function(e) {
                    var a = r++
                      , l = !1;
                    i.push(void 0),
                    o++,
                    t.resolve(e).then(function(e) {
                        l || (l = !0,
                        i[a] = e,
                        --o || n(i))
                    }, s)
                }),
                --o || n(i)
            });
            return r && s(r.error),
            i.promise
        },
        race: function(e) {
            var t = this
              , i = M(t)
              , n = i.reject
              , s = D(function() {
                g(e, !1, function(e) {
                    t.resolve(e).then(i.resolve, n)
                })
            });
            return s && n(s.error),
            i.promise
        }
    })
}
, function(e, t, i) {
    var n = i(34)
      , s = i(745)(!1);
    n(n.S, "Object", {
        values: function(e) {
            return s(e)
        }
    })
}
, , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t) {}
, function(e, t, i) {
    e.exports = i.p + "img/one-way-drivee7f57df07fa6d5f61eee9b71ae5e18b1.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/one-way-restricted12d401d9920318fa515cfbd84b8bd91c.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/one-way-routed9aa340910f8fc7a0fd2285fa0aab968.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/two-way-restrictedd655660f966eee861e57842c3b34c64f.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/level0233d12d7a41f4890f6dd1ee9088ac84e6.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/level032896edee403d97e81128b54ed81cf668.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/level0482dfdf79740aa5d92aae015abc6660fc.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/level050754532211b9f1d2a6bef279e237217f.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/level06d91ac1e234d4a0b11bec9fd0635882ca.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/problem-pinA1d99ad1e8cd947bcea5969fff69d2eb8.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/problem-pinBafa0a6c37d9eba8278e82a3a97088206.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/camera2false939085363a833634fe17e9875b7941e7.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/camera2truea8ddef53efc28e8201b9f25d75a4e9ad.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/camera3false71d3b21e423ff7f7b512fcdf4eb94601.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/camera3trueee9b1b4b6419b735a33d66c2de82c80b.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/camera4false868766434958991e736f7334b23a498f.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/camera4truea43551aca063287131c5aa45520dad41.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_direction_end25226c71aed0efd3a2db41978066febc.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_direction_exit_left1c1498a6dec9582bae81d34ec9e6dc3b.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_direction_exit_rightba4fee1380f556a8570252c6745f1442.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_direction_forwardc0958c4d4c5c79bcb656d34f3afb3ea2.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_direction_left5b94fa33f945d46ab1bdd1131ac0457e.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_direction_right2d403871f04763260a40c537e231897e.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_direction_u63cf785b68a57e8663020098cd07ed76.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_directions_roundabout9f9bf37022d431be50fecc457cd6e3df.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_directions_roundabout_UK7dce607d7359326a799fd9d3ad8542aa.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_directions_roundabout_UK_ldc86a0b99cfcd4ed03b0192d5b350c70.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_directions_roundabout_UK_s01ea5c47f4e08b20532505d84b3271e0.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_directions_roundabout_l54dc48b91e36549b26bae30135462780.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_directions_roundabout_rc114740b6cafc42177a53aa6c803c14d.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_directions_roundabout_r_UKc34794c4d01ec8a9fa012150d2f1e02a.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_directions_roundabout_sffadf4fd7b277b8ef2f21688e79b9351.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_directions_roundabout_u3634283a7d740f30eb18c203f6a357be.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/big_directions_roundabout_u_UKba204c8a12885976f9bc5b07165b8644.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/unknownb34dd18530431d8e3b14a4750cbe4352.png"
}
, function(e, t, i) {
    e.exports = i.p + "img/video-notext00f564d3d1e7b4eaa9f30c473da6a09f.png"
}
, , , function(e, t) {
    (function() {
        this.Waze = this.Waze || this.W || {},
        this.W = this.Waze
    }
    ).call(window)
}
, , , , function(e, t) {
    e.exports = {
        api_base: "/Descartes/app",
        loginPath: "/login/create",
        paths: {
            features: "Features",
            issues: "Feed/Issues",
            notifications: "Feed/Notifications",
            auth: "Session",
            problemDetails: "MapProblems/Details",
            updateRequestSessions: "MapProblems/UpdateRequests",
            updateRequestComments: "MapProblems/UpdateRequests/Comment",
            updateRequestFollow: "MapProblems/UpdateRequests/Notification",
            mapCommentConversation: "MapComments/Comment",
            mapCommentFollow: "MapComments/Notification",
            archive: "Archive/List",
            archiveSessions: "Archive/SessionGPS",
            houseNumbers: "HouseNumbers",
            cityExists: "CityExistence",
            mteDetails: "MajorTrafficEvents/Details",
            mtePublish: "MajorTrafficEvents/Publish",
            mteReady: "MajorTrafficEvents/Ready",
            logger: "ErrorReport"
        },
        enabled_modules: ["Cities"],
        units: {
            lonLatPrecision: 5
        },
        week_days_order: [1, 2, 3, 4, 5, 6, 0],
        reporting: {
            enable: !0
        },
        search: {
            server: "/SearchServer/mozi",
            resultZoom: 3,
            options: {
                origin: "editor"
            }
        },
        places_api: {
            key: "AIzaSyBIfV0EMXrTDjrvD92QX5bBiyFmBbT-W8E",
            url: {
                autocomplete: "/maps/api/place/autocomplete/json",
                details: "/maps/api/place/details/json"
            }
        },
        mte: {
            root_url: "/mte"
        },
        map: {
            initialPosition: {
                il: {
                    lon: 34.789,
                    lat: 32.086,
                    initialZoom: 1
                },
                usa: {
                    lon: -73.99078,
                    lat: 40.73565,
                    initialZoom: 0
                },
                row: {
                    lon: -.119,
                    lat: 51.524,
                    initialZoom: 0
                }
            },
            projection: {
                remote: "EPSG:4326",
                local: "EPSG:900913"
            }
        },
        permalink: {
            filterSuffix: "Filter",
            features: ["segments", "nodes", "venues", "cameras", "bigJunctions"]
        },
        tts: {
            url: "https://ttsgw.world.waze.com/TTSGateway/Text2SpeechServlet",
            report_problem_url: "https://goo.gl/aAI4mu",
            default_locale: {
                tts: "en-US",
                locale: "en"
            },
            options: {
                version: 6,
                protocol: 2,
                sessionid: 12345654321,
                content_type: "audio/mpeg",
                type: "street",
                validate_data: "positive",
                skipCache: !0,
                lon: 0,
                lat: 0
            }
        },
        chat: {
            enable: !0,
            staffOnly: !1
        },
        segments: {
            allTypes: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
            minDisplayZoom: 2,
            zoomToRoadType: {
                0: [],
                1: [],
                2: [2, 3, 4, 6, 7, 15],
                3: [2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21],
                4: -1,
                5: -1,
                6: -1,
                7: -1,
                8: -1,
                9: -1,
                10: -1
            }
        },
        speed_limit: {
            enable: !0
        },
        update_requests: {
            shownByDefault: !1
        },
        place_updates: {
            shownByDefault: !1,
            focusZoom: 6
        },
        problems: {
            maxDetailsZoom: 7,
            minDetailsZoom: 5
        },
        houseNumbers: {
            allowEditing: !0,
            minEditZoom: 6
        },
        restrictions: {
            allowEditing: !0
        },
        closures: {
            shownByDefault: !0,
            minDisplayZoom: 0
        },
        cameras: {
            minDisplayZoom: 3,
            minDragZoom: 3,
            shownByDefault: !1
        },
        editable_areas: {
            minDisplayZoom: 0
        },
        user_drive: {
            gutterMinDisplayZoom: 6,
            arrowsMinDisplayZoom: 5,
            instructionsMinDisplayZoom: 5,
            weightMinDisplayZoom: 5,
            initialZoom: 7
        },
        user_editing_enabled: !0,
        big_junctions: {
            shownByDefault: !0,
            minDisplayZoom: 2,
            minRank: 6,
            enable: !0
        },
        venues: {
            shownByDefault: !1,
            image_bucket_url: "https://venue-image.waze.com/",
            zoomToSize: {
                0: 1,
                1: 2,
                2: 3,
                3: 3,
                4: 3,
                5: 4,
                6: 4,
                7: 4,
                8: 4,
                9: 4,
                10: 4
            },
            categories: ["CAR_SERVICES", "TRANSPORTATION", "PROFESSIONAL_AND_PUBLIC", "SHOPPING_AND_SERVICES", "FOOD_AND_DRINK", "CULTURE_AND_ENTERTAINEMENT", "OTHER", "LODGING", "OUTDOORS", "NATURAL_FEATURES", "PARKING_LOT"],
            subcategories: {
                CAR_SERVICES: ["GAS_STATION", "GARAGE_AUTOMOTIVE_SHOP", "CAR_WASH", "CHARGING_STATION"],
                PARKING_LOT: [],
                TRANSPORTATION: ["AIRPORT", "BUS_STATION", "FERRY_PIER", "SEAPORT_MARINA_HARBOR", "SUBWAY_STATION", "TRAIN_STATION", "BRIDGE", "TUNNEL", "TAXI_STATION", "JUNCTION_INTERCHANGE"],
                PROFESSIONAL_AND_PUBLIC: ["COLLEGE_UNIVERSITY", "SCHOOL", "CONVENTIONS_EVENT_CENTER", "GOVERNMENT", "LIBRARY", "CITY_HALL", "ORGANIZATION_OR_ASSOCIATION", "PRISON_CORRECTIONAL_FACILITY", "COURTHOUSE", "CEMETERY", "FIRE_DEPARTMENT", "POLICE_STATION", "MILITARY", "HOSPITAL_MEDICAL_CARE", "OFFICES", "POST_OFFICE", "RELIGIOUS_CENTER", "KINDERGARDEN", "FACTORY_INDUSTRIAL", "EMBASSY_CONSULATE", "INFORMATION_POINT"],
                SHOPPING_AND_SERVICES: ["ARTS_AND_CRAFTS", "BANK_FINANCIAL", "SPORTING_GOODS", "BOOKSTORE", "PHOTOGRAPHY", "CAR_DEALERSHIP", "FASHION_AND_CLOTHING", "CONVENIENCE_STORE", "PERSONAL_CARE", "DEPARTMENT_STORE", "PHARMACY", "ELECTRONICS", "FLOWERS", "FURNITURE_HOME_STORE", "GIFTS", "GYM_FITNESS", "SWIMMING_POOL", "HARDWARE_STORE", "MARKET", "SUPERMARKET_GROCERY", "JEWELRY", "LAUNDRY_DRY_CLEAN", "SHOPPING_CENTER", "MUSIC_STORE", "PET_STORE_VETERINARIAN_SERVICES", "TOY_STORE", "TRAVEL_AGENCY", "ATM", "CURRENCY_EXCHANGE", "CAR_RENTAL"],
                FOOD_AND_DRINK: ["RESTAURANT", "BAKERY", "DESSERT", "CAFE", "FAST_FOOD", "FOOD_COURT", "BAR", "ICE_CREAM"],
                CULTURE_AND_ENTERTAINEMENT: ["ART_GALLERY", "CASINO", "CLUB", "TOURIST_ATTRACTION_HISTORIC_SITE", "MOVIE_THEATER", "MUSEUM", "MUSIC_VENUE", "PERFORMING_ARTS_VENUE", "GAME_CLUB", "STADIUM_ARENA", "THEME_PARK", "ZOO_AQUARIUM", "RACING_TRACK", "THEATER"],
                OTHER: ["CONSTRUCTION_SITE"],
                LODGING: ["HOTEL", "HOSTEL", "CAMPING_TRAILER_PARK", "COTTAGE_CABIN", "BED_AND_BREAKFAST"],
                OUTDOORS: ["PARK", "PLAYGROUND", "BEACH", "SPORTS_COURT", "GOLF_COURSE", "PLAZA", "PROMENADE", "POOL", "SCENIC_LOOKOUT_VIEWPOINT", "SKI_AREA"],
                NATURAL_FEATURES: ["ISLAND", "SEA_LAKE_POOL", "RIVER_STREAM", "FOREST_GROVE", "FARM", "CANAL", "SWAMP_MARSH", "DAM"]
            }
        },
        marx: {
            server: "https://marx.waze.com:443"
        },
        openlayers: {
            img_path: "images/"
        },
        log: {
            enable: !1
        },
        user_profile: {
            enable: !0,
            url: "https://www.waze.com/user/editor/"
        },
        area_manager_widget: {
            enable: !1
        },
        livemap: {
            zoom_offset: 12,
            max_zoom: 17,
            url: "/livemap"
        },
        advanced_tools: {
            minRank: 3
        },
        deployments: {
            il: {
                api_base: "/il-Descartes-live/app",
                search: {
                    server: "/il-SearchServer/mozi"
                }
            },
            usa: {
                api_base: "/Descartes-live/app",
                search: {
                    server: "/SearchServer/mozi"
                }
            },
            row: {
                api_base: "/row-Descartes-live/app",
                search: {
                    server: "/row-SearchServer/mozi"
                }
            }
        }
    }
}
, function(e, t) {
    e.exports = {
        options: {
            alpha: !0,
            buffer: 1,
            tileWidth: 512,
            tileHeight: 512,
            gutter: 15,
            transitionEffect: "resize",
            displayInLayerSwitcher: !0,
            draggable: !1
        },
        wms: {
            servers: ["/wms"],
            file_name: "wme",
            params: {
                projection: "EPSG:900913",
                format: "image/png",
                transparent: !0
            }
        },
        mapnik: {
            servers: [""],
            file_name: "tiles/${z}/${x}/${y}.png"
        },
        roads: {
            uniqueName: "roads",
            visible: !0,
            type: "mapnik",
            options: {
                isBaseLayer: !1,
                zoomOffset: 12,
                draggable: !0,
                gutter: 0
            }
        },
        gps_points: {
            uniqueName: "gps_points",
            visible: !1,
            type: "mapnik",
            options: {
                isBaseLayer: !1,
                zoomOffset: 12,
                opacity: 1,
                draggable: !0,
                gutter: 0
            },
            params: {
                clientLayer: "gps_points"
            }
        },
        deployments: {
            usa: {
                wms: {
                    servers: ["http://etiles5.waze.com/wms", "http://etiles6.waze.com/wms", "http://etiles7.waze.com/wms", "http://etiles8.waze.com/wms"]
                },
                mapnik: {
                    servers: ["https://editor-tiles1.waze.com", "https://editor-tiles2.waze.com", "https://editor-tiles3.waze.com", "https://editor-tiles4.waze.com"]
                }
            },
            row: {
                wms: {
                    servers: ["http://etiles1.waze.com/wms", "http://etiles2.waze.com/wms", "http://etiles3.waze.com/wms", "http://etiles4.waze.com/wms"]
                },
                mapnik: {
                    servers: ["https://world-editor-tiles1.waze.com", "https://world-editor-tiles2.waze.com", "https://world-editor-tiles3.waze.com", "https://world-editor-tiles4.waze.com"]
                }
            },
            il: {
                wms: {
                    servers: ["http://etiles1.maps.waze.co.il/wms", "http://etiles2.maps.waze.co.il/wms", "http://etiles3.maps.waze.co.il/wms", "http://etiles4.maps.waze.co.il/wms"]
                },
                mapnik: {
                    servers: ["https://il-editor-tiles1.waze.com", "https://il-editor-tiles2.waze.com", "https://il-editor-tiles3.waze.com", "https://il-editor-tiles4.waze.com"]
                }
            }
        }
    }
}
, , , function(e, t, i) {
    i(947),
    i(943),
    i(964),
    i(976),
    i(977),
    i(974),
    i(975),
    i(978),
    i(953),
    i(963),
    i(955),
    i(952),
    i(966),
    i(950),
    i(959),
    i(957),
    i(946),
    i(945),
    i(949),
    i(961),
    i(951),
    i(954),
    i(956),
    i(948),
    i(962),
    i(958),
    i(968),
    i(967),
    i(969),
    i(970),
    i(971),
    i(972),
    i(973),
    i(965),
    i(944),
    i(940),
    i(942),
    i(941),
    i(979),
    i(960)
}
, function(e, t, i) {
    function n(e) {
        return i(s(e))
    }
    function s(e) {
        return r[e] || function() {
            throw new Error("Cannot find module '" + e + "'.")
        }()
    }
    var r = {
        "./camera2false.png": 991,
        "./camera2true.png": 992,
        "./camera3false.png": 993,
        "./camera3true.png": 994,
        "./camera4false.png": 995,
        "./camera4true.png": 996
    };
    n.keys = function() {
        return Object.keys(r)
    }
    ,
    n.resolve = s,
    e.exports = n,
    n.id = 1027
}
, function(e, t, i) {
    function n(e) {
        return i(s(e))
    }
    function s(e) {
        return r[e] || function() {
            throw new Error("Cannot find module '" + e + "'.")
        }()
    }
    var r = {
        "./big_direction_end.png": 997,
        "./big_direction_exit_left.png": 998,
        "./big_direction_exit_right.png": 999,
        "./big_direction_forward.png": 1e3,
        "./big_direction_left.png": 1001,
        "./big_direction_right.png": 1002,
        "./big_direction_u.png": 1003,
        "./big_directions_roundabout.png": 1004,
        "./big_directions_roundabout_UK.png": 1005,
        "./big_directions_roundabout_UK_l.png": 1006,
        "./big_directions_roundabout_UK_s.png": 1007,
        "./big_directions_roundabout_l.png": 1008,
        "./big_directions_roundabout_r.png": 1009,
        "./big_directions_roundabout_r_UK.png": 1010,
        "./big_directions_roundabout_s.png": 1011,
        "./big_directions_roundabout_u.png": 1012,
        "./big_directions_roundabout_u_UK.png": 1013,
        "./unknown.png": 1014
    };
    n.keys = function() {
        return Object.keys(r)
    }
    ,
    n.resolve = s,
    e.exports = n,
    n.id = 1028
}
, function(e, t, i) {
    function n(e) {
        return i(s(e))
    }
    function s(e) {
        return r[e] || function() {
            throw new Error("Cannot find module '" + e + "'.")
        }()
    }
    var r = {
        "./Waze/Modules/BigJunction/templates/path_item.hamlc": 309,
        "./Waze/Modules/BigJunction/templates/validation_errors.hamlc": 310,
        "./Waze/Modules/Cities/templates/feature_editor.hamlc": 311,
        "./Waze/Modules/Closures/templates/edit.hamlc": 312,
        "./Waze/Modules/Closures/templates/item.hamlc": 313,
        "./Waze/Modules/Closures/templates/layout.hamlc": 314,
        "./Waze/Modules/Closures/templates/list.hamlc": 315,
        "./Waze/Modules/Comments/templates/feature_editor.hamlc": 316,
        "./Waze/Modules/Comments/templates/name_editor.hamlc": 317,
        "./Waze/Modules/Conversation/templates/item.hamlc": 318,
        "./Waze/Modules/Conversation/templates/list.hamlc": 319,
        "./Waze/Modules/Feed/templates/feed.hamlc": 320,
        "./Waze/Modules/Feed/templates/feed_group.hamlc": 321,
        "./Waze/Modules/Feed/templates/issue_item.hamlc": 322,
        "./Waze/Modules/Feed/templates/message_item.hamlc": 323,
        "./Waze/Modules/Feed/templates/notification_detail.hamlc": 324,
        "./Waze/Modules/Feed/templates/notification_item.hamlc": 325,
        "./Waze/Modules/GeoLocation/templates/pan_button.hamlc": 326,
        "./Waze/Modules/MTE/templates/contributors/item.hamlc": 327,
        "./Waze/Modules/MTE/templates/contributors/list.hamlc": 328,
        "./Waze/Modules/MTE/templates/item_edit/closures.hamlc": 329,
        "./Waze/Modules/MTE/templates/item_edit/loading.hamlc": 330,
        "./Waze/Modules/MTE/templates/item_edit/names.hamlc": 331,
        "./Waze/Modules/MTE/templates/mte_edit_view.hamlc": 332,
        "./Waze/Modules/MTE/templates/mte_item_view.hamlc": 333,
        "./Waze/Modules/MTE/templates/mte_list.hamlc": 334,
        "./Waze/Modules/MTE/templates/sidebar.hamlc": 335,
        "./Waze/Modules/MTE/templates/toolbar_buttons.hamlc": 336,
        "./Waze/Modules/MTE/templates/topbar.hamlc": 337,
        "./Waze/Modules/MapControls/templates/mouse_position.hamlc": 338,
        "./Waze/Modules/MapControls/templates/permalink.hamlc": 339,
        "./Waze/Modules/Problems/templates/_navigation.hamlc": 340,
        "./Waze/Modules/Problems/templates/closure_description.hamlc": 341,
        "./Waze/Modules/Problems/templates/edit.hamlc": 342,
        "./Waze/Modules/Save/templates/error_item.hamlc": 343,
        "./Waze/Modules/Save/templates/error_list.hamlc": 344,
        "./Waze/Modules/Save/templates/success.hamlc": 345,
        "./Waze/Modules/Toolbar/templates/layer-switcher-checkbox.hamlc": 346,
        "./Waze/Modules/Toolbar/templates/layer-switcher-filter.hamlc": 347,
        "./Waze/Modules/Toolbar/templates/layer-switcher-list.hamlc": 348,
        "./Waze/Modules/Toolbar/templates/layer-switcher-venues.hamlc": 349,
        "./Waze/Modules/Toolbar/templates/layer-switcher.hamlc": 350,
        "./Waze/Modules/Toolbar/templates/search.hamlc": 351,
        "./Waze/Modules/Toolbar/templates/toolbar-item-group.hamlc": 352,
        "./Waze/Modules/Toolbar/templates/toolbar-item.hamlc": 353,
        "./Waze/Modules/Toolbar/templates/toolbar.hamlc": 354,
        "./Waze/Modules/Topbar/templates/area-managers/item.hamlc": 355,
        "./Waze/Modules/Topbar/templates/area-managers/layout.hamlc": 356,
        "./Waze/Modules/Topbar/templates/area-managers/main-list.hamlc": 357,
        "./Waze/Modules/Topbar/templates/area-managers/rest-list.hamlc": 358,
        "./Waze/Modules/Topbar/templates/layout.hamlc": 359,
        "./Waze/Modules/Topbar/templates/loading-indicator.hamlc": 360,
        "./Waze/Modules/Topbar/templates/location-info.hamlc": 361,
        "./templates/add_update_details.hamlc": 362,
        "./templates/additional_details.hamlc": 363,
        "./templates/address/edit.hamlc": 364,
        "./templates/archive-panel.hamlc": 365,
        "./templates/archive-sessions.hamlc": 366,
        "./templates/big-junction-edit.hamlc": 367,
        "./templates/camera-edit.hamlc": 368,
        "./templates/chat.hamlc": 369,
        "./templates/chat_intro_tip.hamlc": 370,
        "./templates/chat_message.hamlc": 371,
        "./templates/chat_user.hamlc": 372,
        "./templates/chrome_autofill_off.hamlc": 373,
        "./templates/editable-areas.hamlc": 374,
        "./templates/house-number.hamlc": 375,
        "./templates/house-numbers-lightbox.hamlc": 376,
        "./templates/keyboard_shortcuts/list.hamlc": 377,
        "./templates/keyboard_shortcuts/modal.hamlc": 378,
        "./templates/location-message.hamlc": 379,
        "./templates/location-switcher.hamlc": 380,
        "./templates/login/login-form.hamlc": 381,
        "./templates/login/sandbox-message.hamlc": 382,
        "./templates/login/welcome-popup.hamlc": 383,
        "./templates/map.hamlc": 384,
        "./templates/node-edit.hamlc": 385,
        "./templates/opening_hours/add.hamlc": 386,
        "./templates/opening_hours/item.hamlc": 387,
        "./templates/opening_hours/layout.hamlc": 388,
        "./templates/place_updates/actions.hamlc": 389,
        "./templates/place_updates/add_details.hamlc": 390,
        "./templates/place_updates/add_image.hamlc": 391,
        "./templates/place_updates/add_venue.hamlc": 392,
        "./templates/place_updates/changed_field.hamlc": 393,
        "./templates/place_updates/changed_field_item.hamlc": 394,
        "./templates/place_updates/changed_field_parking_lot.hamlc": 395,
        "./templates/place_updates/delete_venue.hamlc": 396,
        "./templates/place_updates/flag.hamlc": 397,
        "./templates/place_updates/image.hamlc": 398,
        "./templates/place_updates/image_dialog.hamlc": 399,
        "./templates/place_updates/item.hamlc": 400,
        "./templates/place_updates/layout.hamlc": 401,
        "./templates/place_updates/panel_header.hamlc": 402,
        "./templates/place_updates/place_details.hamlc": 403,
        "./templates/place_updates/update_venue.hamlc": 404,
        "./templates/prefs-panel.hamlc": 405,
        "./templates/restriction/edit.hamlc": 406,
        "./templates/restriction/item.hamlc": 407,
        "./templates/restriction/layout.hamlc": 408,
        "./templates/restriction/list.hamlc": 409,
        "./templates/restriction/toggle-checkboxes.hamlc": 410,
        "./templates/segment/address-edit.hamlc": 411,
        "./templates/segment/alt-streets-edit.hamlc": 412,
        "./templates/segment/average-speed-camera.hamlc": 413,
        "./templates/segment/edit-panel.hamlc": 414,
        "./templates/segment/flag-attribute.hamlc": 415,
        "./templates/segment/routing.hamlc": 416,
        "./templates/segment/speed-limit.hamlc": 417,
        "./templates/segment/tts-playback-popover.hamlc": 418,
        "./templates/segment/tts-playback.hamlc": 419,
        "./templates/session-expired.hamlc": 420,
        "./templates/sidebar/advanced-tools.hamlc": 421,
        "./templates/sidebar/links.hamlc": 422,
        "./templates/sidebar/sidebar.hamlc": 423,
        "./templates/sidebar/user-details.hamlc": 424,
        "./templates/sidebar/user-info.hamlc": 425,
        "./templates/sidebar/user-permissions-tooltip.hamlc": 426,
        "./templates/sidebar/user-sandbox.hamlc": 427,
        "./templates/snapshot-message.hamlc": 428,
        "./templates/snapshot-toggler.hamlc": 429,
        "./templates/snapshot_message.hamlc": 430,
        "./templates/tips/watch-tutorial.hamlc": 431,
        "./templates/tutorial-lightbox.hamlc": 432,
        "./templates/user-greeting.hamlc": 433,
        "./templates/util/day-checkboxes.hamlc": 434,
        "./templates/venue/alias.hamlc": 435,
        "./templates/venue/aliases-layout.hamlc": 436,
        "./templates/venue/category-tag.hamlc": 437,
        "./templates/venue/external-provider/item.hamlc": 438,
        "./templates/venue/external-provider/list.hamlc": 439,
        "./templates/venue/suggested-categories.hamlc": 440,
        "./templates/venue/venue-categories.hamlc": 441,
        "./templates/venue/venue-edit-general.hamlc": 442,
        "./templates/venue/venue-edit-more-info-contact.hamlc": 443,
        "./templates/venue/venue-edit-more-info-parking-lot.hamlc": 444,
        "./templates/venue/venue-edit-more-info-services.hamlc": 445,
        "./templates/venue/venue-edit-more-info.hamlc": 446,
        "./templates/venue/venue-edit.hamlc": 447
    };
    n.keys = function() {
        return Object.keys(r)
    }
    ,
    n.resolve = s,
    e.exports = n,
    n.id = 1029
}
, function(e, t, i) {
    var n, s = i(3), r = i(7), o = i(70), a = i(104);
    n = OpenLayers.Class(s, {
        segment: null ,
        attributes: null ,
        initialize: function(e, t, i) {
            s.prototype.initialize.apply(this, [i]),
            this.segment = e,
            this.attributes = t
        },
        destroy: function() {
            this.segment = null ,
            s.prototype.destroy.apply(this)
        },
        doAction: function() {
            var e, t, i, n, s = this.segment.getAddress();
            return !(!s.street || s.street.isEmpty) && (i = new o(s.state,s.country,this.attributes.cityName,this.attributes.emptyCity),
            this.doSubAction(i),
            e = i.city,
            n = new a(this.attributes.streetName,e,this.attributes.emptyStreet),
            this.doSubAction(n),
            t = n.street,
            !this.segment.attributes.streetIDs.contains(t.getID()) && void this.doSubAction(new r(this.segment,{
                streetIDs: this.segment.attributes.streetIDs.concat(t.getID())
            })))
        },
        CLASS_NAME: "Waze.Model.AddAlternateStreet"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(3), r = i(5), o = i(70), a = i(104), l = (i(40),
    i(2));
    n = OpenLayers.Class(s, {
        landmark: null ,
        attributes: null ,
        initialGeometry: null ,
        initialize: function(e, t) {
            s.prototype.initialize.apply(this, [t]),
            this.landmark = e
        },
        destroy: function() {
            this.landmark = null ,
            s.prototype.destroy.apply(this)
        },
        doAction: function() {
            var e, t, i, n = null , s = this.landmark.attributes.geometry;
            return !(!this.landmark.isPoint() && !this.landmark.is2D() || (this.initialGeometry = this.landmark.geometry.clone(),
            this.landmark.attributes.geometry = null ,
            this.attributes = {},
            $.extend(!0, this.attributes, this.landmark.attributes),
            this.landmark.attributes.geometry = s,
            this.landmark.getID() || this.landmark.setID(this.model.venues.generateUniqueID()),
            this.landmark.state = OpenLayers.State.INSERT,
            this.model.venues.put(this.landmark),
            this.model.segments.topCityID && (n = this.model.cities.get(this.model.segments.topCityID)),
            null === n && null !== this.model.countries.top && (t = new o(this.model.states.top,this.model.countries.top,"",!0),
            this.doSubAction(t),
            n = t.city),
            null !== n && (e = new a("",n,!0),
            this.doSubAction(e),
            i = e.street,
            this.attributes.streetID = i.getID(),
            this.landmark.attributes.streetID = i.getID()),
            0))
        },
        undoAction: function() {
            s.prototype.undoAction.apply(this),
            this.model.venues.remove(this.landmark)
        },
        redoAction: function() {
            this.model.venues.put(this.landmark),
            s.prototype.redoAction.apply(this)
        },
        serialize: function() {
            var e = this.attributes;
            e.id = this.landmark.getID(),
            e.geometry = this.initialGeometry;
            var t = {
                _objectType: l.VENUE,
                action: r.TYPE.ADD,
                attributes: e
            };
            return t
        },
        getBounds: function() {
            return this.initialGeometry.getBounds().clone()
        },
        CLASS_NAME: "Waze.Action.AddLandmark"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = (i(5),
    i(3)), r = i(295), o = i(72), a = i(103), l = i(47), u = i(53), c = i(25), d = i(27), h = i(38), p = i(7), g = (i(2),
    i(20));
    n = OpenLayers.Class(s, {
        ELLIPSE_PRECISION: .17453292519943295,
        ellipse: null ,
        containedSegments: null ,
        roundaboutSegments: null ,
        isLeftHand: !1,
        initialize: function(e, t) {
            s.prototype.initialize.apply(this, [t]),
            this.ellipse = e
        },
        destroy: function() {
            this.ellipse = null ,
            s.prototype.destroy.apply(this)
        },
        doAction: function() {
            var e = this.getIntersections();
            return !e.isEmpty() && (this.determineDrivingDirection(e),
            this.deleteContainedSegments(),
            this.modifyIntersectingSegments(e),
            this.addRoundaboutSegments(e),
            void this.addRoundabout())
        },
        determineDrivingDirection: function(e) {
            var t = e[0][0].segments[0]
              , i = t.getAddress();
            null === i.street ? this.isLeftHand = this.model.isLeftHand : this.isLeftHand = i.country.leftHandTraffic
        },
        addRoundabout: function() {
            var e = _(this.roundaboutSegments).invoke("getID")
              , t = new h(null ,this.model.junctions,{
                segIDs: e,
                type: "RA"
            });
            this.doSubAction(t);
            var i = t.object;
            this.roundaboutSegments.forEach(function(e) {
                this.doSubAction(new p(e,{
                    junctionID: i.getID()
                }))
            }, this)
        },
        deleteContainedSegments: function() {
            this.containedSegments.forEach(function(e) {
                this.doSubAction(new d(e))
            }, this)
        },
        addRoundaboutSegments: function(e) {
            var t, i, n, s, r, o, a, u;
            for (this.roundaboutSegments = [],
            e = e.reduce(function(e, t) {
                return e.concat(t)
            }),
            e.sort(function(e, t) {
                return e.angle - t.angle
            }),
            e.push({
                angle: e.first().angle,
                point: e.first().point,
                segments: []
            }),
            t = 0; t < e.length - 1; t++) {
                for (n = e[t].point,
                s = e[t + 1].point,
                a = new OpenLayers.Geometry.LineString,
                u = new g({
                    geometry: a
                }),
                r = e[t].angle,
                o = e[t + 1].angle,
                t === e.length - 2 && (o += 2 * Math.PI),
                a.addPoint(n.clone()),
                i = r + this.ELLIPSE_PRECISION; i < o; i += this.ELLIPSE_PRECISION)
                    a.addPoint(new OpenLayers.Geometry.Point(this.ellipse.center.x + this.ellipse.rx * Math.cos(i),this.ellipse.center.y + this.ellipse.ry * Math.sin(i)));
                i > o && a.addPoint(s.clone()),
                this.isLeftHand && (u.attributes.fwdDirection = !1,
                u.attributes.revDirection = !0),
                this.doSubAction(new l(u)),
                this.roundaboutSegments.push(u)
            }
            e.pop(),
            this.addNodes(e, this.roundaboutSegments)
        },
        addNodes: function(e, t) {
            var i, n;
            e.forEach(function(e, s) {
                i = e.segments.clone(),
                i.push(t[s]),
                i.push(t[(t.length + s - 1) % t.length]),
                e.node ? i.forEach(function(t) {
                    t.isConnectedToNode(e.node) || this.doSubAction(new c(e.node,t))
                }, this) : (n = new a(e.point,i),
                this.doSubAction(n),
                e.node = n.node),
                this.isLeftHand ? (this.openConnection(i.first(), e.node, i.last()),
                this.openConnection(i[1], e.node, i.first()),
                this.openConnection(i[1], e.node, i.last())) : (this.openConnection(i.first(), e.node, i[1]),
                this.openConnection(i.last(), e.node, i.first()),
                this.openConnection(i.last(), e.node, i[1]))
            }, this)
        },
        openConnection: function(e, t, i) {
            t.isTurnAllowedBySegDirections(e, i) && this.doSubAction(new u(e.getID(),t,i.getID(),!0))
        },
        modifyIntersectingSegments: function(e) {
            e.forEach(function(e) {
                1 === e.length ? this.shortenSegment(e.first()) : this.splitSegment(e)
            }, this)
        },
        splitSegment: function(e) {
            var t = e.first().segments.first()
              , i = new o(t,{
                splitAtPoint: e.first().point,
                splittingPointIndex: e.first().index
            });
            this.doSubAction(i),
            e.first().node = i.splitNode,
            e.last().segments = [i.splits.last()],
            e.last().index = e.last().index - e.first().index,
            e.first().segments = [i.splits.first()],
            this.shortenSegment(e.last())
        },
        shortenSegment: function(e) {
            var t = e.segments.first()
              , i = t.geometry.clone();
            e.goingOut ? (t.geometry.components.splice(0, e.index + 1),
            t.geometry.addComponent(e.point.clone(), 0)) : (t.geometry.components.splice(e.index + 1),
            t.geometry.addComponent(e.point.clone())),
            this.doSubAction(new r(t,i,t.geometry))
        },
        getIntersections: function() {
            var e, t, i = this;
            return this.containedSegments = [],
            e = this.model.segments.getObjectArray(function(e) {
                return e.state !== OpenLayers.State.DELETE && e.geometry.bounds.intersectsBounds(i.ellipse.bounds)
            }),
            e.reduce(function(e, n) {
                return t = n.intersectionWithEllipse(i.ellipse.center, i.ellipse.rx, i.ellipse.ry),
                t instanceof Array ? 1 !== t.length && t.first().goingOut || (t.forEach(function(e) {
                    e.segments = [n]
                }),
                e.push(t)) : t && i.containedSegments.push(n),
                e
            }, [])
        },
        CLASS_NAME: "Waze.Action.CreateRoundabout"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(3), r = i(291), o = i(27), a = i(52), l = i(25), u = i(7), c = i(2), d = i(5);
    n = OpenLayers.Class(s, {
        node: null ,
        mergeNode: null ,
        initialize: function(e, t, i) {
            s.prototype.initialize.apply(this, [i]),
            this.node = e,
            this.mergeNode = t
        },
        destroy: function() {
            this.model.nodes.get(this.node.getID()) || this.node.destroy(),
            this.node = null ,
            this.mergeNode = null ,
            s.prototype.destroy.apply(this)
        },
        considerMerging: function() {
            return !(!this.mergeNode || !this.mergeNode.geometry.equals(this.node.geometry)) && this.node.attributes.segIDs.every(function(e) {
                var t = this.model.segments.get(e);
                return !this.mergeNode.isConnectedToSegment(t) || t.isSingular()
            }, this)
        },
        moveSegments: function() {
            this.node.attributes.segIDs.clone().forEach(function(e) {
                var t = this.model.segments.get(e);
                if (t.isSingular())
                    this.doSubAction(new o(t));
                else {
                    var i = t.getNodeAttribute(this.node)
                      , n = i + "Connections"
                      , s = _.clone(t.attributes[n])
                      , r = {};
                    this.doSubAction(new a(t,this.node,{
                        deleteNode: !1,
                        dontSerialize: !0
                    })),
                    this.doSubAction(new l(this.mergeNode,t,{
                        dontSerialize: !0
                    })),
                    r[n] = s,
                    this.doSubAction(new u(t,r))
                }
            }, this)
        },
        doAction: function() {
            return !!this.considerMerging() && (this.moveSegments(),
            void this.doSubAction(new r(this.node)))
        },
        undoAction: function() {
            s.prototype.undoAction.apply(this)
        },
        serialize: function() {
            var e = {
                sourceNodeID: this.node.getID(),
                sourceNodeVersion: this.node.attributes.version,
                destNodeID: this.mergeNode.getID(),
                destNodeVersion: this.node.attributes.version
            }
              , t = {
                _objectType: c.MERGED_NODE,
                action: d.TYPE.ADD,
                attributes: e
            };
            return t
        },
        CLASS_NAME: "Waze.Action.MergeNode"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(3), r = i(5), o = i(2), a = i(27), l = i(25), u = i(1033), c = i(72);
    n = OpenLayers.Class(s, {
        node: null ,
        oldGeometry: null ,
        newGeometry: null ,
        origSegGeometries: null ,
        changedNodeState: !1,
        changedSegStates: null ,
        changedSegments: null ,
        initialize: function(e, t, i, n, r) {
            s.prototype.initialize.apply(this, [r]),
            this.node = e,
            this.oldGeometry = e.geometry === t ? t.clone() : t,
            this.newGeometry = e.geometry === i ? i.clone() : i,
            this.origSegGeometries = n,
            this.changedSegStates = [],
            this.changedSegments = [],
            this.changedNodeState = !1
        },
        destroy: function() {
            this.oldGeometry.destroy(),
            this.oldGeometry = null ,
            this.newGeometry.destroy(),
            this.newGeometry = null ,
            this.node = null ,
            this.changedSegStates = null ,
            this.changedSegments = null ,
            Object.values(this.origSegGeometries).forEach(function(e) {
                e.destroy()
            }),
            s.prototype.destroy.apply(this)
        },
        moveConnectedSegments: function() {
            this.node.attributes.segIDs.forEach(function(e) {
                var t = this.model.segments.get(e);
                if (t) {
                    var i = !1;
                    if (t.attributes.fromNodeID === this.node.getID() && (i = !0,
                    t.geometry.components[0].x = this.newGeometry.x,
                    t.geometry.components[0].y = this.newGeometry.y,
                    t.geometry.components[0].clearBounds()),
                    t.attributes.toNodeID === this.node.getID()) {
                        i = !0;
                        var n = t.geometry.components.length - 1;
                        t.geometry.components[n].x = this.newGeometry.x,
                        t.geometry.components[n].y = this.newGeometry.y,
                        t.geometry.components[n].clearBounds()
                    }
                    t.geometry.calculateBounds(),
                    i && (t.state || (t.state = OpenLayers.State.UPDATE,
                    this.changedSegStates.push(e)),
                    this.changedSegments.push(t))
                }
            }, this),
            this.changedSegments.length > 0 && this.model.segments.changed(this.changedSegments),
            this.changedSegments.forEach(function(e) {
                e.isSingular() && this.doSubAction(new a(e,{
                    deleteNode: !1
                }))
            }, this)
        },
        moveNode: function() {
            this.node.geometry.x = this.newGeometry.x,
            this.node.geometry.y = this.newGeometry.y,
            this.node.geometry.calculateBounds(),
            this.node.bounds = this.node.geometry.bounds,
            this.node.state || (this.node.state = OpenLayers.State.UPDATE,
            this.changedNodeState = !0),
            this.model.nodes.changed(this.node)
        },
        handleTouchingFeatures: function() {
            var e;
            return !!this.snappedFeatures && (e = this.snappedFeatures,
            void (e.feature.type === o.SEGMENT ? "edge" === e.type || "vertex" === e.type ? this.doSubAction(new c(e.feature,{
                splitNode: this.node,
                splitAtPoint: e.point,
                splittingPointDistance: e.distance
            })) : "node" === e.type && this.doSubAction(new l(this.node,e.feature)) : e.feature.type === o.NODE && this.doSubAction(new u(this.node,e.feature))))
        },
        doAction: function() {
            this.moveNode(),
            this.moveConnectedSegments();
            var e = this;
            this.doSubAction(new r({
                serialize: function() {
                    var t = {};
                    t.id = e.node.getID(),
                    t.geometry = e.newGeometry;
                    var i = {
                        _objectType: o.NODE,
                        action: r.TYPE.UPDATE,
                        attributes: t
                    };
                    return i
                }
            })),
            this.handleTouchingFeatures()
        },
        undoAction: function() {
            s.prototype.undoAction.apply(this);
            for (var e = 0, t = this.changedSegments.length; e < t; e++) {
                var i = this.changedSegments[e]
                  , n = i.getID();
                if (i.attributes.toNodeID === this.node.getID()) {
                    var r = i.geometry.components.length - 1;
                    i.geometry.components[r].x = this.origSegGeometries[n].components[r].x,
                    i.geometry.components[r].y = this.origSegGeometries[n].components[r].y,
                    i.geometry.components[r].clearBounds()
                }
                i.attributes.fromNodeID === this.node.getID() && (i.geometry.components[0].x = this.origSegGeometries[n].components[0].x,
                i.geometry.components[0].y = this.origSegGeometries[n].components[0].y,
                i.geometry.components[0].clearBounds()),
                i.geometry.calculateBounds(),
                OpenLayers.Util.indexOf(this.changedSegStates, n) >= 0 && (i.state = null )
            }
            this.changedSegments.length > 0 && this.model.segments.changed(this.changedSegments),
            this.node.geometry.x = this.oldGeometry.x,
            this.node.geometry.y = this.oldGeometry.y,
            this.node.geometry.calculateBounds(),
            this.node.bounds = this.node.geometry.bounds,
            this.changedNodeState && (this.node.state = null ),
            this.model.nodes.changed(this.node)
        },
        redoAction: function() {
            this.node.geometry.x = this.newGeometry.x,
            this.node.geometry.y = this.newGeometry.y,
            this.node.geometry.calculateBounds(),
            this.node.bounds = this.node.geometry.bounds,
            this.changedNodeState && (this.node.state = OpenLayers.State.UPDATE),
            this.model.nodes.changed(this.node);
            for (var e = 0, t = this.changedSegments.length; e < t; e++) {
                var i = this.changedSegments[e];
                if (i.attributes.fromNodeID === this.node.getID() && (i.geometry.components[0].x = this.newGeometry.x,
                i.geometry.components[0].y = this.newGeometry.y,
                i.geometry.components[0].clearBounds()),
                i.attributes.toNodeID === this.node.getID()) {
                    var n = i.geometry.components.length - 1;
                    i.geometry.components[n].x = this.newGeometry.x,
                    i.geometry.components[n].y = this.newGeometry.y,
                    i.geometry.components[n].clearBounds()
                }
                i.geometry.calculateBounds(),
                OpenLayers.Util.indexOf(this.changedSegStates, i.getID()) >= 0 && (i.state = OpenLayers.State.UPDATE)
            }
            this.changedSegments.length > 0 && this.model.segments.changed(this.changedSegments),
            s.prototype.redoAction.apply(this)
        },
        getBounds: function() {
            var e = s.prototype.getBounds.apply(this, arguments) || new OpenLayers.Bounds
              , t = Object.values(this.origSegGeometries);
            return t.forEach(function(t) {
                e.extend(t.getBounds())
            }),
            e
        },
        CLASS_NAME: "Waze.Action.MoveNode"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(303), r = i(6), o = i(8);
    n = OpenLayers.Class(s, {
        root: null ,
        currentContainer: null ,
        previousContainer: null ,
        problemUpdates: null ,
        processedProblems: !1,
        traversalOrder: {
            _default: s.Order.PRE,
            "Waze.Action.DeleteNode": s.Order.POST,
            "Waze.Action.DeleteSegment": s.Order.POST,
            "Waze.Action.ModifyConnection": s.Order.POST,
            "Waze.Action.AddLandmark": s.Order.POST
        },
        initialize: function() {
            this.currentContainer = {},
            this.currentContainer._subActions = [],
            this.problemUpdates = {},
            this.root = this.currentContainer,
            this.previousContainers = []
        },
        _default: function(e) {
            this.addAction(e)
        },
        beforeEnter: function(e) {
            if (!e.dontSerialize) {
                var t = {};
                this.previousContainers.push(this.currentContainer),
                this.currentContainer._subActions.push(t),
                this.currentContainer = t,
                t.name = e.CLASS_NAME.split(".").last(),
                t._subActions = []
            }
            return !e.dontSerialize
        },
        afterLeave: function(e) {
            e.dontSerialize || (this.currentContainer = this.previousContainers.pop())
        },
        getTraversalOrder: function(e) {
            var t = this.traversalOrder[e.CLASS_NAME];
            return r.defined(t) || (t = this.traversalOrder._default),
            t
        },
        addAction: function(e) {
            var t;
            e.dontSerialize || (t = e.serialize(),
            null !== t && (t instanceof Array ? (t.forEach(function(t) {
                this.serializeGeometries(e, t)
            }, this),
            this.currentContainer._subActions = this.currentContainer._subActions.concat(t)) : (this.serializeGeometries(e, t),
            this.currentContainer._subActions.push(t))))
        },
        serializeGeometries: function(e, t) {
            e.eachGeometryField(t.attributes, function(e, t, i) {
                t && (t = o.unproject(t.clone()),
                i[e] = o.toGeoJSON(t))
            })
        },
        getResult: function() {
            return this.root._subActions[0]
        },
        CLASS_NAME: "Waze.Action.Visitor.TreeSerializor"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(6), r = i(3);
    n = OpenLayers.Class({
        actions: null ,
        index: -1,
        model: null ,
        events: null ,
        _savingEnabled: !0,
        initialize: function(e, t) {
            OpenLayers.Util.extend(this, t),
            this.model = e,
            this.actions = [],
            this.events = new OpenLayers.Events(this)
        },
        add: function(e) {
            if ((e.undoSupported() || this.events.triggerEvent("beforeclearactions") !== !1) && this.events.triggerEvent("beforeaction", {
                action: e
            }) !== !1) {
                var t, i, n = this.unsavedActionsNum();
                if (e.undoSupported()) {
                    for (this.index++,
                    t = this.index,
                    i = this.actions.legnth; t < i; t++)
                        this.actions[t].destroy();
                    this.actions.splice(this.index, this.actions.length - this.index, e)
                } else {
                    for (t = 0,
                    i = this.actions.legnth; t < i; t++)
                        this.actions[t].destroy();
                    this.actions = [],
                    this.index = -1,
                    this.events.triggerEvent("afterclearactions", {
                        action: e
                    })
                }
                e.setModel(this.model),
                e.doAction() === !1 && (this.actions.pop(),
                this.index > -1 && this.index--),
                0 === n && this.events.triggerEvent("hasActions"),
                this.events.triggerEvent("afteraction", {
                    action: e
                })
            }
        },
        canUndo: function() {
            return this.index >= 0
        },
        canSave: function() {
            return this.canUndo() && this.isAllowedToSave()
        },
        canRedo: function() {
            return this.index < this.actions.length - 1
        },
        unsavedActionsNum: function() {
            return this.index + 1
        },
        undo: function() {
            return !!this.canUndo() && this.events.triggerEvent("beforeundoaction", {
                action: this.actions[this.index]
            }) !== !1 && (s.protect("undoing " + this.actions[this.index].CLASS_NAME, function() {
                this.actions[this.index].undoAction()
            }, this),
            this.index--,
            this.events.triggerEvent("afterundoaction", {
                action: this.actions[this.index]
            }),
            0 === this.unsavedActionsNum() && this.events.triggerEvent("noActions"),
            W.Report.generalAction("undo_clicked"),
            !0)
        },
        redo: function() {
            if (!this.canRedo())
                return !1;
            if (this.events.triggerEvent("beforeaction", {
                action: this.actions[this.index + 1]
            }) === !1)
                return !1;
            var e = this.unsavedActionsNum();
            return this.index++,
            s.protect("redoing " + this.actions[this.index].CLASS_NAME, function() {
                this.actions[this.index].redoAction()
            }, this),
            this.events.triggerEvent("afteraction", {
                action: this.actions[this.index]
            }),
            0 === e && this.events.triggerEvent("hasActions"),
            !0
        },
        clear: function() {
            for (var e = 0, t = this.actions.legnth; e < t; e++)
                this.actions[e].destroy();
            this.actions = [],
            this.index = -1,
            this.events.triggerEvent("afterclearactions"),
            this.events.triggerEvent("noActions")
        },
        getChangesBounds: function() {
            var e = new r;
            return e.subActions = this.actions.slice(0, this.index + 1),
            e.getBounds()
        },
        getActions: function() {
            return this.actions.slice(0, this.index + 1)
        },
        toggleSavingEnabled: function(e) {
            this._savingEnabled = e
        },
        isAllowedToSave: function() {
            return this.model.loginManager.isLoggedIn() && this._savingEnabled
        },
        CLASS_NAME: "Waze.ActionManager"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(12);
    n = OpenLayers.Class(s, {
        olEvents: null ,
        events: {
            "click .modal-close": "onClose"
        },
        shown: !1,
        initialize: function(e) {
            s.prototype.initialize.apply(this, arguments),
            this.olEvents = new OpenLayers.Events(this)
        },
        onClose: function(e) {
            e && e.preventDefault(),
            this.close(),
            this.destroy()
        },
        close: function() {
            this.shown = !1,
            this.olEvents.triggerEvent("closed")
        },
        render: function(e) {
            var t = this;
            return s.prototype.render.apply(this, arguments).done(function() {
                e.empty(),
                e.append(t.$el),
                t.shown = !0
            })
        },
        isShown: function() {
            return this.shown
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(18), r = (i(47),
    i(20),
    i(1077)), o = i(672), a = i(1078);
    n = OpenLayers.Class(OpenLayers.Control, s, {
        sidePanelView: null ,
        editableAreasListView: null ,
        layerView: null ,
        panelView: null ,
        editableAreasLayer: null ,
        model: null ,
        currentSessionList: null ,
        currentSessionData: null ,
        currentSession: null ,
        currentUser: null ,
        editableAreas: null ,
        initialize: function() {
            OpenLayers.Control.prototype.initialize.apply(this, arguments),
            this.sidePanelView = new r($("#sidepanel-drives")),
            this.editableAreasListView = new a($("#sidepanel-areas")),
            this.layerView = W.map.archiveLayer,
            this.editableAreasLayer = W.map.userLayer,
            this.layerView.pm = this,
            this.model = W.model,
            this._createEditableAreas()
        },
        _createEditableAreas: function() {
            var e = this.model.loginManager.user;
            this.editableAreas = e.areas.map(function(e, t) {
                var i = _.extend({}, e, {
                    num: t
                });
                return new Backbone.Model(i)
            })
        },
        registerListeners: function() {
            this.sidePanelView.events.on({
                shown: this.onSessionsListShown,
                sessionClicked: this.onSessionClicked,
                paginationLinkClicked: this.onPaginationLinkClicked,
                searchSubmitted: this.onSearchSubmitted,
                scope: this
            }),
            this.editableAreasListView.events.on({
                areaClicked: this.onAreaClicked,
                areasPaginationLinkClicked: this.onAreasPaginationLinkClicked,
                scope: this
            })
        },
        reset: function(e) {
            this.currentSessionList = null ,
            this.currentSessionData = null ,
            this.currentSession = null ,
            this.loadSessions(-1),
            this.sidePanelView.reset(),
            this.loadEditableAreas(),
            this.layerView.clearDrive()
        },
        activate: function() {
            OpenLayers.Control.prototype.activate.apply(this, arguments),
            this.registerListeners()
        },
        show: function() {
            this.sidePanelView.events.triggerEvent("shown")
        },
        onSessionsListShown: function(e) {
            null === this.currentSessionList && (this.loadSessions(0),
            W.Report.generalAction("userdrive_clicked"))
        },
        onPaginationLinkClicked: function(e) {
            this.loadSessions(e.index)
        },
        onAreasPaginationLinkClicked: function(e) {
            var t = this.editableAreasListView.ResultsPerPage
              , i = e.index
              , n = this.editableAreas.slice(i * t, (i + 1) * t);
            this.editableAreasListView.setEditableAreasPage(n)
        },
        loadEditableAreas: function() {
            var e = this.model.loginManager.user
              , t = [];
            e && (t = e.areas || []),
            this.editableAreasListView.setEditableAreas(t.length),
            this.onAreasPaginationLinkClicked({
                index: 0
            })
        },
        loadSessions: function(e) {
            var t = this;
            if (!this.model.loginManager.user || e === -1)
                return void this.sidePanelView.setSessions(0);
            this.sidePanelView.setLoading(!0);
            var i = {
                minDistance: 1e3,
                offset: e * this.sidePanelView.ResultsPerPage,
                count: this.sidePanelView.ResultsPerPage
            };
            null !== this.currentUser && (i.username = this.currentUser),
            this.model.archives.get(null , i).done(function(e) {
                var i = t.model.archives.additionalInfo.totalSessions;
                null === t.currentSessionList && t.sidePanelView.setSessions(i),
                t.sidePanelView.setSessionsPage(e, t.currentUser, t.model.loginManager.user.isStaff),
                t.currentSessionList = e
            }).always(function() {
                t.sidePanelView.setLoading(!1)
            }).fail(function() {
                t.sidePanelView.showError()
            })
        },
        onAreaClicked: function(e) {
            var t = this.model.loginManager.user.areas[e.areaIndex];
            this.editableAreasLayer.setVisibility(!0),
            this.ZoomToEditableArea(t)
        },
        ZoomToEditableArea: function(e) {
            var t = e.geometry.getBounds()
              , i = this.map.getZoomForExtent(t);
            this.map.setCenter(t.getCenterLonLat(), i)
        },
        onSessionClicked: function(e) {
            var t = this;
            $.when(this.model.archives.get(e.id), this.model.archiveSessions.get(e.id)).then(function(i, n) {
                t.currentSession = i,
                t.sidePanelView.setSelectedSession(e.id),
                $.isArray(n) && (n = n.first()),
                t.currentSessionData = n,
                null !== t.panelView && (t.panelView.off(),
                t.panelView.destroy()),
                t.panelView = new o({
                    model: n
                }),
                t.panelView.on("destroy", t.onPanelClosed, t),
                W.map.panelRegion.show(t.panelView),
                t.layerView.drawDrive(),
                t.layerView.zoomToDrive()
            })
        },
        onSearchSubmitted: function(e) {
            e.username ? this.currentUser = e.username : this.currentUser = null ,
            this.currentSessionList = null ,
            this.currentSessionData = null ,
            this.currentSession = null ,
            this.loadSessions(0),
            this.sidePanelView.reset(),
            this.loadEditableAreas(),
            this.layerView.clearDrive()
        },
        onPanelClosed: function() {
            this.sidePanelView.setSelectedSession(null ),
            this.currentSessionData = null ,
            this.currentSession = null ,
            this.layerView.clearDrive()
        },
        disable: function() {
            s.prototype.disable.apply(this, arguments),
            this.onPanelClosed()
        },
        CLASS_NAME: "Waze.Control.Archive"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(18), r = i(293), o = i(11), a = i(29), l = i(10), u = i(6);
    n = OpenLayers.Class(OpenLayers.Control, s, {
        model: null ,
        layer: null ,
        handler: null ,
        segments: null ,
        node: null ,
        bridgeFeature: null ,
        maxScaleForDisplay: 1e4,
        initialize: function(e) {
            OpenLayers.Control.prototype.initialize.apply(this, [e]),
            s.prototype.initialize.apply(this, [e]),
            this.model = W.model,
            this.layer = new OL.Layer.Markers("Bridge",{
                displayInLayerSwitcher: !1
            }),
            this.segments = []
        },
        destroy: function() {
            this.layer.clearMarkers(),
            this.unregisterModelEvents(),
            this.segments = null ,
            this.node = null
        },
        onAddClicked: function(e) {
            this.model.actionManager.add(new r(this.segments,this.node))
        },
        activate: function() {
            OL.Control.prototype.activate.apply(this),
            W.selectionManager.events.register("selectionchanged", this, this.onSelectionChanged),
            $(this.layer.div).on("click", ".add-bridge", $.proxy(this.onAddClicked, this))
        },
        deactivate: function() {
            W.selectionManager.events.unregister("selectionchanged", this, this.onSelectionChanged),
            this.unselect(),
            $(this.layer.div).off("click", ".add-bridge", $.proxy(this.onAddClicked, this)),
            OpenLayers.Control.prototype.deactivate.apply(this)
        },
        onSelectionChanged: function(e) {
            var t = e.selected || [];
            t || (t = []);
            var i = _(this.segments).invoke("getID");
            t = _(t).pluck("model");
            var n = _(t).invoke("getID")
              , s = !i.equals(n);
            s && (this.selectionValid(t) || this.segments.isEmpty() ? this.selectionValid(t) && this.segments.isEmpty() && this.registerModelEvents() : this.unregisterModelEvents(),
            this.segments = t,
            this.resetConnections())
        },
        selectionValid: function(e) {
            return !e.isEmpty() && 2 === e.length
        },
        unselect: function() {
            this.select({
                selected: []
            })
        },
        registerModelEvents: function(e) {
            this.model.segments.on(l.CHANGED, this.onSegmentsChanged, this),
            this.model.segments.on(l.REMOVED, this.onSegmentsRemoved, this),
            this.model.nodes.on(l.CHANGED, this.onNodesChanged, this)
        },
        unregisterModelEvents: function() {
            this.model.segments.off(l.CHANGED, this.onSegmentsChanged, this),
            this.model.segments.off(l.REMOVED, this.onSegmentsRemoved, this),
            this.model.nodes.off(l.CHANGED, this.onNodesChanged, this)
        },
        onSegmentsChanged: function(e) {
            null !== this.segment && OpenLayers.Util.indexOf(e, this.segment) >= 0 && this.resetConnections()
        },
        onSegmentsRemoved: function(e) {
            null !== this.segment && OpenLayers.Util.indexOf(e, this.segment) >= 0 && this.unselect()
        },
        onNodesChanged: function(e) {
            if (this.segment) {
                var t = this.model.nodes.get(this.segment.attributes.fromNodeID)
                  , i = this.model.nodes.get(this.segment.attributes.toNodeID);
                (t && OpenLayers.Util.indexOf(e, t) >= 0 || i && OpenLayers.Util.indexOf(e, i) >= 0) && this.resetConnections()
            }
        },
        destroyConnections: function() {
            this.layer.clearMarkers(),
            this.bridgeFeature = null
        },
        resetConnections: function() {
            if (this.destroyConnections(),
            !(this.segments.isEmpty() || 2 !== this.segments.length || this.layer.map.getScale() > this.maxScaleForDisplay)) {
                var e = [this.segments[0].attributes.fromNodeID, this.segments[0].attributes.toNodeID].intersect([this.segments[1].attributes.fromNodeID, this.segments[1].attributes.toNodeID]).filter(u.defined).first();
                if (this.node = this.model.nodes.get(e),
                this.node && this.node.areSegmentsBridgable(this.segments)) {
                    var t = this.segments.every(function(e) {
                        return e.isAllowed(a.Segments.EDIT_GEOMETRY)
                    });
                    if (t) {
                        var i = this.node.geometry.clone();
                        this.bridgeFeature = new OL.Marker(new OL.LonLat(i.x,i.y),new o("add-bridge")),
                        this.layer.addMarker(this.bridgeFeature)
                    }
                }
            }
        },
        setMap: function() {
            OL.Control.prototype.setMap.apply(this, arguments),
            this.map.addLayer(this.layer)
        },
        CLASS_NAME: "Waze.Control.BridgeCreator"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(18), r = i(297), o = i(20);
    n = OpenLayers.Class(OpenLayers.Control.DrawFeature, s, {
        keyHandler: null ,
        snapControl: null ,
        snappedFrom: null ,
        editingMediator: null ,
        targetLayer: null ,
        type: OL.Control.TYPE_TOGGLE,
        drawingAccuracy: 2,
        keyUp: function(e) {
            this.active && 0 === e.charCode && e.keyCode === OpenLayers.Event.KEY_ESC && this.handler.cancel()
        },
        handleShortcut: function(e) {
            this.isEnabled() && this.activate()
        },
        isEnabled: function() {
            return !this.editingMediator.get("drawing") && this.editingMediator.get("editingEnabled")
        },
        featureCancelled: function(e) {},
        onDrawCancel: function(e) {
            this.deactivate(),
            this.featureCancelled(e)
        },
        createFeature: function(e) {
            return new o({
                geometry: e
            })
        },
        drawFeature: function(e) {
            var t = this.createFeature(e)
              , i = this.layer.events.triggerEvent("sketchcomplete", {
                feature: t
            });
            i !== !1 && ("OpenLayers.Geometry.LineString" === t.geometry.CLASS_NAME && (t.geometry = t.geometry.simplify(this.drawingAccuracy * this.map.getResolution())),
            t.state = OpenLayers.State.INSERT,
            this.enableSnapping ? (this.snappedFrom && (this.snappedFrom.feature = this.snappedFrom.feature.model,
            this.snappedFrom.feature && this.snappedFrom.feature.setSnapped(!1)),
            this.snapControl.snappedFeature && (this.snapControl.snappedFeature.feature = this.snapControl.snappedFeature.feature.model),
            this.snapControl.snappedFeature && this.snapControl.snappedFeature.feature.outOfScope && (this.snapControl.snappedFeature = null ),
            this.snappedFrom && this.snappedFrom.feature.outOfScope && (this.snappedFrom = null ),
            this.snapControl.snappedFeature && this.snappedFrom && this.snapControl.snappedFeature.feature === this.snappedFrom.feature && (this.snappedFrom = null ),
            this.featureAdded(t, this.snappedFrom, this.snapControl.snappedFeature)) : this.featureAdded(t)),
            this.deactivate()
        },
        initialize: function(e, t, i, n) {
            s.prototype.initialize.apply(this, [n]),
            this.callbacks = OpenLayers.Util.extend({
                cancel: this.onDrawCancel
            }, this.callbacks),
            this.editingMediator = W.editingMediator,
            this.targetLayer = t,
            OpenLayers.Control.DrawFeature.prototype.initialize.apply(this, [e, i, n]),
            this.keyHandler = new OpenLayers.Handler.Keyboard(this,{
                keyup: this.keyUp
            }),
            this.accelerator && W.accelerators.events.register(this.accelerator, this, this.handleShortcut)
        },
        setMap: function() {
            OL.Control.DrawFeature.prototype.setMap.apply(this, arguments),
            this.enableSnapping && this._createSnappingControl()
        },
        _createSnappingControl: function() {
            this.snapControl = new r({
                layer: this.map.sketchLayer,
                targets: [{
                    layer: this.map.nodeLayer
                }, {
                    layer: this.map.segmentLayer,
                    filter: {
                        evaluate: function(e) {
                            return !e.model.outOfScope && e.model.isGeometryEditable()
                        }
                    }
                }]
            }),
            this.snapControl.events.on({
                snap: function() {
                    var e = this.handler.getGeometry();
                    e && e.components && 1 === e.components.length && (this.snapControl.snappedFeature.feature.model && this.snapControl.snappedFeature.feature.model.setSnapped(!0),
                    this.snappedFrom = this.snapControl.snappedFeature)
                },
                scope: this
            })
        },
        setEnabled: function(e, t) {
            s.prototype.setEnabled.apply(this, arguments),
            e ? this.keyHandler.activate() : this.keyHandler.deactivate()
        },
        activate: function() {
            this.active || (OpenLayers.Control.DrawFeature.prototype.activate.apply(this, arguments),
            this.keyHandler.activate(),
            this.targetLayer.getVisibility() || this.targetLayer.setVisibility(!0),
            this.editingMediator.setDrawingInProgress(),
            this.enableSnapping && (this.map.addControl(this.snapControl),
            this.snapControl.activate()))
        },
        deactivate: function() {
            if (this.snappedFrom) {
                var e = this.snappedFrom.feature;
                e.setSnapped || (e = e.model),
                e.setSnapped(!1)
            }
            this.snappedFrom = null ,
            this.active && (this.editingMediator.setDrawingDone(),
            this.keyHandler.deactivate(),
            this.enableSnapping && (this.snapControl.deactivate(),
            this.map.removeControl(this.snapControl)),
            OpenLayers.Control.DrawFeature.prototype.deactivate.apply(this, arguments))
        },
        CLASS_NAME: "Waze.Control.DrawFeature"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(18), r = i(1056);
    n = OpenLayers.Class(OpenLayers.Control, s, {
        keyHandler: null ,
        handler: null ,
        type: OL.Control.TYPE_TOGGLE,
        editingMediator: null ,
        keyUp: function(e) {
            this.active && 0 === e.charCode && e.keyCode === OpenLayers.Event.KEY_ESC && (this.handler.cancel(),
            this.deactivate())
        },
        handleShortcut: function(e) {
            this.isEnabled() && this.activate()
        },
        onDrawCancel: function(e) {
            this.deactivate(),
            this.featureCancelled(e)
        },
        initialize: function(e) {
            OpenLayers.Control.prototype.initialize.apply(this, [e]),
            s.prototype.initialize.apply(this, [e]),
            this.callbacks = OpenLayers.Util.extend({
                cancel: this.onDrawCancel
            }, this.callbacks),
            this.keyHandler = new OpenLayers.Handler.Keyboard(this,{
                keyup: this.keyUp
            }),
            W.accelerators.events.register("drawRoundabout", this, this.handleShortcut),
            this.handler = new r(this,{
                done: this.onEllipseDrawn,
                cancel: this.onCancel
            }),
            this.editingMediator = W.editingMediator
        },
        onDrawStart: function() {
            OpenLayers.Element.addClass(this.map.viewPortDiv, this.displayClass + "Over")
        },
        onDrawEnd: function() {
            OpenLayers.Element.removeClass(this.map.viewPortDiv, this.displayClass + "Over")
        },
        isEnabled: function() {
            return !this.editingMediator.get("drawing") && this.editingMediator.get("editingEnabled")
        },
        onEllipseDrawn: function(e) {
            this.onDrawEnd();
            var t, i = new OpenLayers.LonLat(e.x,e.y), n = e.rx * this.map.getResolution(), s = e.ry * this.map.getResolution();
            i.x = i.lon,
            i.y = i.lat,
            t = new OpenLayers.Bounds(e.x - n,e.y - s,e.x + n,e.y + s),
            this.deactivate(),
            this.onRoundaboutAdded({
                center: i,
                rx: n,
                ry: s,
                bounds: t
            })
        },
        onCancel: function() {
            this.onDrawEnd(),
            this.deactivate()
        },
        onRoundaboutAdded: function() {},
        setEnabled: function(e, t) {
            s.prototype.setEnabled.apply(this, arguments),
            e ? this.keyHandler.activate() : this.keyHandler.deactivate()
        },
        activate: function() {
            this.active || (OpenLayers.Control.prototype.activate.apply(this, arguments),
            this.editingMediator.setDrawingInProgress(),
            this.keyHandler.activate())
        },
        deactivate: function() {
            this.active && (this.keyHandler.deactivate(),
            this.editingMediator.setDrawingDone(),
            OpenLayers.Control.prototype.deactivate.apply(this, arguments))
        },
        CLASS_NAME: "Waze.Control.DrawRoundabout"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(18), r = i(53), o = i(492), a = i(11), l = i(163), u = i(10), c = (i(29),
    i(2));
    n = OpenLayers.Class(OpenLayers.Control, s, {
        showArrows: !0,
        showAllArrows: !1,
        offsetArrows: !1,
        model: null ,
        conLayer: null ,
        selectionManager: null ,
        segment: null ,
        arrowHeight: 40,
        minimalArrowAngle: 25,
        arrowDistanceFromNodeInPixels: 35,
        uturnArrowOffsetInPixels: 18,
        maxScaleForDisplay: 1e4,
        uturnMaxScale: 3385.5001277302295,
        uturnMinSegmentLength: 75,
        restrictionsView: null ,
        eventsRegistered: !1,
        initialize: function(e) {
            OpenLayers.Control.prototype.initialize.apply(this, [e]),
            s.prototype.initialize.apply(this, [e]),
            this.model = W.model,
            this.conLayer = new OL.Layer.Markers("Node Connections",{
                displayInLayerSwitcher: !1
            }),
            this.selectionManager = W.selectionManager,
            W.accelerators.events.on({
                spreadArrows: this.toggleArrowOffset,
                hideArrows: this.toggleArrows,
                showAllArrows: this.toggleShowAllArrows,
                scope: this
            })
        },
        setMap: function() {
            OpenLayers.Control.prototype.setMap.apply(this, arguments),
            this.map.addLayer(this.conLayer)
        },
        toggleShowAllArrows: function() {
            this.enabled && (this.showAllArrows = !this.showAllArrows,
            this.resetConnections(),
            this.toggleEvents())
        },
        isActive: function() {
            return null !== this.segment || this.showAllArrows
        },
        toggleEvents: function() {
            this.isActive() ? this.registerEvents() : this.unregisterEvents()
        },
        toggleArrowOffset: function() {
            this.offsetArrows = !this.offsetArrows,
            this.resetConnections()
        },
        toggleArrows: function() {
            this.showArrows = !this.showArrows,
            this.conLayer.markers.forEach(function(e) {
                e.icon.$div.toggleClass("disabled", !this.showArrows)
            }, this)
        },
        destroy: function() {
            this.destroyConnections(),
            W.accelerators.events.un({
                spreadArrows: this.toggleArrowOffset,
                hideArrows: this.toggleArrows
            })
        },
        onArrowClicked: function(e) {
            var t = $(e.target)
              , i = t.hasClass("arrow") ? t : t.parents(".arrow")
              , n = i.data("model")
              , s = n.fromSeg.isTurnAllowed(n.toSeg, n.node);
            return n.modifiable && (n.locked ? this.model.actionManager.add(new r(n.fromSeg.getID(),n.node,n.toSeg.getID(),!s)) : n.fromSeg.lockTurns(n.node)),
            !1
        },
        onRestrictionsClicked: function(e) {
            e.stopPropagation();
            var t = $(e.target).parents(".arrow").data("model")
              , i = {}
              , n = t.fromSeg.getRestrictionsAtNode(t.node) || {}
              , s = n[t.toSeg.getID()] || []
              , r = _.filter(s, function(e) {
                return !e.isDifficult()
            })
              , o = r.length < s.length;
            r = r.map(function(e) {
                return e.clone()
            }),
            this.restrictionsView && (this.restrictionsView.hide(),
            this.restrictionsView.destroy()),
            this.restrictionsView = new l,
            this.restrictionsView.on("done", this.onRestrictionsEdited, this),
            this.restrictionsView.on("cancel", this.onRestrictionsEditCancel, this),
            i.default = {
                name: "default",
                fromSeg: t.fromSeg,
                toSeg: t.toSeg,
                restrictions: r
            },
            this.restrictionsView.setModel(i, [t.node], t.modifiable, o),
            this.restrictionsView.setSelectedGroup("default"),
            this.restrictionsView.show()
        },
        onRestrictionsEdited: function() {
            var e = this.restrictionsView.model.default
              , t = this.restrictionsView.listView.isDifficult
              , i = this.restrictionsView.features.first();
            e.restrictions.forEach(function(e) {
                delete e.models
            }),
            this.model.actionManager.add(new o(e.fromSeg,i,e.toSeg,e.restrictions,t)),
            this.restrictionsView.hide(),
            this.restrictionsView.destroy(),
            this.restrictionsView = null
        },
        onRestrictionsEditCancel: function() {
            this.restrictionsView.hide(),
            this.restrictionsView.destroy(),
            this.restrictionsView = null
        },
        activate: function() {
            OpenLayers.Control.prototype.activate.apply(this),
            this.selectionManager.events.register("selectionchanged", this, this.onSelectionChanged),
            $(this.conLayer.div).on("click", ".arrow", $.proxy(this.onArrowClicked, this)),
            $(this.conLayer.div).on("click", ".restrictions", $.proxy(this.onRestrictionsClicked, this))
        },
        deactivate: function() {
            this.unselect(),
            this.selectionManager.events.unregister("selectionchanged", this, this.onSelectionChanged),
            $(this.conLayer.div).off("click", ".arrow", $.proxy(this.onArrowClicked, this)),
            OpenLayers.Control.prototype.deactivate.apply(this)
        },
        onSelectionChanged: function(e) {
            var t = e.selected || []
              , i = t.every(function(e) {
                return e.model.type === c.SEGMENT
            });
            i && this.select(1 === t.length ? t[0].model : null )
        },
        select: function(e) {
            e !== this.segment && (this.segment = e,
            this.resetConnections(),
            this.toggleEvents())
        },
        unselect: function() {
            this.select(null )
        },
        registerEvents: function(e) {
            this.eventsRegistered || (this.model.segments.on(u.CHANGED, this.onSegmentsChanged, this),
            this.model.segments.on(u.REMOVED, this.onSegmentsRemoved, this),
            this.model.nodes.on(u.CHANGED, this.onNodesChanged, this),
            this.map.events.register("zoomend", this, this.zoomChanged),
            this.eventsRegistered = !0)
        },
        unregisterEvents: function(e) {
            this.eventsRegistered && (this.model.segments.off(u.CHANGED, this.onSegmentsChanged, this),
            this.model.segments.off(u.REMOVED, this.onSegmentsRemoved, this),
            this.model.nodes.off(u.CHANGED, this.onNodesChanged, this),
            this.map.events.unregister("zoomend", this, this.zoomChanged),
            this.eventsRegistered = !1)
        },
        onSegmentsChanged: function(e) {
            (null !== this.segment && OpenLayers.Util.indexOf(e, this.segment) >= 0 || this.showAllArrows) && this.resetConnections()
        },
        onSegmentsRemoved: function(e) {
            null !== this.segment && OpenLayers.Util.indexOf(e, this.segment) >= 0 && this.unselect()
        },
        onNodesChanged: function(e) {
            this.resetConnections()
        },
        destroyConnections: function() {
            this.conLayer.clearMarkers()
        },
        isConnectable: function(e) {
            return e.isDrivable()
        },
        resetConnections: function() {
            var e, t = [], i = this;
            this.destroyConnections(),
            this.conLayer.map.getScale() > this.maxScaleForDisplay || (this.showAllArrows ? t = this.model.segments.getObjectArray(function(e) {
                return e.state !== OpenLayers.State.DELETE && e.geometry.bounds.intersectsBounds(i.map.getExtent())
            }) : null !== this.segment && (t = [this.segment]),
            t.isEmpty() || t.filter(function(e) {
                return i.isConnectable(e)
            }).forEach(function(t) {
                ["fromNodeID", "toNodeID"].forEach(function(i) {
                    t.attributes[i] && (e = this.model.nodes.get(t.attributes[i])) && e.attributes.segIDs.length > 1 && this.createNodeConnections(e, t)
                }, this)
            }, this))
        },
        createNodeConnections: function(e, t) {
            var i, n, s, r, o, l, u, c = this, d = t.areTurnsLocked(e), h = null , p = null , g = e.getAngleToSegment(t), m = t.geometry.getLength() / this.map.getResolution(), f = e.attributes.segIDs.reduce(function(i, n) {
                s = c.model.segments.get(n);
                var r = s && c.isConnectable(s) && e.isTurnAllowedBySegDirections(t, s);
                if (r) {
                    if (u = s.getID() === t.getID(),
                    o = e.getAngleToSegment(s),
                    !u) {
                        var a = Math.abs(g - o);
                        a > 180 && a <= 360 && (a = 360 - a),
                        a < 90 && (e.getDirectionBetweenSegments(t, s) ? (null === h || a < h) && (h = a) : (null === p || a < p) && (p = a))
                    }
                    i.push([s, o])
                }
                return i
            }, []);
            if (!f.isEmpty()) {
                for (f.sort(function(e, t) {
                    return e.last() - t.last()
                }),
                r = 0,
                l = 1 === f.length ? Number.MAX_VALUE : f.last().last(),
                i = 0; i < f.length; i++)
                    n = f[i],
                    o = Math.abs(n.last() - l),
                    o > 180 && o <= 360 && (o = 360 - o),
                    o < this.minimalArrowAngle && (i !== f.length - 1 || 2 !== f.length) ? r++ : (r = 0,
                    l = n.last()),
                    this.createConnectionFeature(e, t, n.first(), n.last(), r, d, h, p, m),
                    l = n.last();
                if (!d && !this.showAllArrows) {
                    var v = e.geometry
                      , y = new OpenLayers.Marker(new OL.LonLat(v.x,v.y),new a("unlocked-badge"));
                    this.conLayer.addMarker(y)
                }
            }
        },
        createConnectionFeature: function(e, t, i, n, s, r, o, l, u) {
            var c, d = t.isTurnAllowed(i, e), h = t.getID() === i.getID(), p = (t.getRestrictionsAtNode(e) || {})[i.getID()] || [], g = p.filter(function(e) {
                return !e.isDifficult()
            }), m = g.length > 0, f = g.length < p.length;
            if (!(this.showAllArrows && (d && !m || h) || h && (this.conLayer.map.getScale() > this.uturnMaxScale || u <= this.uturnMinSegmentLength))) {
                c = t.attributes.toNodeID === e.getID() ? t.canEditToConnections() : t.canEditFromConnections(),
                this.offsetArrows && !h || (s = 0),
                h && (this.model.isLeftHand && null !== l && (s = (90 - l) / 90),
                this.model.isLeftHand || null === o || (s = (90 - o) / 90));
                var v, y = this.conLayer.map.getResolution(), b = (this.arrowDistanceFromNodeInPixels + this.arrowHeight * s) * y, _ = (450 - n) % 360, w = n.toRad(), S = new OpenLayers.LonLat(e.geometry.x + Math.cos(w) * b,e.geometry.y + Math.sin(w) * b), E = new OpenLayers.Marker(S,new a("connection-arrow")), C = $("<div />").appendTo(E.icon.$div);
                if (h) {
                    var L = w - Math.PI / 2
                      , A = this.uturnArrowOffsetInPixels * y;
                    this.model.isLeftHand && (L += Math.PI,
                    C.addClass("lefthand")),
                    S.lon += Math.cos(L) * A,
                    S.lat += Math.sin(L) * A
                }
                W.Config.restrictions.allowEditing && r && d && (v = $("<div />").addClass("restrictions").css("transform", "rotate(" + -_ + "deg)").appendTo(C)),
                C.addClass("arrow").css("transform", "rotate(" + _ + "deg)"),
                m && d ? (C.addClass("restricted"),
                $("<div />").addClass("restriction-badge").appendTo(C).css("transform", "rotate(" + -_ + "deg)")) : C.addClass(d ? "open" : "closed"),
                C.toggleClass("difficult", f),
                C.toggleClass("uturn", h),
                d || C.append($("<div />").addClass("closed-badge").css("transform", "rotate(" + -_ + "deg)")),
                this.showArrows || E.icon.$div.addClass("disabled"),
                C.data("model", {
                    node: e,
                    fromSeg: t,
                    toSeg: i,
                    locked: r,
                    value: d,
                    modifiable: c
                }),
                this.conLayer.addMarker(E)
            }
        },
        zoomChanged: function() {
            this.resetConnections()
        },
        CLASS_NAME: "Waze.Control.EditNodeConnections"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(18), r = i(1057), o = i(297), a = i(298), l = i(2);
    n = OpenLayers.Class(OpenLayers.Control, s, {
        geometryTypes: null ,
        clickout: !0,
        toggle: !0,
        toggleKey: null ,
        multiple: !1,
        multipleKey: null ,
        standalone: !1,
        sketchLayer: null ,
        segmentLayer: null ,
        nodeLayer: null ,
        draggingIntent: "drag",
        features: null ,
        dragHandles: null ,
        nodeDragHandles: null ,
        virtualDragHandles: null ,
        directionArrows: null ,
        dragPointsPaddingVertices: null ,
        selectControl: null ,
        featureHover: null ,
        dragControl: null ,
        snapControl: null ,
        handlers: null ,
        deleteCodes: null ,
        virtualStyle: null ,
        verticesStyle: null ,
        mode: null ,
        modified: [],
        radiusHandle: null ,
        dragHandle: null ,
        initialize: function(e, t, i, n) {
            this.sketchLayer = e,
            this.segmentLayer = t,
            this.nodeLayer = i,
            this.dragHandles = {},
            this.nodeDragHandles = {},
            this.virtualDragHandles = {},
            this.directionArrows = {},
            this.dragPointsPaddingVertices = [],
            this.deleteCodes = [68],
            this.mode = OpenLayers.Control.ModifyFeature.RESHAPE,
            OpenLayers.Control.prototype.initialize.apply(this, [n]),
            this.deleteCodes instanceof Array || (this.deleteCodes = [this.deleteCodes]),
            W.accelerators.events.register("toggleMultipleSelection", this, this.toggleMultipleSelection);
            var s = this;
            this.featureHover = new r(this,this.selectControl.layer,{
                over: function(e) {
                    var t = e.parent
                      , i = this.dragControl.handlers.drag.started;
                    !i && (e._highlightPlaceHolder || e._fromNodeDragPoint || e._toNodeDragPoint) && this.features.contains(t) && (this.drawSegmentDraggingHandles(t),
                    this.sketchLayer.removeFeatures(this.directionArrows[t.model.getID()] || [], {
                        silent: !0
                    }))
                },
                out: function(e) {
                    var t = e.parent
                      , i = this.dragControl.handlers.drag.started;
                    !i && (e._highlightPlaceHolder || e._fromNodeDragPoint || e._toNodeDragPoint) && this.features.contains(t) && (this.removeAllFeatures(this.virtualDragHandles),
                    this.removeAllFeatures(this.dragHandles),
                    this.sketchLayer.addFeatures(this.directionArrows[t.model.getID()] || [], {
                        silent: !0
                    }))
                },
                click: function(e) {
                    var t = e.parent
                      , i = this.dragControl.handlers.drag.started;
                    if (!i && (e._highlightPlaceHolder || e._fromNodeDragPoint || e._toNodeDragPoint) && this.features.contains(t))
                        return this.selectControl.unselect(t),
                        !1
                }
            }),
            null === this.virtualStyle && (this.virtualStyle = OpenLayers.Util.extend({}, this.sketchLayer.style || this.sketchLayer.styleMap.createSymbolizer()),
            this.virtualStyle.fillOpacity = .3,
            this.virtualStyle.strokeOpacity = .3);
            var a = {
                geometryTypes: ["OpenLayers.Geometry.Point"],
                snappingOptions: this.snappingOptions,
                onStart: function(e, t) {
                    s.dragStart.apply(s, [e, t])
                },
                onDrag: function(e, t) {
                    s.dragVertex.apply(s, [e, t])
                },
                onComplete: function(e) {
                    s.dragComplete.apply(s, [e])
                },
                featureCallbacks: {
                    over: function(e) {
                        e._sketch && s.dragControl.overFeature.apply(s.dragControl, [e])
                    },
                    click: function(e) {
                        s.clickOnDragPoint.apply(s, [e])
                    }
                },
                dragCallbacks: {}
            };
            this.dragControl = new OpenLayers.Control.DragFeature(this.sketchLayer,a),
            this.dragControl.handlers.feature.geometryTypeMatches = function(e) {
                return OpenLayers.Handler.Feature.prototype.geometryTypeMatches.apply(this, arguments) && !e.uneditable
            }
            ;
            var l = {
                keydown: this.handleKeypress
            };
            this.handlers = {
                keyboard: new OpenLayers.Handler.Keyboard(this,l)
            },
            this.snapControl = new o({
                layer: this.sketchLayer,
                targets: [{
                    layer: this.nodeLayer
                }, {
                    layer: this.segmentLayer,
                    filter: {
                        evaluate: function(e) {
                            return !e.model.outOfScope && e.model.isGeometryEditable()
                        }
                    }
                }]
            });
            var u = function(e) {
                this.dragControl.feature && this.dragControl.feature._sketchNode && e.point.translate(e.point.x, e.point.y)
            };
            this.snapControl.events.on({
                unsnap: u,
                snap: u,
                scope: this
            })
        },
        destroy: function() {
            this.dragPointsPaddingVertices = null ,
            this.segmentLayer = null ,
            this.nodeLayer = null ,
            this.sketchLayer = null ,
            this.dragControl.destroy(),
            this.snapControl.destroy(),
            this.featureHover.destroy(),
            this.standalone || this.selectControl.destroy(),
            W.accelerators.events.unregister("toggleMultipleSelection", this, this.toggleMultipleSelection),
            OpenLayers.Control.prototype.destroy.apply(this, []),
            this.featureHover = null ,
            this.snapControl = null
        },
        activate: function() {
            return (this.standalone || this.selectControl.activate()) && this.handlers.keyboard.activate() && this.featureHover.activate() && this.snapControl.activate() && OpenLayers.Control.prototype.activate.apply(this, arguments)
        },
        deactivate: function() {
            var e = !1;
            return OpenLayers.Control.prototype.deactivate.apply(this, arguments) && (this.removeAllFeatures(this.dragHandles),
            this.removeAllFeatures(this.virtualDragHandles),
            this.dragHandles = [],
            this.dragControl.deactivate(),
            this.handlers.keyboard.deactivate(),
            this.featureHover.deactivate(),
            this.snapControl.deactivate(),
            e = !0),
            e
        },
        removeAllFeatures: function(e) {
            Object.forEach(e, function(e, t) {
                this.sketchLayer.removeFeatures(t, {
                    silent: !0
                })
            }, this)
        },
        addAllFeatures: function(e) {
            Object.forEach(e, function(e, t) {
                this.sketchLayer.addFeatures(t, {
                    silent: !0
                })
            }, this)
        },
        selectFeature: function() {
            this.features.forEach(function(e) {
                this.drawSegmentDraggingHandles(e)
            }, this),
            this.mode = OpenLayers.Control.ModifyFeature.RESHAPE,
            this.resetVertices(),
            this.dragControl.activate()
        },
        unselectFeature: function(e) {
            e || (e = this.features),
            e instanceof Array || (e = [e]),
            e.clone().forEach(function(e) {
                e._highlightPlaceHolder && (e = e.parent),
                this.features.contains(e) && (OpenLayers.Util.removeItem(this.features, e),
                e.layer && (e.layer.events.triggerEvent("afterfeaturemodified", {
                    feature: e,
                    modified: OpenLayers.Util.indexOf(this.modified, e) >= 0
                }),
                e._sketch && (delete e._sketch,
                e.layer.drawFeature(e))),
                OpenLayers.Util.removeItem(this.modified, e))
            }, this),
            0 === this.features.length && this.dragControl.deactivate(),
            this.resetVertices()
        },
        clickOnDragPoint: function(e) {},
        dragStart: function(e, t) {
            this.onModificationStart(e),
            this.directionArrows[e.getID && e.getID()] && this.sketchLayer.removeFeatures(this.directionArrows[e.model.getID()], {
                silent: !0
            }),
            OpenLayers.Util.indexOf(this.features, e) < 0 && !e.virtual && e !== this.dragHandle && e !== this.radiusHandle && (null !== this.geometryTypes && OpenLayers.Util.indexOf(this.geometryTypes, e.geometry.CLASS_NAME) === -1 || (this.dragControl.overFeature.apply(this.dragControl, [e]),
            this.dragControl.lastPixel = t,
            this.dragControl.handlers.drag.started = !0,
            this.dragControl.handlers.drag.start = t,
            this.dragControl.handlers.drag.last = t),
            e.parents.forEach(function(e) {
                e._sketch = !0
            }))
        },
        dragVertex: function(e, t) {
            if (this.modified = !0,
            e.parent && "OpenLayers.Geometry.Point" === e.parent.geometry.CLASS_NAME)
                this.sketchLayer.events.triggerEvent("vertexmodified", {
                    vertex: e.geometry,
                    feature: e,
                    pixel: t
                });
            else if (e._index) {
                var i = e.parent.model.getID()
                  , n = e.parentGeom;
                n || (n = e.parent.geometry),
                n.addComponent(e.geometry, e._index),
                delete e._index,
                OpenLayers.Util.removeItem(this.virtualDragHandles[i], e),
                this.dragHandles[i].push(e)
            } else
                e === this.dragHandle ? (this.removeAllFeatures(this.dragHandles),
                this.dragHandles = {},
                this.radiusHandle && (this.sketchLayer.destroyFeatures([this.radiusHandle], {
                    silent: !0
                }),
                this.radiusHandle = null )) : e !== this.radiusHandle && this.sketchLayer.events.triggerEvent("vertexmodified", {
                    vertex: e.geometry,
                    feature: e.parent,
                    pixel: t
                });
            Object.keys(this.virtualDragHandles).length > 0 && (this.removeAllFeatures(this.virtualDragHandles),
            this.virtualDragHandles = []),
            e.parents.forEach(function(e) {
                e.layer && e.layer.drawFeature(e, this.draggingIntent)
            }, this),
            this.sketchLayer.drawFeature(e)
        },
        dragComplete: function(e) {
            this.onModificationComplete(e),
            this.sketchLayer.events.triggerEvent("featuremodified", {
                feature: e
            });
            for (var t = 0, i = e.parents.length; t < i; t++) {
                var n = e.parents[t];
                delete n._sketch,
                n.layer && (n.layer.drawFeature(e.parents[t], this.isSelected(e.parents[t]) ? this.selectControl.selectRenderIntent : "default"),
                n.layer.events.triggerEvent("featuremodified", {
                    feature: e.parents[t]
                }))
            }
            this.resetVertices(),
            e.parent && (this.sketchLayer.removeFeatures(this.directionArrows[e.parent.model.getID()], {
                silent: !0
            }),
            this.drawSegmentDraggingHandles(e.parent))
        },
        drawSegmentDraggingHandles: function(e) {
            e && (this.sketchLayer.addFeatures(this.virtualDragHandles[e.model.getID()] || []),
            this.sketchLayer.addFeatures(this.dragHandles[e.model.getID()] || []))
        },
        isSelected: function(e) {
            return e.layer && OpenLayers.Util.indexOf(e.layer.selectedFeatures, e) >= 0
        },
        resetVertices: function() {
            if (this.dragControl.feature && this.dragControl.outFeature(this.dragControl.feature),
            Object.keys(this.dragHandles).length > 0 && (this.removeAllFeatures(this.dragHandles),
            this.dragHandles = {}),
            Object.keys(this.virtualDragHandles).length > 0 && (this.removeAllFeatures(this.virtualDragHandles),
            this.virtualDragHandles = {}),
            Object.keys(this.nodeDragHandles).length > 0 && (this.removeAllFeatures(this.nodeDragHandles),
            this.nodeDragHandles = {}),
            Object.keys(this.directionArrows).length > 0 && (this.removeAllFeatures(this.directionArrows),
            this.directionArrows = {}),
            this.dragPointsPaddingVertices.length > 0 && (this.sketchLayer.removeFeatures(this.dragPointsPaddingVertices, {
                silent: !0
            }),
            this.dragPointsPaddingVertices = []),
            this.dragHandle && (this.sketchLayer.destroyFeatures([this.dragHandle, this.dragBoundry], {
                silent: !0
            }),
            this.dragHandle = null ,
            this.dragBoundry = null ),
            this.radiusHandle && (this.sketchLayer.destroyFeatures([this.radiusHandle], {
                silent: !0
            }),
            this.radiusHandle = null ),
            this.features.length > 0) {
                var e = this.selectControl.handlers.feature.lastFeature;
                e && !e.layer && (this.selectControl.handlers.feature.lastFeature = this.features[0]),
                this.mode & OpenLayers.Control.ModifyFeature.DRAG && this.collectDragHandle(),
                this.mode & (OpenLayers.Control.ModifyFeature.ROTATE | OpenLayers.Control.ModifyFeature.RESIZE) && this.collectRadiusHandle(),
                this.mode & OpenLayers.Control.ModifyFeature.RESHAPE && (this.mode & OpenLayers.Control.ModifyFeature.RESIZE || this.collectVertices())
            }
        },
        toggleMultipleSelection: function() {
            this.selectControl.multiple = !this.selectControl.multiple,
            this.selectControl.clickout = !this.selectControl.clickout
        },
        handleKeypress: function(e) {
            var t = e.keyCode;
            if (this.features.length > 0 && OpenLayers.Util.indexOf(this.deleteCodes, t) !== -1) {
                var i = this.dragControl.feature;
                i && i._dragPoint && !this.dragControl.handlers.drag.dragging && i.parent && (this.onModificationStart(i),
                i.parentGeom ? i.parentGeom.removeComponent(i.geometry) : i.parent.geometry.removeComponent(i.geometry),
                i.parent.layer.drawFeature(i.parent, this.selectControl.renderIntent),
                this.onModificationComplete(i),
                this.sketchLayer.events.triggerEvent("featuremodified", {
                    feature: i
                }))
            }
        },
        createGeometryCollection: function() {
            for (var e = [], t = 0, i = this.features.length; t < i; t++)
                e.push(this.features[t].geometry);
            return new OpenLayers.Geometry.Collection(e)
        },
        collectVertices: function() {
            this.dragHandles = {},
            this.virtualDragHandles = {},
            this.nodeDragHandles = {},
            this.directionArrows = {},
            this.dragPointsPaddingVertices = [],
            this.collectVerticesFromFeatures(this.features, this.dragHandles, this.virtualDragHandles, this.nodeDragHandles),
            this.sketchLayer.addFeatures(this.dragPointsPaddingVertices, {
                silent: !0
            }),
            this.addAllFeatures(this.directionArrows),
            this.addAllFeatures(this.nodeDragHandles)
        },
        collectComponentVertices: function(e, t, i) {
            var n, s, r, o, l = e.geometry;
            if ("OpenLayers.Geometry.Point" === l.CLASS_NAME)
                s = new a([l],null ,this.verticesStyle),
                s._sketch = !0,
                s.parent = e,
                t.push(s);
            else {
                var u = l.components.length;
                for ("OpenLayers.Geometry.LinearRing" === l.CLASS_NAME && (u -= 1),
                n = 0; n < u; ++n)
                    r = l.components[n],
                    "OpenLayers.Geometry.Point" === r.CLASS_NAME ? (s = new OL.Feature.Vector(r,null ,this.verticesStyle),
                    s._sketch = !0,
                    s.renderIntent = "sketch",
                    s.parent = e,
                    t.push(s)) : this.collectComponentVertices(s, t, i);
                if ("OpenLayers.Geometry.MultiPoint" !== l.CLASS_NAME)
                    for (n = 0,
                    o = l.components.length; n < o - 1; ++n) {
                        var c = l.components[n]
                          , d = l.components[n + 1];
                        if ("OpenLayers.Geometry.Point" === c.CLASS_NAME && "OpenLayers.Geometry.Point" === d.CLASS_NAME) {
                            var h = (c.x + d.x) / 2
                              , p = (c.y + d.y) / 2
                              , g = new OL.Feature.Vector(new OpenLayers.Geometry.Point(h,p),null ,this.virtualStyle);
                            g.parent = e,
                            g._index = n + 1,
                            g._sketch = !0,
                            g.virtual = !0,
                            i.push(g)
                        }
                    }
            }
        },
        collectVerticesFromFeatures: function(e, t, i) {
            for (var n = 0, s = e.length; n < s; n++)
                this.collectComponentVertices(e[n], t, i)
        },
        setMap: function(e) {
            this.standalone || this.selectControl.setMap(e),
            this.dragControl.setMap(e),
            this.featureHover.setMap(e),
            this.snapControl.setMap(e),
            e.events.on({
                zoomend: function() {
                    1 === this.features.length && this.features.first().type === l.SPEED_CAMERA && this.resetVertices()
                },
                scope: this
            }),
            OpenLayers.Control.prototype.setMap.apply(this, arguments)
        },
        onModificationStart: function(e) {},
        onModificationComplete: function(e) {},
        CLASS_NAME: "Waze.Control.ModifyFeature"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(1043), r = i(10), o = i(29), a = i(2), l = i(295), u = i(1034), c = i(298), d = i(6);
    n = OpenLayers.Class(s, {
        model: null ,
        origGeometries: null ,
        initialize: function(e, t, i, n, r, o, a) {
            this.features = e.clone(),
            this.reverseSegments = t,
            s.prototype.initialize.apply(this, [n, r, o, a]),
            this.model = i,
            this.origGeometries = {},
            this._registerEvents(),
            this.map.addControl(this),
            this.activate(),
            this.selectFeature(this.feature)
        },
        destroy: function() {
            this._unregisterEvents(),
            this.unselectFeature(),
            this.deactivate(),
            s.prototype.destroy.apply(this, arguments)
        },
        _registerEvents: function() {
            this.model.segments.on(r.CHANGED, this.onFeatureUpdated, this),
            this.model.nodes.on(r.CHANGED, this.onFeatureUpdated, this),
            this.model.events.register("mergeend", this, this.onFeaturesMerge)
        },
        _unregisterEvents: function() {
            this.model.events.unregister("mergeend", this, this.onFeaturesMerge),
            this.model.segments.off(r.CHANGED, this.onFeatureUpdated, this),
            this.model.nodes.off(r.CHANGED, this.onFeatureUpdated, this)
        },
        onFeatureUpdated: function(e) {
            this.active && this.resetVertices()
        },
        clickOnDragPoint: function(e) {
            var t = null ;
            if (e.parent && e.parent.model.type === a.NODE)
                t = e.parent;
            else if (e.parent && e.parent.model.type === a.SEGMENT) {
                var i = e.parent.geometry.getVertices(!0);
                e.geometry.equals(i[0]) && e.parent.model.attributes.fromNodeID ? t = this.model.nodes.get(e.parent.model.attributes.fromNodeID) : e.geometry.equals(i[1]) && e.parent.model.attributes.toNodeID && (t = this.model.nodes.get(e.parent.model.attributes.toNodeID))
            }
            t && this.selectControl.clickFeature(t)
        },
        getFeaturesArray: function(e, t) {
            var i = e[t.getID()];
            return i || (e[t.getID()] = []),
            e[t.getID()]
        },
        _getArrowVector: function(e, t, n) {
            var s, r, o;
            return e.isOneWay() ? (s = i(t ? 981 : 180),
            r = 9,
            o = 360 - n.last().toDeg(),
            e.attributes.revDirection === !0 && (o -= 180)) : (r = 5,
            s = i(983)),
            new OpenLayers.Feature.Vector(n.first(),{},{
                externalGraphic: s,
                rotation: o,
                graphicWidth: r,
                graphicHeight: 5,
                pointerEvents: "none"
            })
        },
        collectVerticesFromFeatures: function(e, t, i, n) {
            var s = this.calculateNodesToParents(e)
              , r = this;
            Object.forEach(s, function(e, t) {
                if (t && t[0].model.isAllowed(o.Nodes.EDIT_GEOMETRY) && t.allPresent) {
                    var i = new c(r.getFeatureGeometries(t),null );
                    i._sketch = !0,
                    i._sketchNode = !0,
                    i.parents = t,
                    i.parent = i.parents[0];
                    var s = i.parent.model;
                    i.uneditable = !s.isAllowedToMoveNode();
                    var a = r.getFeaturesArray(n, i.parent.model);
                    a.push(i)
                }
            });
            for (var l = 0; l < e.length; l++) {
                var u = e[l]
                  , d = e[l].model;
                if (d.getID(),
                d.type === a.SEGMENT) {
                    var h = d.getRestrictionCount();
                    (h || d.isOneWay()) && (this.directionArrows[d.getID()] = d.getArrowPoints(42 * this.map.getResolution(), 20 * this.map.getResolution(), 20 * this.map.getResolution()).map(_.partial(this._getArrowVector, d, h))),
                    this._createDragHandles(d, u, t, s, n, i)
                }
            }
        },
        _createDragHandles: function(e, t, i, n, s, r) {
            var a = new OL.Feature.Vector(e.geometry.clone(),null )
              , l = e.getID();
            a.parent = t,
            a._highlightPlaceHolder = !0,
            this.dragPointsPaddingVertices.push(a);
            for (var u = e.isAllowed(o.Segments.EDIT_GEOMETRY) && !e.outOfScope, c = this.getFeaturesArray(i, e), d = this.getFeaturesArray(s, e), h = e.geometry, p = null , g = e.attributes.fromNodeID && n[e.attributes.fromNodeID] ? 1 : 0, m = h.components.length - (e.attributes.toNodeID && n[e.attributes.toNodeID] ? 1 : 0), f = g; f < m; ++f) {
                var v = h.components[f];
                if ("OpenLayers.Geometry.Point" === v.CLASS_NAME) {
                    var y = new OL.Feature.Vector(v,null );
                    if (p) {
                        var b = p.geometry.distanceTo(y.geometry) / this.map.getResolution();
                        if (b < 3 && f > 0 && f < h.components.length - 1)
                            continue
                    }
                    p = y,
                    y._sketch = !0,
                    y._virtualParent = a,
                    y.renderIntent = "sketch",
                    y.parent = t,
                    y.parents = [t];
                    var _;
                    0 === f && e.attributes.fromNodeID || f === h.components.length - 1 && e.attributes.toNodeID ? (0 === f ? (_ = this.model.nodes.get(e.attributes.fromNodeID),
                    y[this.reverseSegments[l] ? "_toNodeDragPoint" : "_fromNodeDragPoint"] = !0) : f === h.components.length - 1 && (_ = this.model.nodes.get(e.attributes.toNodeID),
                    y[this.reverseSegments[l] ? "_fromNodeDragPoint" : "_toNodeDragPoint"] = !0),
                    y.uneditable = !_ || !_.isAllowedToMoveNode() || !u,
                    d.push(y)) : (y.uneditable = !u,
                    0 === f ? (y[this.reverseSegments[l] ? "_toNodeDragPoint" : "_fromNodeDragPoint"] = !0,
                    d.push(y)) : f === h.components.length - 1 ? (y[this.reverseSegments[l] ? "_fromNodeDragPoint" : "_toNodeDragPoint"] = !0,
                    d.push(y)) : (y._dragPoint = !0,
                    u && c.push(y)))
                }
            }
            u && this._createVirtualVertices(e, h, t, a, r)
        },
        _createVirtualVertices: function(e, t, i, n, s) {
            var r = this.getFeaturesArray(s, e);
            if ("OpenLayers.Geometry.MultiPoint" !== t.CLASS_NAME)
                for (var o = 0; o < t.components.length - 1; ++o) {
                    var a = t.components[o]
                      , l = t.components[o + 1];
                    if ("OpenLayers.Geometry.Point" === a.CLASS_NAME && "OpenLayers.Geometry.Point" === l.CLASS_NAME) {
                        var u = a.distanceTo(l) / this.map.getResolution();
                        if (u < 20)
                            continue;
                        var c = (a.x + l.x) / 2
                          , d = (a.y + l.y) / 2
                          , h = new OL.Feature.Vector(new OpenLayers.Geometry.Point(c,d),null ,this.virtualStyle);
                        h._virtualParent = n,
                        h.parent = i,
                        h.parents = [i],
                        h._index = o + 1,
                        h._sketch = !0,
                        h.virtual = !0,
                        r.push(h)
                    }
                }
        },
        getFeatureGeometries: function(e) {
            var t = []
              , i = e[0].model;
            t.push(i.geometry);
            for (var n = 1; n < e.length; n++) {
                var s = e[n].model;
                s.attributes.fromNodeID === i.getID() ? t.push(s.geometry.components[0]) : s.attributes.toNodeID === i.getID() && t.push(s.geometry.components[s.geometry.components.length - 1])
            }
            return t
        },
        calculateNodesToParents: function(e) {
            for (var t = {}, i = {}, n = 0; n < e.length; n++) {
                var s = e[n].model;
                if (s.type === a.SEGMENT) {
                    var r = s.attributes.fromNodeID
                      , o = s.attributes.toNodeID;
                    r && !t[r] && (i[r] ? (t[r] = this.getNodeIDParents(r),
                    delete i[r]) : i[r] = !0),
                    o && !t[o] && (i[o] ? (t[o] = this.getNodeIDParents(o),
                    delete i[o]) : i[o] = !0)
                } else
                    s.type === a.NODE && (t[s.getID()] || (t[s.getID()] = this.getNodeIDParents(s.getID())))
            }
            return t
        },
        getNodeIDParents: function(e) {
            var t = this.model.nodes.get(e);
            if (!d.defined(t))
                return null ;
            var i = [this.map.nodeLayer.getVector(t)];
            i.allPresent = !0;
            for (var n = 0; n < t.attributes.segIDs.length; n++) {
                var s = t.attributes.segIDs[n]
                  , r = this.model.segments.get(s);
                r = this.map.segmentLayer.getVector(r),
                r ? i.push(r) : i.allPresent = !1
            }
            return i
        },
        onModificationStart: function(e) {
            e.parents && e.parents.forEach(function(e) {
                var t = e.model.type + e.model.getID();
                this.origGeometries[t] || (this.origGeometries[t] = e.geometry.clone())
            }, this)
        },
        onModificationComplete: function(e) {
            var t, i = {}, n = this.snapControl.snappedFeature;
            if (n && !n.feature.model.outOfScope && (n.feature = n.feature.model,
            i.snappedFeatures = n),
            1 === e.parents.length) {
                if (e.parent.model.type === a.SEGMENT) {
                    var s = e.parent.model.getID()
                      , r = e.parent.model;
                    t = this.origGeometries["segment" + s],
                    i.createNodes = !0,
                    t && this.model.actionManager.add(new l(r,t.clone(),e.parent.geometry,i))
                }
            } else {
                for (var o = {}, c = e.parent.model, d = 0; d < c.attributes.segIDs.length; d++) {
                    var h = c.attributes.segIDs[d]
                      , p = this.model.segments.get(h);
                    p && (o[h] = this.origGeometries["segment" + h].clone())
                }
                this.model.actionManager.add(new u(c,this.origGeometries["node" + c.getID()].clone(),e.parent.geometry,o,i))
            }
            for (var g = 0; g < this.origGeometries.length; g++)
                this.origGeometries[g].destroy();
            this.origGeometries = {}
        },
        onFeaturesMerge: function() {
            this.verifySelectionValidity()
        },
        verifySelectionValidity: function() {
            this.resetVertices()
        },
        CLASS_NAME: "Waze.Control.ModifyModelFeature"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(18), r = i(487), o = i(11), a = i(10), l = i(29);
    n = OL.Class(OL.Control, s, {
        model: null ,
        layer: null ,
        handler: null ,
        segments: null ,
        newNodeFeature: null ,
        maxScaleForDisplay: 1e4,
        initialize: function(e) {
            OL.Control.prototype.initialize.apply(this, [e]),
            s.prototype.initialize.apply(this, [e]),
            this.model = W.model,
            this.layer = new OL.Layer.Markers("newNodes",{
                displayInLayerSwitcher: !1
            }),
            this.segments = []
        },
        destroy: function() {
            this.layer.clearMarkers(),
            this.unregisterModelEvents(),
            this.segments = null
        },
        onAddClicked: function(e) {
            var t = $(e.target).data("model");
            this.model.actionManager.add(new r(this.segments,t.splits))
        },
        activate: function() {
            OL.Control.prototype.activate.apply(this),
            W.selectionManager.events.register("selectionchanged", this, this.onSelectionChanged),
            $(this.layer.div).on("click", ".add-junction", $.proxy(this.onAddClicked, this))
        },
        deactivate: function() {
            W.selectionManager.events.unregister("selectionchanged", this, this.onSelectionChanged),
            this.unselect(),
            $(this.layer.div).off("click", ".add-junction", $.proxy(this.onAddClicked, this)),
            OL.Control.prototype.deactivate.apply(this)
        },
        onSelectionChanged: function(e) {
            var t = e.selected || []
              , i = _(this.segments).invoke("getID");
            t = _(t).pluck("model");
            var n = _(t).invoke("getID")
              , s = !i.equals(n);
            s && (this.selectionValid(t) || this.segments.isEmpty() ? this.selectionValid(t) && this.segments.isEmpty() && this.registerModelEvents() : this.unregisterModelEvents(),
            this.segments = t,
            this.resetConnections())
        },
        selectionValid: function(e) {
            return !e.isEmpty() && 2 === e.length
        },
        unselect: function() {
            this.onSelectionChanged({
                selected: []
            })
        },
        registerModelEvents: function(e) {
            this.model.segments.on(a.CHANGED, this.onSegmentsChanged, this),
            this.model.segments.on(a.REMOVED, this.onSegmentsRemoved, this),
            this.model.nodes.on(a.CHANGED, this.onNodesChanged, this)
        },
        unregisterModelEvents: function() {
            this.model.segments.off(a.CHANGED, this.onSegmentsChanged, this),
            this.model.segments.off(a.REMOVED, this.onSegmentsRemoved, this),
            this.model.nodes.off(a.CHANGED, this.onNodesChanged, this)
        },
        onSegmentsChanged: function(e) {
            null !== this.segment && OL.Util.indexOf(e, this.segment) >= 0 && this.resetConnections()
        },
        onSegmentsRemoved: function(e) {
            null !== this.segment && OL.Util.indexOf(e, this.segment) >= 0 && this.unselect()
        },
        onNodesChanged: function(e) {
            if (this.segment) {
                var t = this.model.nodes.get(this.segment.attributes.fromNodeID)
                  , i = this.model.nodes.get(this.segment.attributes.toNodeID);
                (t && OL.Util.indexOf(e, t) >= 0 || i && OL.Util.indexOf(e, i) >= 0) && this.resetConnections()
            }
        },
        destroyConnections: function() {
            this.layer.clearMarkers(),
            this.newNodeFeature = null
        },
        resetConnections: function() {
            if (this.destroyConnections(),
            !(this.segments.isEmpty() || 2 !== this.segments.length || this.layer.map.getScale() > this.maxScaleForDisplay)) {
                var e = this.segments[0]
                  , t = this.segments[1];
                if (e.geometry.bounds && t.geometry.bounds && e.attributes.level === t.attributes.level && e.geometry.bounds.intersectsBounds(t.geometry.bounds)) {
                    var i = e.geometry.split(t.geometry, {
                        edge: !0,
                        mutual: !0
                    });
                    if (null !== i && 2 === i.first().length) {
                        var n = this.segments.every(function(e) {
                            return e.isAllowed(l.Segments.EDIT_GEOMETRY)
                        });
                        if (n) {
                            var s = i.last().last().components.first().clone();
                            this.newNodeFeature = new OL.Marker(new OL.LonLat(s.x,s.y),new o("add-junction")),
                            this.newNodeFeature.icon.$div.data("model", {
                                splits: i
                            }),
                            this.layer.addMarker(this.newNodeFeature)
                        }
                    }
                }
            }
        },
        setMap: function() {
            OL.Control.prototype.setMap.apply(this, arguments),
            this.map.addLayer(this.layer)
        },
        CLASS_NAME: "Waze.Control.NodeCreator"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(18);
    n = OpenLayers.Class(OpenLayers.Control.Button, s, {
        actionManager: null ,
        initialize: function(e, t) {
            OpenLayers.Control.prototype.initialize.apply(this, [t]),
            this.actionManager = e,
            this.autoActivate = !1,
            this.onActionChange(),
            this.actionManager.events.on({
                scope: this,
                afteraction: this.onActionChange,
                afterundoaction: this.onActionChange,
                afterclearactions: this.onActionChange
            }),
            W.accelerators.events.register("redo", this, this.trigger)
        },
        destroy: function() {
            this.actionManager.events.un({
                scope: this,
                afteraction: this.onActionChange,
                afterundoaction: this.onActionChange,
                afterclearactions: this.onActionChange
            }),
            W.accelerators.events.unregister("redo", this, this.trigger),
            OpenLayers.Control.prototype.destroy.apply(this)
        },
        onActionChange: function() {
            this.actionManager.canRedo() ? this.enable() : this.disable()
        },
        trigger: function() {
            this.enabled && (this.onRedo(),
            this.actionManager.redo())
        },
        onRedo: function() {}
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(18);
    n = OpenLayers.Class(OpenLayers.Control.Button, s, {
        actionManager: null ,
        $unsavedActionsCounter: null ,
        CounterAlertThreshold: 10,
        initialize: function(e, t) {
            OpenLayers.Control.prototype.initialize.apply(this, [t]),
            this.actionManager = e,
            this.autoActivate = !1,
            this.onActionChange(),
            this.actionManager.events.on({
                scope: this,
                afteraction: this.onActionChange,
                afterundoaction: this.onActionChange,
                afterclearactions: this.onActionChange
            }),
            W.accelerators.events.register("save", this, this.trigger)
        },
        destroy: function() {
            this.actionManager.events.un({
                scope: this,
                afteraction: this.onActionChange,
                afterundoaction: this.onActionChange,
                afterclearactions: this.onActionChange
            }),
            W.accelerators.events.register("save", this, this.trigger),
            this.actionManager = null ,
            OpenLayers.Control.prototype.destroy.apply(this)
        },
        onActionChange: function() {
            var e = this.actionManager.unsavedActionsNum();
            this.$unsavedActionsCounter || (this.$unsavedActionsCounter = $("<div />").addClass("counter")),
            this.$unsavedActionsCounter && (this.$unsavedActionsCounter.toggle(e > 0 && this.actionManager.isAllowedToSave()),
            this.$unsavedActionsCounter.toggleClass("warning", e >= this.CounterAlertThreshold),
            this.$unsavedActionsCounter.text(e)),
            this.actionManager.canSave() ? this.enable() : this.disable()
        },
        onRender: function(e) {
            this.$unsavedActionsCounter && this.$unsavedActionsCounter.appendTo(e)
        },
        trigger: function() {
            this.enabled && this.editingMediator.get("editingEnabled") && W.commands.execute("save:start")
        }
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(301);
    n = OpenLayers.Class(OpenLayers.Control, {
        multipleKeys: null ,
        toggleKey: null ,
        deselectKey: null ,
        requireDeselect: !1,
        boxMask: OpenLayers.Handler.MOD_NONE,
        multiple: !1,
        clickout: !0,
        toggle: !1,
        box: !1,
        selectionEmpty: !0,
        onBeforeSelect: function() {},
        onSelect: function() {},
        onUnselect: function() {},
        scope: null ,
        geometryTypes: null ,
        layer: null ,
        layers: null ,
        callbacks: null ,
        selectStyle: null ,
        selectRenderIntent: "select",
        highlightRenderIntent: "highlight",
        highlightSelectedRenderIntent: "highlightselected",
        deletedRenderIntent: "delete",
        highlightDeletedRenderIntent: "highlightdeleted",
        handlers: null ,
        initialize: function(e, t) {
            OpenLayers.Control.prototype.initialize.apply(this, [t]),
            this.multipleKeys instanceof Array || (this.multipleKeys = [this.multipleKeys]),
            null === this.scope && (this.scope = this),
            this.initLayer(e);
            var i = {
                click: this.clickFeature,
                clickout: this.clickoutFeature,
                over: this.overFeature,
                out: this.outFeature
            };
            this.callbacks = OpenLayers.Util.extend(i, this.callbacks),
            this.handlers = {
                feature: new OpenLayers.Handler.Feature(this,this.layer,this.callbacks,{
                    geometryTypes: this.geometryTypes,
                    stopDown: !1,
                    geometryTypeMatches: function() {
                        return this.feature.layer && this.feature.layer.selectable
                    }
                }),
                keyboard: new s(this,{
                    keydown: this.handleKeypress
                })
            },
            this.box && (OL.Handler.Drag.prototype.checkModifiers = function(e) {
                if (null === this.keyMask)
                    return !0;
                var t = (e.shiftKey ? OpenLayers.Handler.MOD_SHIFT : 0) | (e.ctrlKey ? OpenLayers.Handler.MOD_CTRL : 0) | (e.metaKey ? OpenLayers.Handler.MOD_CTRL : 0) | (e.altKey ? OpenLayers.Handler.MOD_ALT : 0);
                return t === this.keyMask
            }
            ,
            this.handlers.box = new OpenLayers.Handler.Box(this,{
                done: this.selectBox
            },{
                boxDivClassName: "olHandlerBoxSelectFeature",
                keyMask: this.boxMask
            }))
        },
        initLayer: function(e) {
            e.forEach(function(e) {
                e.selectControl = this
            }, this),
            e instanceof Array ? (this.layers = e,
            this.layer = new OpenLayers.Layer.Vector.RootContainer(this.id + "_container",{
                layers: e
            })) : this.layer = e
        },
        destroy: function() {
            this.active && this.layers && this.map.removeLayer(this.layer),
            OpenLayers.Control.prototype.destroy.apply(this, arguments),
            this.layers && this.layer.destroy()
        },
        activate: function() {
            return this.active || (this.layers && this.map.addLayer(this.layer),
            this.handlers.feature.activate(),
            this.handlers.keyboard.activate(),
            this.box && this.handlers.box && this.handlers.box.activate()),
            OpenLayers.Control.prototype.activate.apply(this, arguments)
        },
        deactivate: function() {
            return this.active && (this.handlers.feature.deactivate(),
            this.handlers.keyboard.deactivate(),
            this.handlers.box && this.handlers.box.deactivate(),
            this.layers && this.map.removeLayer(this.layer)),
            OpenLayers.Control.prototype.deactivate.apply(this, arguments)
        },
        handleKeypress: function(e) {
            this.deselectKey === e.keyCode && this.unselectAll()
        },
        canSelect: function() {
            return this.multipleSelect() || !this.requireDeselect || this.selectionEmpty
        },
        setSelectionEmpty: function(e) {
            this.selectionEmpty = e
        },
        clickFeature: function(e) {
            var t = e.layer && OpenLayers.Util.indexOf(e.layer.selectedFeatures, e) > -1;
            if (this.canSelect())
                if (t)
                    this.toggleSelect() ? this.unselect(e) : this.multipleSelect() || this.unselectAll({
                        except: e
                    });
                else {
                    if (this.handlers.feature.evt.altKey)
                        return void e.layer.events.triggerEvent("selectpath", {
                            feature: e
                        });
                    this.multipleSelect() || this.unselectAll({
                        except: e
                    }),
                    this.select(e)
                }
        },
        multipleSelect: function() {
            var e = this.multipleKeys.some(function(e) {
                return this.handlers.feature.evt[e]
            }, this);
            return this.multiple || !this.duringBoxSelection && this.handlers.feature.evt && e || this.duringBoxSelection && this.handlers.box && this.handlers.box.dragHandler.evt && e
        },
        toggleSelect: function() {
            return this.toggle || this.handlers.feature.evt && this.handlers.feature.evt[this.toggleKey]
        },
        clickoutFeature: function(e) {
            this.clickout && !this.multipleSelect() && this.unselectAll()
        },
        overFeature: function(e) {
            this.canSelect() && this.highlight(e)
        },
        outFeature: function(e) {
            if (e._lastHighlighter === this.id)
                if (e._prevHighlighter && e._prevHighlighter !== this.id) {
                    delete e._lastHighlighter;
                    var t = this.map.getControl(e._prevHighlighter);
                    t && t.highlight(e)
                } else
                    this.unhighlight(e)
        },
        highlight: function(e) {
            var t = e.layer;
            if (t) {
                var i = this.events.triggerEvent("beforefeaturehighlighted", {
                    feature: e
                });
                if (i !== !1) {
                    e._prevHighlighter = e._lastHighlighter,
                    e._lastHighlighter = this.id;
                    var n = OpenLayers.Util.indexOf(t.selectedFeatures, e) > -1
                      , s = e.model && e.model.isDeleted()
                      , r = this.selectStyle;
                    r || (r = s ? this.highlightDeletedRenderIntent : n ? this.duringBoxSelection ? this.selectRenderIntent : this.highlightSelectedRenderIntent : this.highlightRenderIntent),
                    t.drawFeature(e, r),
                    this.events.triggerEvent("featurehighlighted", {
                        feature: e
                    })
                }
            }
        },
        unhighlight: function(e) {
            var t = e.layer;
            e._lastHighlighter = e._prevHighlighter,
            delete e._prevHighlighter;
            var i = e.model && e.model.isDeleted()
              , n = OpenLayers.Util.indexOf(t.selectedFeatures, e) > -1
              , s = this.selectStyle;
            s || (s = i ? this.deletedRenderIntent : n ? this.selectRenderIntent : e.layer.style || "default"),
            t.drawFeature(e, s),
            this.events.triggerEvent("featureunhighlighted", {
                feature: e
            })
        },
        select: function(e) {
            if (!e.model.isDeleted()) {
                var t = this.onBeforeSelect.call(this.scope, e)
                  , i = e.layer;
                i && t !== !1 && (t = i.events.triggerEvent("beforefeatureselected", {
                    feature: e
                }),
                t !== !1 && (i.selectedFeatures.push(e),
                this.highlight(e),
                this.handlers.feature.lastFeature || (this.handlers.feature.lastFeature = i.selectedFeatures[0]),
                e.model && e.model.setSelected(!0),
                i.events.triggerEvent("featureselected", {
                    feature: e
                }),
                this.onSelect.call(this.scope, e)))
            }
        },
        selectMultiple: function(e) {
            var t, i = {};
            e.forEach(function(e) {
                t = e.layer,
                null !== t && (i[t.id] = t,
                t.selectedFeatures.push(e),
                this.highlight(e),
                this.handlers.feature.lastFeature || (this.handlers.feature.lastFeature = t.selectedFeatures[0]),
                e.model && e.model.setSelected(!0))
            }, this),
            Object.values(i).forEach(function(t) {
                t.events.triggerEvent("featureselected", {
                    feature: e
                })
            }),
            this.onSelect.call(this.scope, e)
        },
        unselect: function(e, t) {
            var i = e.layer;
            OpenLayers.Util.removeItem(i.selectedFeatures, e),
            this.unhighlight(e),
            e.model && e.model.setSelected(!1),
            t !== !0 && (i.events.triggerEvent("featureunselected", {
                features: [e]
            }),
            this.onUnselect.call(this.scope, e))
        },
        unselectAll: function(e) {
            var t, i, n, s, r = this.layers || [this.layer], o = [];
            for (t = 0; t < r.length; ++t)
                for (n = r[t],
                o[t] = [n],
                i = n.selectedFeatures.length - 1; i >= 0; --i)
                    s = n.selectedFeatures[i],
                    !s || e && e.except === s || (s.model && s.model.setSelected(!1),
                    o[t].push(s),
                    this.unselect(s, !0));
            o.forEach(function(e) {
                n = e.first(),
                e = e.splice(1),
                e.isEmpty() || (n.events.triggerEvent("featureunselected", {
                    features: e
                }),
                this.onUnselect.call(this.scope, e))
            }, this)
        },
        selectBox: function(e) {
            if (e instanceof OpenLayers.Bounds) {
                for (var t, i = this.map.getLonLatFromPixel(new OpenLayers.Pixel(e.left,e.bottom)), n = this.map.getLonLatFromPixel(new OpenLayers.Pixel(e.right,e.top)), s = new OpenLayers.Bounds(i.lon,i.lat,n.lon,n.lat).toGeometry(), r = this.boxSelectionLayers || this.layers || [this.layer], o = [], a = 0; a < r.length; ++a) {
                    t = r[a];
                    for (var l = 0, u = t.features.length; l < u; ++l) {
                        var c = t.features[l];
                        c.getVisibility() && s.intersects(c.geometry) && o.push(c)
                    }
                }
                this.multipleSelect() || this.unselectAll(),
                o.isEmpty() || this.selectMultiple(o)
            }
        },
        setMap: function(e) {
            this.handlers.feature.setMap(e),
            this.box && this.handlers.box.setMap(e),
            OpenLayers.Control.prototype.setMap.apply(this, arguments)
        },
        setLayer: function(e) {
            var t = this.active;
            this.unselectAll(),
            this.deactivate(),
            this.layers && (this.layer.destroy(),
            this.layers = null ),
            this.initLayer(e),
            this.handlers.feature.layer = this.layer,
            t && this.activate()
        },
        enableBoxSelection: function() {
            this.box && !this.handlers.box.active && this.handlers.box.activate()
        },
        disableBoxSelection: function() {
            this.box && this.handlers.box.active && this.handlers.box.deactivate()
        },
        CLASS_NAME: "Waze.Control.SelectHighlightFeature"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(18);
    n = OpenLayers.Class(OpenLayers.Control.Button, s, {
        actionManager: null ,
        initialize: function(e, t) {
            OpenLayers.Control.prototype.initialize.apply(this, [t]),
            this.actionManager = e,
            this.autoActivate = !1,
            this.onActionChange(),
            this.actionManager.events.on({
                scope: this,
                afteraction: this.onActionChange,
                afterundoaction: this.onActionChange,
                afterclearactions: this.onActionChange
            }),
            W.accelerators.events.register("undo", this, this.trigger)
        },
        destroy: function() {
            this.actionManager.events.un({
                scope: this,
                afteraction: this.onActionChange,
                afterundoaction: this.onActionChange,
                afterclearactions: this.onActionChange
            }),
            W.accelerators.events.unregister("undo", this, this.trigger),
            OpenLayers.Control.prototype.destroy.apply(this)
        },
        onActionChange: function() {
            this.actionManager.canUndo() ? this.enable() : this.disable()
        },
        trigger: function() {
            this.enabled && (this.onUndo(),
            this.actionManager.undo())
        },
        onUndo: function() {}
    }),
    e.exports = n
}
, function(e, t) {
    var i = OpenLayers.Class(OpenLayers.Control.PanZoomBar, {
        zoomStopWidth: 27,
        zoomStopHeight: 9,
        streetViewContainer: null ,
        draw: function(e) {
            var t = null === this.div;
            OpenLayers.Control.prototype.draw.apply(this, arguments),
            this.div.style.left = "",
            this.div.style.top = "",
            e = this.position.clone(),
            this.buttons = [];
            var i = new OpenLayers.Size(32,32)
              , n = new OpenLayers.Pixel(e.x + i.w / 2,e.y);
            return i.w,
            this._addButton("zoomin", n, i, "zoom-plus-button"),
            this._addZoomBar(n),
            this._addButton("zoomout", n, i, "zoom-minus-button"),
            this.streetViewContainer = $("<div />").addClass("street-view-control-container").appendTo($(this.div)),
            this.geoLocationContainer = $("<div />").addClass("geolocation-control-container").appendTo($(this.div)),
            this.buttons.push(this.streetViewContainer.get(0)),
            t && $(this.div).on("click", function(e) {
                var t = e.target;
                switch (t.action) {
                case "zoomin":
                    t.map.zoomIn();
                    break;
                case "zoomout":
                    t.map.zoomOut()
                }
                return !1
            }).on("dblclick click mousedown dragstart", function(e) {
                e.stopPropagation()
            }),
            this.events.triggerEvent("drawn"),
            this.div
        },
        _addZoomBar: function(e) {
            var t = (this.id + "_" + this.map.id,
            this.map.getNumZoomLevels() - 1 - this.map.getZoom())
              , i = document.createElement("div");
            i.style.top = e.y + t * this.zoomStopHeight + "px",
            $(i).addClass("slider"),
            this.slider = i,
            this.sliderEvents = new OpenLayers.Events(this,i,null ,!0,{
                includeXY: !0
            }),
            this.sliderEvents.on({
                mousedown: this.zoomBarDown,
                mousemove: this.zoomBarDrag,
                mouseup: this.zoomBarUp,
                dblclick: this.doubleClick,
                click: this.doubleClick
            });
            var n = new OpenLayers.Size;
            n.h = this.zoomStopHeight * this.map.getNumZoomLevels(),
            n.w = this.zoomStopWidth;
            var s = null ;
            return s = document.createElement("div"),
            s.id = "OpenLayers_Control_PanZoomBar_Zoombar" + this.map.id,
            s.style.top = e.y - 0 * this.zoomStopHeight + "px",
            s.style.height = this.zoomStopHeight * (this.map.getNumZoomLevels() + 0) + "px",
            $(s).addClass("slider-stops"),
            this.zoombarDiv = s,
            this.divEvents = new OpenLayers.Events(this,s,null ,!0,{
                includeXY: !0
            }),
            this.divEvents.on({
                mousedown: this.divClick,
                mousemove: this.passEventToSlider,
                dblclick: this.doubleClick,
                click: this.doubleClick
            }),
            this.div.appendChild(s),
            this.startTop = parseInt(s.style.top, 10),
            this.div.appendChild(i),
            this.map.events.register("zoomend", this, this.moveZoomBar),
            e = e.add(0, this.zoomStopHeight * this.map.getNumZoomLevels())
        },
        doubleClick: function(e) {
            return OpenLayers.Event.stop(e),
            !1
        },
        divClick: function(e) {
            if (OpenLayers.Event.isLeftClick(e)) {
                var t = e.xy.y / this.zoomStopHeight;
                !this.forceFixedZoomLevel && this.map.fractionalZoom || (t = Math.floor(t));
                var i = this.map.getNumZoomLevels() - 1 - t;
                i = Math.min(Math.max(i, 0), this.map.getNumZoomLevels() - 1),
                this.map.zoomTo(i),
                OpenLayers.Event.stop(e)
            }
        },
        getZoomStopsHeight: function() {
            return this.zoomStopHeight * this.map.getNumZoomLevels()
        },
        _addButton: function(e, t, i, n) {
            var s, r = document.createElement("div"), o = $(r);
            if (this.map,
            r.style.top = t.y + "px",
            r.id = this.id + "_" + e,
            o.addClass(n),
            o.addClass("zoom-button"),
            this.div.appendChild(r),
            r.action = e,
            r.map = this.map,
            this.slideRatio) {
                var a = this.slideRatio;
                s = function(e) {
                    return this.map.getSize()[e] * a
                }
            } else {
                var l = this.slideFactor;
                s = function() {
                    return l
                }
            }
            return r.getSlideFactor = s,
            this.buttons.push(r),
            r
        },
        show: function() {
            $(this.div).show()
        },
        hide: function() {
            $(this.div).hide()
        },
        CLASS_NAME: "OpenLayers.Control.PanZoomBar"
    });
    e.exports = i
}
, function(e, t, i) {
    var n, s = i(4);
    n = OpenLayers.Class(s, {
        nested: {
            driveGeometry: OL.Geometry,
            routeGeometry: OL.Geometry
        },
        instructions: null ,
        getRouteInstructions: function() {
            return null === this.instructions && (this.routeInstructions ? this.instructions = this.routeInstructions.split(",").map(function(e, t) {
                return {
                    code: e,
                    point: this.routeGeometry.components[t].components.first()
                }
            }, this) : this.instructions = []),
            this.instructions
        },
        _updateCommentFlag: function() {
            if (1 === this.comments.length) {
                var e = this.model.mapUpdateRequests.get(this.getID());
                e && (e.attributes.hasComments = !0,
                this.model.mapUpdateRequests.changed(e))
            }
        },
        hasPendingComments: function() {
            var e, t, i = this.comments || [], n = +Date.today().setTimeToNow().add(-2).weeks();
            return e = i.filter(function(e) {
                return e.createdOn > n
            }),
            0 !== e.length && (t = e.some(function(e) {
                return e.userID === -1
            }),
            !t)
        },
        getComments: function() {
            return new Backbone.Collection(this.comments)
        },
        getIsFollowing: function() {
            return this.isFollowing
        },
        setFollowing: function(e) {
            return $.post(W.Config.paths.updateRequestFollow, {
                mapUpdateRequestID: this.getID(),
                follow: e
            }).done(function() {
                this.isFollowing = e
            }
            .bind(this))
        },
        addComment: function(e) {
            var t = this;
            return $.post(W.Config.paths.updateRequestComments, {
                mapUpdateRequestID: this.getID(),
                text: e
            }).done(function(e) {
                e.isAutoFollowed && (t.isFollowing = !0),
                t.comments.push(e.comment),
                t._updateCommentFlag()
            }).then(function(e) {
                return new Backbone.Model(e.comment)
            })
        },
        getCommentable: function() {
            return {
                getComments: this.getComments.bind(this),
                isFollowing: this.getIsFollowing.bind(this),
                setFollowing: this.setFollowing.bind(this),
                addComment: this.addComment.bind(this)
            }
        },
        CLASS_NAME: "Waze.Feature.UpdateRequestSession"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(49), r = i(16);
    n = OpenLayers.Class(s, {
        initialize: function(e, t) {
            r.prototype.initialize.apply(this, arguments),
            this.editable = this.attributes.open,
            this.attributes.reroutePercent = this.reroutePercent(),
            this.setSeverity(this.attributes.priority)
        },
        reroutePercent: function() {
            return (this.attributes.reroutesCounter / (this.attributes.reroutesCounter + this.attributes.routesCounter) * 100).toFixed(0)
        },
        setSeverity: function(e) {
            var t = "high";
            t = e === -1 ? "low" : this.attributes.reroutePercent >= 90 ? "high" : "medium",
            this.attributes.severity = t
        },
        CLASS_NAME: "Waze.Feature.Vector.TurnProblem"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(16);
    n = OpenLayers.Class(s, {
        nested: {
            geometry: OL.Geometry,
            bounds: OL.Geometry
        },
        ONE_WEEK_IN_MILLIS: 6048e5,
        SeverityThreshold: {
            low: 4,
            medium: 14
        },
        editable: !0,
        initialize: function(e) {
            s.prototype.initialize.apply(this, arguments),
            this.editable = this.attributes.open,
            this.attributes.typeText = this.getTypeText(),
            this.setSeverity()
        },
        merge: function(e) {
            s.prototype.merge.apply(this, arguments),
            this.editable = this.attributes.open
        },
        getRequestBounds: function() {
            return this.requestBounds || (this.requestBounds = this.attributes.bounds),
            this.requestBounds
        },
        Type: {
            INCORRECT_TURN: 6,
            INCORRECT_ADDRESS: 7,
            INCORRECT_ROUTE: 8,
            INCORRECT_MISSING_ROUNDABOUT: 9,
            INCORRECT_GENERAL_ERROR: 10,
            TURN_NOT_ALLOWED: 11,
            INCORRECT_JUNCTION: 12,
            MISSING_BRIDGE_OVERPASS: 13,
            WRONG_DRIVING_DIRECTIONS: 14,
            MISSING_EXIT: 15,
            MISSING_ROAD: 16
        },
        getTypeText: function() {
            return I18n.t("update_requests.types." + this.attributes.type)
        },
        setSeverity: function() {
            var e = new window.TimeSpan(Date.now() - this.attributes.driveDate)
              , t = e.days
              , i = "high";
            t <= this.SeverityThreshold.low ? i = "low" : t <= this.SeverityThreshold.medium && (i = "medium"),
            this.attributes.severity = i
        },
        isRecentlyClosed: function() {
            return !this.attributes.open && Date.now() - this.attributes.resolvedOn <= this.ONE_WEEK_IN_MILLIS
        },
        getLocation: function() {
            return this.attributes.geometry
        },
        canEdit: function() {
            return this.isAllowed(this.PERMISSIONS.EDIT)
        },
        PERMISSIONS: {
            EDIT: 1,
            FORCE_CLOSE: 2
        },
        CLASS_NAME: "Waze.Feature.Vector.UpdateRequest"
    }),
    e.exports = n
}
, function(e, t) {
    var i = OpenLayers.Class(OpenLayers.Format.JSON, {
        initialize: function(e) {
            OpenLayers.Format.JSON.prototype.initialize.apply(this, [e])
        },
        write: function(e) {
            return e._subActions ? this.writeSubActions(e._subActions) : this.writeSubActions(e),
            OpenLayers.Format.JSON.prototype.write.apply(this, [{
                actions: e
            }])
        },
        writeSubActions: function(e) {
            e.forEach(function(e) {
                e._subActions && this.writeSubActions(e._subActions)
            }, this)
        },
        CLASS_NAME: "Waze.Format.Operation"
    });
    e.exports = i
}
, function(e, t) {
    var i = OpenLayers.Class(OpenLayers.Geometry.Point, {
        points: null ,
        initialize: function(e) {
            OpenLayers.Geometry.Point.prototype.initialize.apply(this, [e[0].x, e[0].y]),
            this.points = e
        },
        clone: function() {
            return new i(this.points)
        },
        calculateBounds: function() {
            OpenLayers.Geometry.Point.prototype.calculateBounds.apply(this);
            for (var e = 0; e < this.points.length; e++)
                this.points[e].calculateBounds()
        },
        move: function(e, t) {
            OpenLayers.Geometry.Point.prototype.move.apply(this, arguments);
            for (var i = 0; i < this.points.length; i++)
                this.points[i].move(e, t)
        },
        translate: function(e, t) {
            this.x = e,
            this.y = t,
            this.clearBounds(),
            this.points.forEach(function(i) {
                i.x = e,
                i.y = t,
                i.clearBounds()
            })
        },
        rotate: function(e, t) {
            OpenLayers.Geometry.Point.prototype.rotate.apply(this, arguments);
            for (var i = 0; i < this.points.length; i++)
                this.points[i].rotate(e, t)
        },
        resize: function(e, t, i) {
            OpenLayers.Geometry.Point.prototype.resize.apply(this, arguments);
            for (var n = 0; n < this.points.length; n++)
                this.points[n].resize(e, t, i)
        },
        transform: function(e, t) {
            OpenLayers.Geometry.Point.prototype.transform.apply(this, arguments);
            for (var i = 0; i < this.points.length; i++)
                this.points[i].transform(e, t)
        }
    });
    e.exports = i
}
, function(e, t, i) {
    var n, s = i(23);
    n = OpenLayers.Class(OpenLayers.Handler, {
        drawing: !1,
        dragging: !1,
        layer: null ,
        style: null ,
        point: null ,
        lastDown: null ,
        lastMove: null ,
        distanceLine: null ,
        radius: 0,
        rx: 0,
        ry: 0,
        regular: !1,
        geodesicPixelSize: null ,
        MinEllipseSize: 15,
        MaxEllipseSizeMeters: 100,
        oldOnselectstart: null ,
        initialize: function(e, t, i) {
            i && i.layerOptions && i.layerOptions.styleMap || (this.style = OpenLayers.Util.extend(OpenLayers.Feature.Vector.style.default, {})),
            OpenLayers.Handler.prototype.initialize.apply(this, arguments)
        },
        setRegular: function(e) {
            this.regular !== e && (this.regular = e,
            this.modifyFeature(this.lastMove))
        },
        activate: function() {
            if (!OpenLayers.Handler.prototype.activate.apply(this, arguments))
                return !1;
            var e = OpenLayers.Util.extend({
                displayInLayerSwitcher: !1,
                calculateInRange: OpenLayers.Function.True
            }, this.layerOptions)
              , t = OpenLayers.Layer.Vector.prototype.renderers;
            return OpenLayers.Layer.Vector.prototype.renderers = [s],
            this.layer = new OpenLayers.Layer.Vector(this.CLASS_NAME,e),
            OpenLayers.Layer.Vector.prototype.renderers = t,
            this.map.addLayer(this.layer),
            this.map.events.on({
                zoomend: this.onZoom,
                scope: this
            }),
            !0
        },
        deactivate: function() {
            return !!OpenLayers.Handler.prototype.deactivate.apply(this, arguments) && (this.drawing && this.cancel(),
            this.destroyFeature(),
            null !== this.layer.map && this.layer.destroy(!1),
            this.map.events.un({
                zoomend: this.zoomend
            }),
            this.layer = null ,
            !0)
        },
        onZoom: function() {
            this.drawing && this.cancel()
        },
        dblclick: function(e) {
            return OpenLayers.Event.stop(e),
            !1
        },
        mouseup: function(e) {
            if (this.drawing && this.dragging)
                return this.finalize(),
                !1
        },
        mousedown: function(e) {
            return this.drawing ? (this.finalize(),
            !1) : (this.oldOnselectstart || (this.oldOnselectstart = document.onselectstart ? document.onselectstart : OpenLayers.Function.True),
            document.onselectstart = OpenLayers.Function.False,
            !this.checkModifiers(e) || !(!this.lastDown || !this.lastDown.equals(e.xy)) || (this.drawing = !0,
            this.geodesicPixelSize = this.map.getGeodesicPixelSize().w,
            null === this.lastDown && this.createFeature(e.xy),
            this.lastDown = e.xy,
            !1))
        },
        createFeature: function(e) {
            var t, i = this.map.getLonLatFromPixel(e), n = new OpenLayers.Geometry.LineString;
            t = this.style ? OpenLayers.Util.extend({}, this.style) : OpenLayers.Util.extend({}, this.layerOptions.styleMap.styles.default.defaultStyle),
            t.rx = this.MinEllipseSize,
            t.ry = this.MinEllipseSize,
            this.point = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.Point(i.lon,i.lat),{},t),
            n.addPoint(this.point.geometry.clone()),
            n.addPoint(this.point.geometry.clone()),
            this.distanceLine = new OpenLayers.Feature.Vector(n),
            this.callback("create", [this.point.geometry, this.point]),
            this.point.geometry.clearBounds(),
            this.layer.addFeatures([this.point], {
                silent: !0
            })
        },
        finalize: function(e) {
            document.onselectstart = this.oldOnselectstart;
            var t, i = e ? "cancel" : "done";
            this.point && (t = new OpenLayers.LonLat(this.point.geometry.x,this.point.geometry.y)),
            this.drawing = !1,
            this.dragging = !1,
            this.regular = !1,
            this.destroyFeature(),
            Math.min(this.rx, this.ry) > this.MinEllipseSize && this.callback(i, [{
                x: t.lon,
                y: t.lat,
                rx: this.rx,
                ry: this.ry
            }]),
            this.lastDown = null ,
            this.rx = 0,
            this.ry = 0
        },
        destroyFeature: function() {
            this.layer && this.layer.destroyFeatures(),
            this.point = null ,
            this.distanceLine = null
        },
        cancel: function() {
            this.finalize(!0)
        },
        modifyFeature: function(e, t) {
            var i, n, s, r, o, a, l, u, c, d, h = this.distanceLine.geometry.components.last(), p = new OpenLayers.LonLat(this.point.geometry.x,this.point.geometry.y);
            this.lastMove = e,
            d = this.map.getPixelFromLonLat(p),
            l = e.y - d.y,
            a = e.x - d.x,
            o = Math.atan2(l, a),
            this.rx = Math.abs(a),
            this.ry = Math.abs(l),
            this.rx < this.MinEllipseSize && (this.rx = this.MinEllipseSize),
            this.ry < this.MinEllipseSize && (this.ry = this.MinEllipseSize),
            n = Math.floor(this.geodesicPixelSize * this.rx * 1e3),
            s = Math.floor(this.geodesicPixelSize * this.ry * 1e3),
            n > this.MaxEllipseSizeMeters && (this.rx = 1 / (10 * this.geodesicPixelSize)),
            s > this.MaxEllipseSizeMeters && (this.ry = 1 / (10 * this.geodesicPixelSize)),
            r = Math.max(this.rx, this.ry),
            i = Math.ceil(this.geodesicPixelSize * r * 1e3),
            t.shiftKey || (this.rx = r,
            this.ry = r),
            this.ry > this.rx ? (u = this.rx / this.ry,
            c = 1) : (c = this.ry / this.rx,
            u = 1),
            o = Math.atan2(l / c, a / u),
            this.callback("modify", [this.point.geometry, this.point]),
            h.x = p.lon + this.rx * Math.cos(o) * this.map.getResolution(),
            h.y = p.lat - this.ry * Math.sin(o) * this.map.getResolution(),
            h.clearBounds(),
            this.distanceLine.geometry.clearBounds(),
            this.point.geometry.clearBounds(),
            this.point.style.rx = this.rx,
            this.point.style.ry = this.ry,
            this.point.style.label = i + "m",
            this.drawCircle()
        },
        drawCircle: function() {
            this.layer.drawFeature(this.point),
            this.layer.drawFeature(this.distanceLine)
        },
        mousemove: function(e) {
            return this.drawing && (this.dragging = !0,
            this.modifyFeature(e.xy, e),
            this.oldOnselectstart || (this.oldOnselectstart = document.onselectstart,
            document.onselectstart = OpenLayers.Function.False)),
            !1
        },
        CLASS_NAME: "Waze.Handler.Ellipse"
    }),
    e.exports = n
}
, function(e, t) {
    var i = OpenLayers.Class(OpenLayers.Handler, {
        EVENTMAP: {
            mousemove: {
                in: "over",
                out: "out"
            },
            click: {
                in: "click"
            },
            dblclick: {
                in: "dblclick",
                out: null
            }
        },
        feature: null ,
        lastFeature: null ,
        geometryTypes: null ,
        initialize: function(e, t, i, n) {
            OpenLayers.Handler.prototype.initialize.apply(this, [e, i, n]),
            this.layer = t
        },
        mousemove: function(e) {
            return !this.callbacks.over && !this.callbacks.out || (this.handle(e),
            !0)
        },
        click: function(e) {
            return !this.handle(e) || !this.stopClick
        },
        geometryTypeMatches: function(e) {
            return null === this.geometryTypes || OpenLayers.Util.indexOf(this.geometryTypes, e.geometry.CLASS_NAME) > -1
        },
        handle: function(e) {
            this.feature && !this.feature.layer && (this.feature = null );
            var t = e.type
              , i = !1
              , n = !!this.feature;
            if (this.feature = this.layer.getFeatureFromEvent(e),
            this.feature && !this.feature.layer && (this.feature = null ),
            this.lastFeature && !this.lastFeature.layer && (this.lastFeature = null ),
            this.feature) {
                var s = this.feature !== this.lastFeature
                  , r = s && this.feature._virtualParent === this.lastFeature
                  , o = "click" === t || "dblclick" === t || "touchstart" === t;
                this.geometryTypeMatches(this.feature) && this.feature.layer && !this.feature.layer.featuresNonSelectable ? (n && s && !r ? (this.lastFeature && this.triggerCallback(t, "out", [this.lastFeature]),
                this.triggerCallback(t, "in", [this.feature])) : n && !o || this.triggerCallback(t, "in", [this.feature]),
                this.lastFeature = this.feature,
                i = !0) : (this.lastFeature && n && s && this.triggerCallback(t, "out", [this.lastFeature]),
                this.feature = null )
            } else
                this.lastFeature && n && this.triggerCallback(t, "out", [this.lastFeature]);
            return i
        },
        triggerCallback: function(e, t, i) {
            var n = this.EVENTMAP[e][t];
            n && this.callback(n, i)
        },
        activate: function() {
            var e = !1;
            return OpenLayers.Handler.prototype.activate.apply(this, arguments) && (this.moveLayerToTop(),
            this.map.events.on({
                removelayer: this.handleMapEvents,
                changelayer: this.handleMapEvents,
                scope: this
            }),
            e = !0),
            e
        },
        deactivate: function() {
            var e = !1;
            return OpenLayers.Handler.prototype.deactivate.apply(this, arguments) && (this.moveLayerBack(),
            this.feature = null ,
            this.lastFeature = null ,
            this.down = null ,
            this.up = null ,
            this.map.events.un({
                removelayer: this.handleMapEvents,
                changelayer: this.handleMapEvents,
                scope: this
            }),
            e = !0),
            e
        },
        handleMapEvents: function(e) {
            e.property && "order" !== e.property || this.moveLayerToTop()
        },
        moveLayerToTop: function() {
            var e = Math.max(this.map.Z_INDEX_BASE.Feature - 1, this.layer.getZIndex()) + 1;
            this.layer.setZIndex(e)
        },
        moveLayerBack: function() {
            var e = this.layer.getZIndex() - 1;
            e >= this.map.Z_INDEX_BASE.Feature ? this.layer.setZIndex(e) : this.map.setLayerZIndex(this.layer, this.map.getLayerIndex(this.layer))
        },
        CLASS_NAME: "Waze.Handler.Feature"
    });
    e.exports = i
}
, function(e, t) {
    I18n.pluralization.ru = function(e) {
        var t = e % 10 === 1 && e % 100 !== 11 ? "one" : [2, 3, 4].indexOf(e % 10) >= 0 && [12, 13, 14].indexOf(e % 100) < 0 ? "few" : e % 10 === 0 || [5, 6, 7, 8, 9].indexOf(e % 10) >= 0 || [11, 12, 13, 14].indexOf(e % 100) >= 0 ? "many" : "other";
        return [t]
    }
    ,
    I18n.pluralization.oneRule = function(e) {
        return ["other"]
    }
    ,
    ["ko", "ja", "ms", "zh", "zh", "zh-TW"].forEach(function(e) {
        I18n.pluralization[e] = I18n.pluralization.oneRule
    });
    var i = I18n.pluralization.get;
    I18n.pluralization.get = function() {
        var e = i.apply(this, arguments);
        return function() {
            var t = e.apply(null , arguments);
            return t.push("other"),
            t
        }
    }
    ,
    e.exports = {}
}
, function(e, t, i) {
    var n, s = i(23), r = i(92), o = i(75);
    n = OpenLayers.Class(OpenLayers.Layer.Vector, {
        rendererOptions: {
            zIndexing: !0
        },
        displayInLayerSwitcher: !0,
        renderers: [s],
        styleMap: r,
        initialize: function(e, t) {
            OpenLayers.Layer.Vector.prototype.initialize.apply(this, arguments),
            this.driveRenderer = new o(this),
            this.styleMap.styles.select = new OpenLayers.Style({
                strokeColor: "black",
                strokeWidth: 10,
                pointerEvents: "none"
            }),
            this.styleMap.styles.highlight = new OpenLayers.Style({
                strokeWidth: 10,
                strokeOpacity: 1
            })
        },
        setMap: function(e) {
            OpenLayers.Layer.Vector.prototype.setMap.apply(this, arguments),
            this.map.events.on({
                zoomend: this.onZoomEnd,
                scope: this
            })
        },
        destroy: function() {
            OpenLayers.Layer.Vector.prototype.destroy.apply(this, arguments),
            this.map && this.map.events.un({
                zoomend: this.onZoomEnd
            })
        },
        onZoomEnd: function() {
            this.redraw()
        },
        drawDrive: function() {
            this.clearDrive();
            var e = this.pm.currentSessionData;
            e && e.driveParts.forEach(function(e) {
                e.isMatched() ? this.driveRenderer.drawUserDrive(e.geometry) : this.driveRenderer.drawDisconnect(e.geometry)
            }, this)
        },
        clearDrive: function() {
            this.removeAllFeatures()
        },
        zoomToDrive: function() {
            var e, t, i = this.pm.currentSessionData;
            i && (e = i.getDriveBounds(),
            t = this.map.getZoomForExtent(e),
            this.map.setCenter(e.getCenterLonLat(), t))
        },
        redraw: function() {
            this.pm && this.drawDrive()
        },
        CLASS_NAME: "Waze.Layer.ArchiveLayer"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n;
    i(6),
    n = OpenLayers.Class(OpenLayers.Layer.XYZ, {
        key: null ,
        tileUrl: "https://www.googleapis.com/tile/v1/tiles/${z}/${x}/${y}?session=${session}&key=${key}",
        type: "satellite",
        language: "en-US",
        region: "us",
        sessionKey: null ,
        gettingSession: !1,
        sessionError: !1,
        attributionRequest: null ,
        ATTRIBUTION_THROTTLE: 1e3,
        initialize: function(e) {
            e = OpenLayers.Util.applyDefaults({
                sphericalMercator: !0
            }, e);
            var t = e.name || "Google " + (e.type || this.type)
              , i = [t, null , e];
            OpenLayers.Layer.XYZ.prototype.initialize.apply(this, i),
            this.tileOptions = OpenLayers.Util.extend({
                crossOriginKeyword: null
            }, this.options.tileOptions),
            this.getSessionKey(),
            this.updateAttribution = _.debounce(this.updateAttribution, this.ATTRIBUTION_THROTTLE)
        },
        getSessionKey: function() {
            if (!this.gettingSession && !this.sessionError) {
                this.gettingSession = !0;
                var e = this;
                $.ajax({
                    type: "post",
                    url: "https://www.googleapis.com/tile/v1/createSession?key=" + this.key,
                    contentType: "application/json; charset=utf-8",
                    crossDomain: !0,
                    data: JSON.stringify({
                        mapType: this.type,
                        language: this.language,
                        region: this.region
                    })
                }).done(function(t) {
                    e.sessionKey = t.session,
                    window.setTimeout($.proxy(e.onSessionExpire, e), 72e6),
                    e.redraw(),
                    e.updateAttribution()
                }).error(function() {
                    e.sessionError = !0,
                    e.events.triggerEvent("loaderror")
                }).always(function() {
                    e.gettingSession = !1
                })
            }
        },
        onSessionExpire: function() {
            this.map.events.register("movestart", this, this.renewSessionKey)
        },
        renewSessionKey: function() {
            this.map.events.unregister("movestart", this, this.renewSessionKey),
            this.sessionKey = null ,
            this.getSessionKey()
        },
        getURL: function(e) {
            if (this.sessionKey) {
                var t = this.getXYZ(e);
                return t.x,
                t.y,
                t.z,
                t.session = this.sessionKey,
                t.key = this.key,
                OpenLayers.String.format(this.tileUrl, t)
            }
        },
        updateAttribution: function() {
            if (null !== this.sessionKey) {
                null !== this.attributionRequest && this.attributionRequest.abort();
                var e = this.map.getExtent()
                  , t = this;
                null !== e && (e.transform(this.map.getProjectionObject(), new OpenLayers.Projection("EPSG:4326")),
                this.attributionRequest = $.get("https://www.googleapis.com/tile/v1/viewport", {
                    key: this.key,
                    session: this.sessionKey,
                    zoom: this.getServerZoom(),
                    north: e.top,
                    south: e.bottom,
                    east: e.right,
                    west: e.left
                }).done(function(e) {
                    t.attribution = e.copyright,
                    t.attribution.length > 0 && (t.attribution += " "),
                    t.attribution += "<a href='http://www.google.com/intl/en-US_US/help/terms_maps.html' target='_blank'>Terms</a>",
                    t.attribution += "<a href='https://www.waze.com/legal/notices' target='_blank'>Notices</a>"
                }).error(function() {
                    t.attribution = ""
                }).always(function() {
                    t.attributionRequest = null ,
                    t.map.events.triggerEvent("changelayer", {
                        layer: t,
                        property: "attribution"
                    })
                }))
            }
        },
        setMap: function() {
            OpenLayers.Layer.XYZ.prototype.setMap.apply(this, arguments),
            this.updateAttribution(),
            this.map.events.register("moveend", this, this.updateAttribution)
        },
        clone: function(e) {
            return null === e && (e = new OpenLayers.Layer.Google(this.options)),
            e = OpenLayers.Layer.XYZ.prototype.clone.apply(this, [e])
        },
        destroy: function() {
            this.map && this.map.events.unregister("moveend", this, this.updateAttribution),
            OpenLayers.Layer.XYZ.prototype.destroy.apply(this, arguments)
        },
        CLASS_NAME: "OpenLayers.Layer.Google"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(41);
    n = OpenLayers.Class(s, {
        nodeDisplayMaxScale: 1e4,
        shouldDisplayFeature: function(e) {
            return !0
        },
        onNodesAdded: function(e) {
            this.onFeaturesAdded(e)
        },
        onNodesChanged: function(e) {
            this.onFeaturesChanged(e)
        },
        onNodesRemoved: function(e) {
            this.onFeaturesRemoved(e)
        },
        onDisplayChanged: function(e) {
            this.displayedNodes = e.scale <= this.nodeDisplayMaxScale
        },
        updateDisplayedFeatures: function(e) {
            s.prototype.updateDisplayedFeatures.apply(this, [OpenLayers.Util.extend({}, e.nodes)])
        },
        CLASS_NAME: "Waze.Layer.NodeLayer"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(41);
    n = OpenLayers.Class(s, {
        colorEmptyStreetSegments: !1,
        initialize: function() {
            s.prototype.initialize.apply(this, arguments),
            W.accelerators.events.register("colorEmptyStreets", this, this.colorEmptyStreetsToggled)
        },
        colorEmptyStreetsToggled: function() {
            this.colorEmptyStreetSegments = !this.colorEmptyStreetSegments,
            this.redraw()
        },
        CLASS_NAME: "Waze.Layer.SegmentLayer"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(41), r = i(23);
    n = OL.Class(s, {
        fogOfWar: null ,
        renderers: [r],
        styleMap: new OL.StyleMap({
            default: new OL.Style({
                fillOpacity: .3,
                strokeOpacity: 1,
                strokeWidth: 6,
                fillColor: "white"
            })
        }),
        setMap: function() {
            s.prototype.setMap.apply(this, arguments)
        },
        setVisibility: function() {
            s.prototype.setVisibility.apply(this, arguments),
            this.getVisibility() ? (this.map.events.register("moveend", this, this._refreshFogOfWar),
            this._updateUserAreas()) : this.map.events.unregister("moveend", this, this._refreshFogOfWar)
        },
        _refreshFogOfWar: function() {
            this.removeFeatures(this.fogOfWar),
            this._createFogOfWar(),
            this.addFeatures(this.fogOfWar),
            this.redraw()
        },
        onFeaturesAdded: function() {
            this._updateUserAreas()
        },
        _updateUserAreas: function() {
            if (this.removeAllFeatures(),
            this.getVisibility()) {
                var e = [];
                this.model.userAreas.getObjectArray().forEach(function(t) {
                    this._createEditableAreaVector(e, t.geometry)
                }, this),
                this._createFogOfWar(),
                this.addFeatures(e),
                this.addFeatures(this.fogOfWar)
            }
        },
        _createEditableAreaVector: function(e, t) {
            e.push(new OL.Feature.Vector(t,{},{
                maskID: "editableAreaMask",
                fillColor: "#000000",
                fillOpacity: 1
            })),
            e.push(new OL.Feature.Vector(t.clone(),{},{
                fillColor: "transparent",
                fillOpacity: 0,
                strokeColor: "gray",
                strokeWidth: 1
            }))
        },
        _createFogOfWar: function() {
            this.fogOfWar = new OL.Feature.Vector(this.map.getExtent().toGeometry(),{},{
                fillColor: "black",
                fillOpacity: .5,
                strokeWidth: 0,
                mask: "url(#editableAreaMask)"
            })
        },
        CLASS_NAME: "Waze.Layer.UserLayer"
    }),
    e.exports = n
}
, function(e, t) {
    e.exports = OpenLayers.Class({
        lastValue: null ,
        step: null ,
        initialize: function(e, t) {
            var i = isNaN(e) ? 0 : e;
            this.step = isNaN(t) || 0 === t ? 1 : t,
            this.lastValue = i - this.step
        },
        last: function() {
            return this.lastValue
        },
        next: function() {
            return this.lastValue += this.step,
            this.lastValue
        },
        peek: function() {
            return this.lastValue + this.step
        },
        CLASS_NAME: "Waze.Model.IDGenerator"
    })
}
, function(e, t, i) {
    var n, s = i(39);
    n = OpenLayers.Class(s, {
        landmarkBounds: null ,
        updateRequestBounds: null ,
        venueLevel: null ,
        categoryBrands: null ,
        zoomToSize: null ,
        retrieveUpdateRequests: !1,
        initialize: function(e, t) {
            s.prototype.initialize.apply(this, arguments),
            this.zoomToSize = W.Config.venues.zoomToSize,
            this.categoryBrands = {}
        },
        destroy: function() {
            this.landmarkBounds = null ,
            this.updateRequestBounds(),
            s.prototype.destroy.apply(this, arguments)
        },
        updateDataExtent: function(e, t, i) {
            var n = this.zoomToSize[i]
              , s = {};
            if (!n)
                return s;
            var r = this.model.repositoryFilters.get(this.objectType);
            return this._areLandmarksInBounds(e) && this.venueLevel === n || (s.venueLevel = n,
            s[this.filterName] = r,
            this.retrieveUpdateRequests && (s.venueUpdateRequests = !0)),
            this.retrieveUpdateRequests && !this._areUpdateRequestsInBounds(e) && (s.venueUpdateRequests = !0,
            s.venueLevel = n,
            s[this.filterName] = r),
            s
        },
        _areLandmarksInBounds: function(e) {
            return this.landmarkBounds && this.landmarkBounds.containsBounds(e)
        },
        _areUpdateRequestsInBounds: function(e) {
            return this.updateRequestBounds && this.updateRequestBounds.containsBounds(e)
        },
        mergeObjects: function(e, t, i, n, r) {
            this.isFilterBitSet(this.FILTERS.PARKING) || (e.objects = e.objects.filter(function(e) {
                return !this.FILTERS.PARKING.callback(e)
            }, this)),
            this.landmarkBounds = i.clone(),
            this.retrieveUpdateRequests ? this.updateRequestBounds = i.clone() : this.updateRequestBounds = null ,
            this.venueLevel = e.venueLevel,
            this.categoryBrands = e.categoryBrands || {},
            s.prototype.mergeObjects.apply(this, arguments)
        },
        clear: function() {
            this.landmarkBounds = null ,
            this.updateRequestBounds = null ,
            this.venueLevel = null ,
            s.prototype.clear.apply(this, arguments)
        },
        CLASS_NAME: "Waze.Model.LandmarkRepository"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(4);
    n = OpenLayers.Class(s, {
        averageSpeed: null ,
        getAverageSpeed: function() {
            return this.averageSpeed || (this.averageSpeed = this.totalRoadMeters / (this.endTime - this.startTime) * 3600),
            this.averageSpeed
        },
        CLASS_NAME: "Waze.Feature.Vector.Archive"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(4), r = i(546);
    n = OpenLayers.Class(s, {
        nested: {
            driveParts: r
        },
        bounds: null ,
        getDriveBounds: function() {
            return null !== this.bounds ? this.bounds : (this.bounds = this.driveParts.reduce(function(e, t) {
                return t.geometry.calculateBounds(),
                e.extend(t.geometry.bounds),
                e
            }, new OpenLayers.Bounds),
            this.bounds)
        },
        CLASS_NAME: "Waze.Feature.Vector.ArchiveSession"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(4), r = i(28), o = i(127);
    n = OpenLayers.Class(s, {
        nested: {
            editableAreas: OL.Geometry,
            managedAreas: OL.Geometry,
            areas: o
        },
        LevelToMiles: {
            1: 1,
            2: 2,
            3: 3,
            4: 4,
            5: 4,
            6: 4
        },
        initialize: function() {
            s.prototype.initialize.apply(this, arguments),
            this._parseLegacyEditableAreas(),
            this.normalizedLevel = r.prototype.NormalizedLevels[this.rank],
            this.editableMiles = this.LevelToMiles[this.normalizedLevel]
        },
        _parseLegacyEditableAreas: function() {
            if (this.editableAreasMeters) {
                var e = this.editableAreasMeters.map(function(e, t) {
                    return new o({
                        geometry: this.editableAreas.components[t],
                        area: e,
                        type: o.prototype.TYPE.DRIVE
                    })
                }, this)
                  , t = this.managedAreasMeters.map(function(e, t) {
                    return new o({
                        geometry: this.managedAreas.components[t],
                        area: e,
                        type: o.prototype.TYPE.MANAGED
                    })
                }, this);
                this.areas = e.concat(t)
            }
        },
        isCountryManager: function() {
            return this.editableCountryIDs && !this.editableCountryIDs.isEmpty()
        },
        CLASS_NAME: "Waze.Feature.Vector.LoggedInUser"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(39), r = i(31), o = i(6);
    n = OpenLayers.Class(s, {
        serializer: null ,
        initialize: function(e, t) {
            s.prototype.initialize.apply(this, arguments),
            this.serializer = new r
        },
        get: function(e, t, i, n) {
            var r, a = this, l = {}, u = $.Deferred();
            return null !== e && (o.is("Array", e) ? l = {
                ids: e.join(",")
            } : (r = s.prototype.get.apply(this, arguments),
            l = {
                id: e
            })),
            this.model.loginManager.isLoggedIn() || (l.sandbox = !0),
            o.defined(r) ? u.resolve(r) : (OpenLayers.Util.extend(l, t),
            $.get(this.url, l).then(function(e) {
                return a.serializer.read(e),
                e
            }).done(function(t) {
                a.onFeatureRead(t, u, e)
            }).fail(function() {
                u.reject()
            })),
            u
        },
        onFeatureRead: function(e, t, i) {
            e.users && this.model.users.mergeObjects(e.users, null , new OL.Bounds),
            e = e[this.objectType + "s"];
            var n = e.objects;
            delete e.objects,
            this.put(n),
            this.additionalInfo = e,
            t.resolve(n)
        },
        CLASS_NAME: "Waze.Model.OnDemandRepository"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n, s = i(8), r = i(39);
    n = OpenLayers.Class(r, {
        zoomToRoadType: null ,
        roadTypeBounds: null ,
        topCityID: null ,
        initialize: function(e, t) {
            r.prototype.initialize.apply(this, arguments),
            this.zoomToRoadType = W.Config.segments.zoomToRoadType,
            this.roadTypeBounds = {}
        },
        destroy: function() {
            this.roadTypeBounds = null ,
            r.prototype.destroy.apply(this, arguments)
        },
        updateDataExtent: function(e, t, i) {
            var n = this
              , s = this.zoomToRoadType[i] || []
              , r = [];
            return s === -1 && (s = W.Config.segments.allTypes),
            Object.keys(this.zoomToRoadType).forEach(function(t) {
                t = parseInt(t, 10);
                var i = s.contains(t)
                  , o = n.roadTypeBounds[t] && n.roadTypeBounds[t].containsBounds(e);
                o || i && r.push(t)
            }),
            r.isEmpty() ? null : {
                roadTypes: s.toString()
            }
        },
        mergeObjects: function(e, t, i, n, s) {
            this.currentDataBounds = i.clone();
            var o = e.roadTypes || [];
            o.forEach(function(e) {
                this.roadTypeBounds[e] = i
            }, this),
            this.calcTopCity(e),
            r.prototype.mergeObjects.apply(this, arguments)
        },
        getCityData: function(e, t, i) {
            var n = this.currentDataBounds.clone();
            return s.unproject(n),
            $.get(W.Config.paths.cityExists, {
                cityName: e,
                countryID: t,
                stateID: i,
                box: n.toBBOX()
            })
        },
        calcTopCity: function(e) {
            var t, i, n, s, r = {}, o = 0;
            this.topCityID = null ,
            e.objects.forEach(function(e) {
                s = this.model.streets.get(e.attributes.primaryStreetID),
                s && (n = s.cityID,
                i = this.model.cities.get(n),
                i && !i.isEmpty() && (t = r[n] || 0,
                r[n] = t++,
                t >= o && (o = t,
                this.topCityID = n)))
            }, this)
        },
        clear: function(e) {
            this.roadTypeBounds = {},
            r.prototype.clear.apply(this, arguments)
        },
        CLASS_NAME: "Waze.Model.SegmentRepository"
    }),
    e.exports = n
}
, function(e, t, i) {
    function n(e) {
        return i(s(e))
    }
    function s(e) {
        return r[e] || function() {
            throw new Error("Cannot find module '" + e + "'.")
        }()
    }
    var r = {
        "./Cities/Manifest": 564,
        "./Comments/Manifest": 572
    };
    n.keys = function() {
        return Object.keys(r)
    }
    ,
    n.resolve = s,
    e.exports = n,
    n.id = 1071
}
, function(e, t, i) {
    var n, s = i(24), r = i(109), o = i(139), a = i(2), l = i(10);
    n = s.extend({
        behaviors: {
            accelerators: {
                behaviorClass: o
            }
        },
        events: {
            "click .disallow-connections": "_disallowAllConnections",
            "click .allow-connections": "_allowAllConnections"
        },
        accelerators: {
            disallowAllConnections: "_disallowAllConnections",
            allowAllConnections: "_allowAllConnections"
        },
        template: "templates/node-edit",
        initialize: function() {
            s.prototype.initialize.apply(this, arguments),
            this.listenTo(this.dataModel.segments, l.CHANGED, this.onFeaturesChanged)
        },
        _isModelEditable: function() {
            var e = this.dataModel.segments.getByIds(this.model.attributes.segIDs);
            return e.every(function(e) {
                return e.canEditFromConnections() && e.canEditToConnections()
            })
        },
        _setAllConnections: function(e) {
            this.model.areConnectionsEditable() && (this.changing = !0,
            this.dataModel.actionManager.add(new r(this.model,e)),
            this.changing = !1,
            this.render())
        },
        hasEditedModelChanged: function(e) {
            if (s.prototype.hasEditedModelChanged.apply(this, arguments))
                return !0;
            var t = this.model.attributes.segIDs;
            return e.some(function(e) {
                return e.type === a.SEGMENT && t.contains(e.getID())
            })
        },
        _allowAllConnections: function() {
            this._setAllConnections(!0)
        },
        _disallowAllConnections: function() {
            this._setAllConnections(!1)
        }
    }),
    e.exports = n
}
, function(e, t) {
    var i = OpenLayers.Class({
        pendingFeatures: null ,
        current: null ,
        currentIntent: null ,
        flashTimeMillis: 100,
        flashIntent: "flash",
        initialize: function(e) {
            OpenLayers.Util.extend(this, e),
            this.pendingFeatures = [],
            this.current = null
        },
        destroy: function() {
            this.pendingFeatures.splice(0, this.pendingFeatures.length)
        },
        addFeature: function(e) {
            this.pendingFeatures.push(e),
            this.current || this.flash()
        },
        addFeatures: function(e) {
            this.pendingFeatures = this.pendingFeatures.concat(e),
            this.current || this.flash()
        },
        flash: function() {
            if (this.current && this.current.layer && this.current.renderIntent === this.flashIntent && this.current.layer.drawFeature(this.current, this.currentIntent),
            0 === this.pendingFeatures.length)
                return void (this.current = null );
            if (this.current = this.pendingFeatures.shift(),
            this.current = W.map.segmentLayer.getVector(this.current),
            this.current) {
                this.currentIntent = this.current.renderIntent,
                this.current.layer && this.current.layer.drawFeature(this.current, this.flashIntent);
                var e = this;
                window.setTimeout(function() {
                    e.flash()
                }, this.flashTimeMillis)
            }
        },
        CLASS_NAME: "Waze.Service.FlashService"
    });
    e.exports = i
}
, function(e, t, i) {
    var n, s = i(1073), r = i(10);
    n = OpenLayers.Class({
        flashService: null ,
        initialize: function(e, t) {
            OpenLayers.Util.extend(this, t),
            this.model = e,
            this.flashService = new s
        },
        destroy: function() {
            this.flashService.destroy()
        },
        activate: function() {
            this.model.segments.on(r.CHANGED, this.onSegmentsChanged, this),
            this.model.segments.on(r.ADDED, this.onSegmentsAdded, this)
        },
        deactivate: function() {
            this.model.segments.off(r.CHANGED, this.onSegmentsChanged, this),
            this.model.segments.off(r.ADDED, this.onSegmentsAdded, this)
        },
        flash: function(e) {
            e instanceof Array ? this.flashService.addFeatures(e) : this.flashService.addFeature(e)
        },
        onSegmentsChanged: function(e) {
            for (var t = [], i = 0, n = e.length; i < n; i++)
                e[i].state || t.push(e[i]);
            t.length > 0 && this.flash(t)
        },
        onSegmentsAdded: function(e) {
            for (var t = [], i = 0; i < 2; i++)
                for (var n = 0, s = e.length; n < s; n++)
                    e[n].state === OpenLayers.State.INSERT && e[n].attributes.origIDs && t.push(e[n]);
            t.length > 0 && this.flash(t)
        },
        CLASS_NAME: "Waze.Service.Services"
    }),
    e.exports = n
}
, function(e, t) {
    var i = OpenLayers.Class({
        active: !1,
        autoActivate: !0,
        autoDestroy: !0,
        initialize: function() {},
        destroy: function() {
            this.deactivate()
        },
        activate: function() {
            return !this.active && (this.active = !0,
            !0)
        },
        deactivate: function() {
            return !!this.active && (this.active = !1,
            !0)
        },
        CLASS_NAME: "Waze.Activatable"
    });
    e.exports = i
}
, function(e, t) {
    Object.values = function(e) {
        var t = [];
        for (var i in e)
            e.hasOwnProperty(i) && t.push(e[i]);
        return t
    }
    ,
    Object.keys || (Object.keys = function(e) {
        var t = [];
        for (var i in e)
            e.hasOwnProperty(i) && t.push(i);
        return t
    }
    ),
    Object.forEach = function(e, t, i) {
        for (var n in e)
            e.hasOwnProperty(n) && t.call(i, n, e[n])
    }
    ,
    Array.prototype.contains = function(e) {
        return this.indexOf(e) !== -1
    }
    ,
    Array.prototype.isEmpty = function() {
        return 0 === this.length
    }
    ,
    Object.printMap = function(e) {
        var t = "{";
        return Object.forEach(e, function(e, i) {
            t += e + ": " + i + ", "
        }),
        t += "}"
    }
    ,
    Array.prototype.unique = function() {
        for (var e = [], t = this.length, i = 0; i < t; i++) {
            for (var n = i + 1; n < t; n++)
                this[i] === this[n] && (n = ++i);
            e.push(this[i])
        }
        return e
    }
    ,
    Array.prototype.uniqueBy = function(e) {
        for (var t = [], i = this.length, n = 0; n < i; n++) {
            for (var s = n + 1; s < i; s++)
                e(this[n], this[s]) && (s = ++n);
            t.push(this[n])
        }
        return t
    }
    ,
    Array.prototype.union = function(e) {
        var t = [];
        return t = this.concat(e),
        t.unique()
    }
    ,
    Array.prototype.remove = function(e) {
        var t = this.indexOf(e)
          , i = this.clone();
        return t !== -1 && i.splice(t, 1),
        i
    }
    ,
    Array.prototype.min = function() {
        for (var e = this[0], t = this.length, i = 1; i < t; i++)
            this[i] < e && (e = this[i]);
        return e
    }
    ,
    Array.prototype.max = function() {
        for (var e = this[0], t = this.length, i = 1; i < t; i++)
            this[i] > e && (e = this[i]);
        return e
    }
    ,
    Array.prototype.intersect = function() {
        if (!arguments.length)
            return [];
        for (var e = this, t = null , i = null , n = 0; n < arguments.length; ) {
            t = [],
            i = arguments[n];
            for (var s = e.length, r = i.length, o = 0; o < s; o++)
                for (var a = 0; a < r; a++)
                    e[o] === i[a] && t.push(e[o]);
            e = t,
            n++
        }
        return t.unique()
    }
    ,
    Array.prototype.equals = function(e) {
        var t = this.length;
        if (t !== e.length)
            return !1;
        var i = this.clone().sort();
        return e = e.clone().sort(),
        i.every(function(t, i) {
            return t === e[i]
        })
    }
    ,
    Array.prototype.clone = function() {
        return [].concat(this)
    }
    ,
    Array.prototype.last = function() {
        return this[this.length - 1]
    }
    ,
    Array.prototype.first = function() {
        return this[0]
    }
    ,
    Number.prototype.toRad = function() {
        return this * Math.PI / 180
    }
    ,
    Number.prototype.toDeg = function() {
        return this / Math.PI * 180
    }
    ,
    Array.prototype.groupBy = function(e, t) {
        for (var i = {
            true: [],
            false: []
        }, n = 0, s = this.length; n < s; n++)
            i[e.apply(this, [this[n]])].push(this[n]);
        return i
    }
    ,
    Array.prototype.toSet = function() {
        return this.reduce(function(e, t) {
            return e[t] = !0,
            e
        }, {})
    }
    ,
    $.fn.booleanVal = function() {
        var e = this.val();
        return "null" === e ? null : "true" === e
    }
}
, function(e, t, i) {
    var n = i(13)
      , s = OpenLayers.Class({
        ResultsPerPage: 5,
        $element: null ,
        events: null ,
        initialize: function(e) {
            this.events = new OpenLayers.Events(this),
            this.$element = e,
            this.render()
        },
        render: function() {
            var e = this;
            this.$element.delegate(".result", "click", function() {
                var t = this.dataset.id;
                $(this).hasClass("session-available") && e.events.triggerEvent("sessionClicked", {
                    id: t
                })
            }),
            $('a[href="#' + this.$element.attr("id") + '"]').on("show.bs.tab", function() {
                e.events.triggerEvent("shown")
            })
        },
        destroy: function() {
            this.events.destroy()
        },
        setLoading: function(e) {
            e ? (this.$element.find(".result-list-container").empty(),
            this.$element.find(".pagination").addClass("loading"),
            this.$element.find(".loading-animation").removeClass("hide")) : (this.$element.find(".pagination").removeClass("loading"),
            this.$element.find(".loading-animation").addClass("hide"))
        },
        setSessions: function(e) {
            this.$element.find(".result-list-container").empty(),
            this.$element.find(".pagination").toggle(e > this.ResultsPerPage),
            this.$element.find(".pagination").pagination(e, {
                callback: OpenLayers.Function.bind(this.onPaginationLinkClicked, this),
                items_per_page: this.ResultsPerPage,
                num_display_entries: this.ResultsPerPage - 1,
                next_text: "",
                prev_text: "",
                num_edge_entries: 1,
                ellipse_text: "..."
            })
        },
        setSessionsPage: function(e, t, i) {
            var s = this;
            this.$element.find(".result-list-container").html(n.getHTML("templates/archive-sessions", {
                sessions: e,
                username: t,
                isStaff: i
            })),
            this.$element.find(".sessions-search form").on("submit", function(e) {
                e.preventDefault();
                var t = $(e.target);
                s.events.triggerEvent("searchSubmitted", {
                    username: t.find("input[name=username]").val()
                })
            })
        },
        setSelectedSession: function(e) {
            this.$element.find("#archive-sessions .result").removeClass("selected"),
            null !== e && this.$element.find("#archive-sessions .result[data-id=" + e + "]").addClass("selected")
        },
        onPaginationLinkClicked: function(e) {
            this.events.triggerEvent("paginationLinkClicked", {
                index: e
            })
        },
        onAreaPaginationLinkClicked: function(e) {
            this.events.triggerEvent("areasPaginationLinkClicked", {
                index: e
            })
        },
        showError: function() {
            this.$element.find(".error").removeClass("hide")
        },
        reset: function() {},
        show: function() {},
        hide: function() {},
        CLASS_NAME: "Waze.View.Archive"
    });
    e.exports = s
}
, function(e, t, i) {
    var n = i(13)
      , s = OpenLayers.Class({
        ResultsPerPage: 5,
        $element: null ,
        events: null ,
        initialize: function(e) {
            this.events = new OpenLayers.Events(this),
            this.$element = e,
            this.render()
        },
        render: function() {
            var e = this;
            this.$element.delegate(".result", "click", function() {
                var t = $(this).data("index");
                e.events.triggerEvent("areaClicked", {
                    areaIndex: t
                })
            })
        },
        destroy: function() {
            this.events.destroy()
        },
        setLoading: function(e) {
            e ? (this.$element.find(".result-list-container").empty(),
            this.$element.find(".pagination").addClass("loading")) : this.$element.find(".pagination").removeClass("loading")
        },
        setEditableAreas: function(e) {
            this.$element.find(".result-list-container").empty(),
            this.$element.find(".pagination").toggle(e > this.ResultsPerPage),
            this.$element.find(".pagination").pagination(e, {
                callback: OpenLayers.Function.bind(this.onAreaPaginationLinkClicked, this),
                items_per_page: this.ResultsPerPage,
                num_display_entries: this.ResultsPerPage - 1,
                next_text: "",
                prev_text: "",
                num_edge_entries: 1,
                ellipse_text: "..."
            })
        },
        setEditableAreasPage: function(e) {
            this.$element.find(".result-list-container").html(n.getHTML("templates/editable-areas", {
                areas: e
            }))
        },
        onAreaPaginationLinkClicked: function(e) {
            this.events.triggerEvent("areasPaginationLinkClicked", {
                index: e
            })
        },
        reset: function() {},
        show: function() {},
        hide: function() {},
        CLASS_NAME: "Waze.View.EditableAreas"
    });
    e.exports = s
}
, function(e, t, i) {
    var n, s = i(116), r = i(13);
    n = OpenLayers.Class({
        events: null ,
        $element: null ,
        currentAction: null ,
        active: !1,
        initialize: function() {
            var e = this;
            this.$element = $("#keyboard-dialog"),
            this.events = new OpenLayers.Events(this),
            W.accelerators.events.register("showShortcutsDialog", this, function() {
                this.show()
            }),
            $(window).bind("keydown.shortcut-editor", OpenLayers.Function.bind(this.onKeyDown, this)),
            $(window).bind("keyup.shortcut-editor", OpenLayers.Function.bind(this.onKeyUp, this)),
            this.$element.delegate(".shortcut-action", "click", function() {
                e.onActionClicked(this.dataset.action)
            }),
            this.$element.on("hide.bs.modal", OpenLayers.Function.bind(this.onDialogClose, this)),
            this.$element.on("show.bs.modal", function() {
                e.activate()
            })
        },
        activate: function() {
            this.render(),
            this.active = !0
        },
        show: function() {
            this.activate(),
            this.$element.modal("show")
        },
        onDialogClose: function() {
            this.active = !1
        },
        render: function() {
            this.$element.html(r.getHTML("templates/keyboard_shortcuts/modal", {
                groups: Waze.accelerators.Groups
            }))
        },
        renderList: function() {
            this.$element.find(".modal-body").html(r.getHTML("templates/keyboard_shortcuts/list", {
                groups: Waze.accelerators.Groups
            }))
        },
        onActionClicked: function(e) {
            var t = this.$element.find(".shortcut-action[data-action=" + e + "]");
            t.hasClass("disabled") || (this.currentAction && this.currentAction.removeClass("selected"),
            this.currentAction = t,
            this.currentAction.addClass("selected"))
        },
        onKeyDown: function(e) {
            var t = String.fromCharCode(e.which)
              , i = e.which;
            if (this.active && this.currentAction)
                return e.stopImmediatePropagation(),
                (t.match(/^[a-zA-Z0-9]+/) || Object.keys(Waze.accelerators.SpecialKeys).contains(i.toString())) && (Waze.accelerators.registerShortcut(new s.KeyStroke(e).toString(), this.currentAction.get(0).dataset.action, !0),
                this.currentAction.removeClass("selected"),
                Waze.accelerators.persist(),
                this.currentAction = null ,
                this.renderList()),
                !1
        },
        onKeyUp: function(e) {
            this.active && this.currentAction && e.stopImmediatePropagation()
        },
        getModifiersString: function(e) {
            var t = "";
            return e.shiftKey && (t += "Shift+"),
            e.ctrlKey && !e.metaKey && (t += "Control+"),
            e.altKey && (t += "Alt+"),
            e.metaKey && (t += "Command+"),
            t
        },
        getShortcutCode: function(e, t) {
            var i = "";
            return e.shiftKey && (i += "S"),
            (e.ctrlKey || e.metaKey) && (i += "C"),
            e.altKey && (i += "A"),
            i + "+" + t
        },
        destroy: function() {
            this.events.destroy()
        },
        CLASS_NAME: "Waze.View.KeyboardShortcutEditor"
    }),
    e.exports = n
}
, function(e, t, i) {
    var n = i(13)
      , s = OpenLayers.Class({
        videos: ["intro", "before_you_start", "getting_started", "basic_terms", "basic_editing", "map_problems", "examples"],
        videoDetails: null ,
        $element: null ,
        player: null ,
        currentVideo: null ,
        YoutubePlayerStates: {
            End: 0
        },
        initialize: function(e) {
            var t = this;
            this.$element = e,
            this.videoDetails = I18n.t("tutorial.videos"),
            this.$element.delegate(".video-menu .video-link", "click", function() {
                t.onVideoSectionClicked(this.dataset.videoKey)
            }),
            this.$element.delegate(".dialog-close-button", "click", function() {
                t.$element.modal("hide"),
                t.onDialogClose()
            }),
            this.$element.on("show.bs.modal", function() {
                t.initPlayer()
            })
        },
        initPlayer: function() {
            var e = this
              , t = this.videos.first()
              , i = this.videoDetails[t].video_id;
            $.when(this.getYoutubePlayer()).done(function(n) {
                e.$element.find(".video-menu").show(),
                e.setSelectedVideoLink(t),
                e.$element.data("bs.modal").isShown ? n.loadVideoById(i) : n.cueVideoById(i)
            })
        },
        onDialogClose: function() {
            this.player && this.player.stopVideo()
        },
        render: function() {
            return this.$element.html(n.getHTML("templates/tutorial-lightbox", {
                videos: this.videos
            }))
        },
        onVideoSectionClicked: function(e) {
            this.setSelectedVideoLink(e),
            this.player.loadVideoById(this.videoDetails[e].video_id)
        },
        setSelectedVideoLink: function(e) {
            this.currentVideo = e,
            this.$element.find(".video-link").removeClass("active"),
            this.$element.find(".video-link[data-video-key=" + e + "]").addClass("active")
        },
        onPlayerStateChanged: function(e) {
            var t = e.data;
            t === this.YoutubePlayerStates.End && this.playNextVideo()
        },
        playNextVideo: function() {
            var e, t, i = this.videos.indexOf(this.currentVideo) + 1;
            i >= this.videos.length && (i = 0),
            t = this.videos[i],
            e = this.videoDetails[t].video_id,
            this.setSelectedVideoLink(t),
            0 === i ? this.player.cueVideoById(e) : this.player.loadVideoById(e)
        },
        getYoutubePlayer: function() {
            var e = this
              , t = $.Deferred();
            if (null !== this.player)
                return this.player;
            var i = function(i) {
                e.player = i.target,
                t.resolve(e.player)
            };
            return this.render(),
            $.getScript("https://www.youtube.com/player_api"),
            window.onYouTubePlayerAPIReady = function() {
                delete window.onYouTubePlayerAPIReady,
                new window.YT.Player("tutorial-player",{
                    height: "481",
                    width: "800",
                    playerVars: {
                        wmode: "transparent",
                        modestbranding: 1,
                        rel: 0,
                        showinfo: 0,
                        showsearch: 0
                    },
                    events: {
                        onReady: i,
                        onStateChange: $.proxy(e.onPlayerStateChanged, e)
                    }
                })
            }
            ,
            t
        },
        CLASS_NAME: "Waze.View.Tutorial"
    });
    e.exports = s
}
]);
